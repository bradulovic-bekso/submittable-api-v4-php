<?php
/**
 * FormRequestFieldsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Submittable\Model;

use \ArrayAccess;
use \Submittable\ObjectSerializer;

/**
 * FormRequestFieldsInner Class Doc Comment
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FormRequestFieldsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'field_type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FormRequest_fields_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'label' => 'string',
        'count_limit' => 'int',
        'count_type' => 'string',
        'special_validation' => 'int',
        'field_type' => 'string',
        'form_field_id' => 'string',
        'additional_instructions' => 'string',
        'is_required' => 'bool',
        'branch_id' => 'string',
        'block_id' => 'string',
        'tags' => 'string[]',
        'share_feedback' => 'bool',
        'is_concealed' => 'bool',
        'first_name_count_limit' => 'int',
        'last_name_count_limit' => 'int',
        'require_valid_us_address' => 'bool',
        'allow_rich_text_editing' => 'bool',
        'auto_label' => 'bool',
        'is_custom_auto_label' => 'bool',
        'custom_auto_label' => 'string',
        'enable_payment' => 'bool',
        'price' => 'float',
        'options' => '\Submittable\Model\OptionRequest[]',
        'enable_branching' => 'bool',
        'inline' => 'bool',
        'file_types' => 'string[]',
        'file_limit' => 'int',
        'metadata' => '\Submittable\Model\MetadataRequest[]',
        'table_id' => 'string',
        'min_value' => 'string',
        'max_value' => 'string',
        'format' => 'string',
        'currency' => 'string',
        'default_country' => 'string',
        'text_block' => 'string',
        'reference_form_id' => 'string',
        'org_message' => 'string',
        'show_org_message' => 'bool',
        'eligible_subsections' => 'string[]',
        'is_eligible_value' => 'bool',
        'has_routing_number' => 'bool',
        'has_account_number' => 'bool',
        'fraud_prevention_type' => 'string',
        'kba_label_map' => 'array<string,string>',
        'idv_label_map' => 'object',
        'document_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'label' => null,
        'count_limit' => 'int32',
        'count_type' => null,
        'special_validation' => 'int32',
        'field_type' => null,
        'form_field_id' => null,
        'additional_instructions' => null,
        'is_required' => null,
        'branch_id' => null,
        'block_id' => null,
        'tags' => null,
        'share_feedback' => null,
        'is_concealed' => null,
        'first_name_count_limit' => 'int32',
        'last_name_count_limit' => 'int32',
        'require_valid_us_address' => null,
        'allow_rich_text_editing' => null,
        'auto_label' => null,
        'is_custom_auto_label' => null,
        'custom_auto_label' => null,
        'enable_payment' => null,
        'price' => 'double',
        'options' => null,
        'enable_branching' => null,
        'inline' => null,
        'file_types' => null,
        'file_limit' => 'int32',
        'metadata' => null,
        'table_id' => null,
        'min_value' => null,
        'max_value' => null,
        'format' => null,
        'currency' => null,
        'default_country' => null,
        'text_block' => null,
        'reference_form_id' => 'uuid',
        'org_message' => null,
        'show_org_message' => null,
        'eligible_subsections' => null,
        'is_eligible_value' => null,
        'has_routing_number' => null,
        'has_account_number' => null,
        'fraud_prevention_type' => null,
        'kba_label_map' => null,
        'idv_label_map' => null,
        'document_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'label' => false,
        'count_limit' => true,
        'count_type' => true,
        'special_validation' => false,
        'field_type' => false,
        'form_field_id' => true,
        'additional_instructions' => true,
        'is_required' => false,
        'branch_id' => true,
        'block_id' => true,
        'tags' => true,
        'share_feedback' => false,
        'is_concealed' => false,
        'first_name_count_limit' => true,
        'last_name_count_limit' => true,
        'require_valid_us_address' => false,
        'allow_rich_text_editing' => false,
        'auto_label' => false,
        'is_custom_auto_label' => false,
        'custom_auto_label' => true,
        'enable_payment' => false,
        'price' => true,
        'options' => true,
        'enable_branching' => false,
        'inline' => false,
        'file_types' => true,
        'file_limit' => false,
        'metadata' => true,
        'table_id' => true,
        'min_value' => true,
        'max_value' => true,
        'format' => true,
        'currency' => true,
        'default_country' => true,
        'text_block' => true,
        'reference_form_id' => false,
        'org_message' => true,
        'show_org_message' => false,
        'eligible_subsections' => true,
        'is_eligible_value' => false,
        'has_routing_number' => false,
        'has_account_number' => false,
        'fraud_prevention_type' => true,
        'kba_label_map' => true,
        'idv_label_map' => true,
        'document_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
        'count_limit' => 'countLimit',
        'count_type' => 'countType',
        'special_validation' => 'specialValidation',
        'field_type' => 'fieldType',
        'form_field_id' => 'formFieldId',
        'additional_instructions' => 'additionalInstructions',
        'is_required' => 'isRequired',
        'branch_id' => 'branchId',
        'block_id' => 'blockId',
        'tags' => 'tags',
        'share_feedback' => 'shareFeedback',
        'is_concealed' => 'isConcealed',
        'first_name_count_limit' => 'firstNameCountLimit',
        'last_name_count_limit' => 'lastNameCountLimit',
        'require_valid_us_address' => 'requireValidUSAddress',
        'allow_rich_text_editing' => 'allowRichTextEditing',
        'auto_label' => 'autoLabel',
        'is_custom_auto_label' => 'isCustomAutoLabel',
        'custom_auto_label' => 'customAutoLabel',
        'enable_payment' => 'enablePayment',
        'price' => 'price',
        'options' => 'options',
        'enable_branching' => 'enableBranching',
        'inline' => 'inline',
        'file_types' => 'fileTypes',
        'file_limit' => 'fileLimit',
        'metadata' => 'metadata',
        'table_id' => 'tableId',
        'min_value' => 'minValue',
        'max_value' => 'maxValue',
        'format' => 'format',
        'currency' => 'currency',
        'default_country' => 'defaultCountry',
        'text_block' => 'textBlock',
        'reference_form_id' => 'referenceFormId',
        'org_message' => 'orgMessage',
        'show_org_message' => 'showOrgMessage',
        'eligible_subsections' => 'eligibleSubsections',
        'is_eligible_value' => 'isEligibleValue',
        'has_routing_number' => 'hasRoutingNumber',
        'has_account_number' => 'hasAccountNumber',
        'fraud_prevention_type' => 'fraudPreventionType',
        'kba_label_map' => 'kbaLabelMap',
        'idv_label_map' => 'idvLabelMap',
        'document_type' => 'documentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
        'count_limit' => 'setCountLimit',
        'count_type' => 'setCountType',
        'special_validation' => 'setSpecialValidation',
        'field_type' => 'setFieldType',
        'form_field_id' => 'setFormFieldId',
        'additional_instructions' => 'setAdditionalInstructions',
        'is_required' => 'setIsRequired',
        'branch_id' => 'setBranchId',
        'block_id' => 'setBlockId',
        'tags' => 'setTags',
        'share_feedback' => 'setShareFeedback',
        'is_concealed' => 'setIsConcealed',
        'first_name_count_limit' => 'setFirstNameCountLimit',
        'last_name_count_limit' => 'setLastNameCountLimit',
        'require_valid_us_address' => 'setRequireValidUsAddress',
        'allow_rich_text_editing' => 'setAllowRichTextEditing',
        'auto_label' => 'setAutoLabel',
        'is_custom_auto_label' => 'setIsCustomAutoLabel',
        'custom_auto_label' => 'setCustomAutoLabel',
        'enable_payment' => 'setEnablePayment',
        'price' => 'setPrice',
        'options' => 'setOptions',
        'enable_branching' => 'setEnableBranching',
        'inline' => 'setInline',
        'file_types' => 'setFileTypes',
        'file_limit' => 'setFileLimit',
        'metadata' => 'setMetadata',
        'table_id' => 'setTableId',
        'min_value' => 'setMinValue',
        'max_value' => 'setMaxValue',
        'format' => 'setFormat',
        'currency' => 'setCurrency',
        'default_country' => 'setDefaultCountry',
        'text_block' => 'setTextBlock',
        'reference_form_id' => 'setReferenceFormId',
        'org_message' => 'setOrgMessage',
        'show_org_message' => 'setShowOrgMessage',
        'eligible_subsections' => 'setEligibleSubsections',
        'is_eligible_value' => 'setIsEligibleValue',
        'has_routing_number' => 'setHasRoutingNumber',
        'has_account_number' => 'setHasAccountNumber',
        'fraud_prevention_type' => 'setFraudPreventionType',
        'kba_label_map' => 'setKbaLabelMap',
        'idv_label_map' => 'setIdvLabelMap',
        'document_type' => 'setDocumentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
        'count_limit' => 'getCountLimit',
        'count_type' => 'getCountType',
        'special_validation' => 'getSpecialValidation',
        'field_type' => 'getFieldType',
        'form_field_id' => 'getFormFieldId',
        'additional_instructions' => 'getAdditionalInstructions',
        'is_required' => 'getIsRequired',
        'branch_id' => 'getBranchId',
        'block_id' => 'getBlockId',
        'tags' => 'getTags',
        'share_feedback' => 'getShareFeedback',
        'is_concealed' => 'getIsConcealed',
        'first_name_count_limit' => 'getFirstNameCountLimit',
        'last_name_count_limit' => 'getLastNameCountLimit',
        'require_valid_us_address' => 'getRequireValidUsAddress',
        'allow_rich_text_editing' => 'getAllowRichTextEditing',
        'auto_label' => 'getAutoLabel',
        'is_custom_auto_label' => 'getIsCustomAutoLabel',
        'custom_auto_label' => 'getCustomAutoLabel',
        'enable_payment' => 'getEnablePayment',
        'price' => 'getPrice',
        'options' => 'getOptions',
        'enable_branching' => 'getEnableBranching',
        'inline' => 'getInline',
        'file_types' => 'getFileTypes',
        'file_limit' => 'getFileLimit',
        'metadata' => 'getMetadata',
        'table_id' => 'getTableId',
        'min_value' => 'getMinValue',
        'max_value' => 'getMaxValue',
        'format' => 'getFormat',
        'currency' => 'getCurrency',
        'default_country' => 'getDefaultCountry',
        'text_block' => 'getTextBlock',
        'reference_form_id' => 'getReferenceFormId',
        'org_message' => 'getOrgMessage',
        'show_org_message' => 'getShowOrgMessage',
        'eligible_subsections' => 'getEligibleSubsections',
        'is_eligible_value' => 'getIsEligibleValue',
        'has_routing_number' => 'getHasRoutingNumber',
        'has_account_number' => 'getHasAccountNumber',
        'fraud_prevention_type' => 'getFraudPreventionType',
        'kba_label_map' => 'getKbaLabelMap',
        'idv_label_map' => 'getIdvLabelMap',
        'document_type' => 'getDocumentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FRAUD_PREVENTION_TYPE_KBA = 'KBA';
    public const FRAUD_PREVENTION_TYPE_IDV = 'IDV';
    public const DOCUMENT_TYPE_W2 = 'W2';
    public const DOCUMENT_TYPE__1099_NEC = '1099-NEC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFraudPreventionTypeAllowableValues()
    {
        return [
            self::FRAUD_PREVENTION_TYPE_KBA,
            self::FRAUD_PREVENTION_TYPE_IDV,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_W2,
            self::DOCUMENT_TYPE__1099_NEC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('count_limit', $data ?? [], null);
        $this->setIfExists('count_type', $data ?? [], null);
        $this->setIfExists('special_validation', $data ?? [], null);
        $this->setIfExists('field_type', $data ?? [], null);
        $this->setIfExists('form_field_id', $data ?? [], null);
        $this->setIfExists('additional_instructions', $data ?? [], null);
        $this->setIfExists('is_required', $data ?? [], null);
        $this->setIfExists('branch_id', $data ?? [], null);
        $this->setIfExists('block_id', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('share_feedback', $data ?? [], null);
        $this->setIfExists('is_concealed', $data ?? [], null);
        $this->setIfExists('first_name_count_limit', $data ?? [], null);
        $this->setIfExists('last_name_count_limit', $data ?? [], null);
        $this->setIfExists('require_valid_us_address', $data ?? [], null);
        $this->setIfExists('allow_rich_text_editing', $data ?? [], null);
        $this->setIfExists('auto_label', $data ?? [], null);
        $this->setIfExists('is_custom_auto_label', $data ?? [], null);
        $this->setIfExists('custom_auto_label', $data ?? [], null);
        $this->setIfExists('enable_payment', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('enable_branching', $data ?? [], null);
        $this->setIfExists('inline', $data ?? [], null);
        $this->setIfExists('file_types', $data ?? [], null);
        $this->setIfExists('file_limit', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('table_id', $data ?? [], null);
        $this->setIfExists('min_value', $data ?? [], null);
        $this->setIfExists('max_value', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('default_country', $data ?? [], null);
        $this->setIfExists('text_block', $data ?? [], null);
        $this->setIfExists('reference_form_id', $data ?? [], null);
        $this->setIfExists('org_message', $data ?? [], null);
        $this->setIfExists('show_org_message', $data ?? [], null);
        $this->setIfExists('eligible_subsections', $data ?? [], null);
        $this->setIfExists('is_eligible_value', $data ?? [], null);
        $this->setIfExists('has_routing_number', $data ?? [], null);
        $this->setIfExists('has_account_number', $data ?? [], null);
        $this->setIfExists('fraud_prevention_type', $data ?? [], null);
        $this->setIfExists('kba_label_map', $data ?? [], null);
        $this->setIfExists('idv_label_map', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['field_type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) < 1)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['field_type'] === null) {
            $invalidProperties[] = "'field_type' can't be null";
        }
        if ((mb_strlen($this->container['field_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'field_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['reference_form_id'] === null) {
            $invalidProperties[] = "'reference_form_id' can't be null";
        }
        $allowedValues = $this->getFraudPreventionTypeAllowableValues();
        if (!is_null($this->container['fraud_prevention_type']) && !in_array($this->container['fraud_prevention_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fraud_prevention_type', must be one of '%s'",
                $this->container['fraud_prevention_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_type', must be one of '%s'",
                $this->container['document_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }

        if ((mb_strlen($label) < 1)) {
            throw new \InvalidArgumentException('invalid length for $label when calling FormRequestFieldsInner., must be bigger than or equal to 1.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets count_limit
     *
     * @return int|null
     */
    public function getCountLimit()
    {
        return $this->container['count_limit'];
    }

    /**
     * Sets count_limit
     *
     * @param int|null $count_limit count_limit
     *
     * @return self
     */
    public function setCountLimit($count_limit)
    {
        if (is_null($count_limit)) {
            array_push($this->openAPINullablesSetToNull, 'count_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count_limit'] = $count_limit;

        return $this;
    }

    /**
     * Gets count_type
     *
     * @return string|null
     */
    public function getCountType()
    {
        return $this->container['count_type'];
    }

    /**
     * Sets count_type
     *
     * @param string|null $count_type count_type
     *
     * @return self
     */
    public function setCountType($count_type)
    {
        if (is_null($count_type)) {
            array_push($this->openAPINullablesSetToNull, 'count_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count_type'] = $count_type;

        return $this;
    }

    /**
     * Gets special_validation
     *
     * @return int|null
     */
    public function getSpecialValidation()
    {
        return $this->container['special_validation'];
    }

    /**
     * Sets special_validation
     *
     * @param int|null $special_validation special_validation
     *
     * @return self
     */
    public function setSpecialValidation($special_validation)
    {
        if (is_null($special_validation)) {
            throw new \InvalidArgumentException('non-nullable special_validation cannot be null');
        }
        $this->container['special_validation'] = $special_validation;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string $field_type field_type
     *
     * @return self
     */
    public function setFieldType($field_type)
    {
        if (is_null($field_type)) {
            throw new \InvalidArgumentException('non-nullable field_type cannot be null');
        }

        if ((mb_strlen($field_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $field_type when calling FormRequestFieldsInner., must be bigger than or equal to 1.');
        }

        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets form_field_id
     *
     * @return string|null
     */
    public function getFormFieldId()
    {
        return $this->container['form_field_id'];
    }

    /**
     * Sets form_field_id
     *
     * @param string|null $form_field_id form_field_id
     *
     * @return self
     */
    public function setFormFieldId($form_field_id)
    {
        if (is_null($form_field_id)) {
            array_push($this->openAPINullablesSetToNull, 'form_field_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_field_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_field_id'] = $form_field_id;

        return $this;
    }

    /**
     * Gets additional_instructions
     *
     * @return string|null
     */
    public function getAdditionalInstructions()
    {
        return $this->container['additional_instructions'];
    }

    /**
     * Sets additional_instructions
     *
     * @param string|null $additional_instructions additional_instructions
     *
     * @return self
     */
    public function setAdditionalInstructions($additional_instructions)
    {
        if (is_null($additional_instructions)) {
            array_push($this->openAPINullablesSetToNull, 'additional_instructions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_instructions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_instructions'] = $additional_instructions;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool|null
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool|null $is_required is_required
     *
     * @return self
     */
    public function setIsRequired($is_required)
    {
        if (is_null($is_required)) {
            throw new \InvalidArgumentException('non-nullable is_required cannot be null');
        }
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets branch_id
     *
     * @return string|null
     */
    public function getBranchId()
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     *
     * @param string|null $branch_id branch_id
     *
     * @return self
     */
    public function setBranchId($branch_id)
    {
        if (is_null($branch_id)) {
            array_push($this->openAPINullablesSetToNull, 'branch_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branch_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['branch_id'] = $branch_id;

        return $this;
    }

    /**
     * Gets block_id
     *
     * @return string|null
     */
    public function getBlockId()
    {
        return $this->container['block_id'];
    }

    /**
     * Sets block_id
     *
     * @param string|null $block_id block_id
     *
     * @return self
     */
    public function setBlockId($block_id)
    {
        if (is_null($block_id)) {
            array_push($this->openAPINullablesSetToNull, 'block_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_id'] = $block_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets share_feedback
     *
     * @return bool|null
     */
    public function getShareFeedback()
    {
        return $this->container['share_feedback'];
    }

    /**
     * Sets share_feedback
     *
     * @param bool|null $share_feedback share_feedback
     *
     * @return self
     */
    public function setShareFeedback($share_feedback)
    {
        if (is_null($share_feedback)) {
            throw new \InvalidArgumentException('non-nullable share_feedback cannot be null');
        }
        $this->container['share_feedback'] = $share_feedback;

        return $this;
    }

    /**
     * Gets is_concealed
     *
     * @return bool|null
     */
    public function getIsConcealed()
    {
        return $this->container['is_concealed'];
    }

    /**
     * Sets is_concealed
     *
     * @param bool|null $is_concealed is_concealed
     *
     * @return self
     */
    public function setIsConcealed($is_concealed)
    {
        if (is_null($is_concealed)) {
            throw new \InvalidArgumentException('non-nullable is_concealed cannot be null');
        }
        $this->container['is_concealed'] = $is_concealed;

        return $this;
    }

    /**
     * Gets first_name_count_limit
     *
     * @return int|null
     */
    public function getFirstNameCountLimit()
    {
        return $this->container['first_name_count_limit'];
    }

    /**
     * Sets first_name_count_limit
     *
     * @param int|null $first_name_count_limit first_name_count_limit
     *
     * @return self
     */
    public function setFirstNameCountLimit($first_name_count_limit)
    {
        if (is_null($first_name_count_limit)) {
            array_push($this->openAPINullablesSetToNull, 'first_name_count_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name_count_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name_count_limit'] = $first_name_count_limit;

        return $this;
    }

    /**
     * Gets last_name_count_limit
     *
     * @return int|null
     */
    public function getLastNameCountLimit()
    {
        return $this->container['last_name_count_limit'];
    }

    /**
     * Sets last_name_count_limit
     *
     * @param int|null $last_name_count_limit last_name_count_limit
     *
     * @return self
     */
    public function setLastNameCountLimit($last_name_count_limit)
    {
        if (is_null($last_name_count_limit)) {
            array_push($this->openAPINullablesSetToNull, 'last_name_count_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name_count_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name_count_limit'] = $last_name_count_limit;

        return $this;
    }

    /**
     * Gets require_valid_us_address
     *
     * @return bool|null
     */
    public function getRequireValidUsAddress()
    {
        return $this->container['require_valid_us_address'];
    }

    /**
     * Sets require_valid_us_address
     *
     * @param bool|null $require_valid_us_address require_valid_us_address
     *
     * @return self
     */
    public function setRequireValidUsAddress($require_valid_us_address)
    {
        if (is_null($require_valid_us_address)) {
            throw new \InvalidArgumentException('non-nullable require_valid_us_address cannot be null');
        }
        $this->container['require_valid_us_address'] = $require_valid_us_address;

        return $this;
    }

    /**
     * Gets allow_rich_text_editing
     *
     * @return bool|null
     */
    public function getAllowRichTextEditing()
    {
        return $this->container['allow_rich_text_editing'];
    }

    /**
     * Sets allow_rich_text_editing
     *
     * @param bool|null $allow_rich_text_editing allow_rich_text_editing
     *
     * @return self
     */
    public function setAllowRichTextEditing($allow_rich_text_editing)
    {
        if (is_null($allow_rich_text_editing)) {
            throw new \InvalidArgumentException('non-nullable allow_rich_text_editing cannot be null');
        }
        $this->container['allow_rich_text_editing'] = $allow_rich_text_editing;

        return $this;
    }

    /**
     * Gets auto_label
     *
     * @return bool|null
     */
    public function getAutoLabel()
    {
        return $this->container['auto_label'];
    }

    /**
     * Sets auto_label
     *
     * @param bool|null $auto_label auto_label
     *
     * @return self
     */
    public function setAutoLabel($auto_label)
    {
        if (is_null($auto_label)) {
            throw new \InvalidArgumentException('non-nullable auto_label cannot be null');
        }
        $this->container['auto_label'] = $auto_label;

        return $this;
    }

    /**
     * Gets is_custom_auto_label
     *
     * @return bool|null
     */
    public function getIsCustomAutoLabel()
    {
        return $this->container['is_custom_auto_label'];
    }

    /**
     * Sets is_custom_auto_label
     *
     * @param bool|null $is_custom_auto_label is_custom_auto_label
     *
     * @return self
     */
    public function setIsCustomAutoLabel($is_custom_auto_label)
    {
        if (is_null($is_custom_auto_label)) {
            throw new \InvalidArgumentException('non-nullable is_custom_auto_label cannot be null');
        }
        $this->container['is_custom_auto_label'] = $is_custom_auto_label;

        return $this;
    }

    /**
     * Gets custom_auto_label
     *
     * @return string|null
     */
    public function getCustomAutoLabel()
    {
        return $this->container['custom_auto_label'];
    }

    /**
     * Sets custom_auto_label
     *
     * @param string|null $custom_auto_label custom_auto_label
     *
     * @return self
     */
    public function setCustomAutoLabel($custom_auto_label)
    {
        if (is_null($custom_auto_label)) {
            array_push($this->openAPINullablesSetToNull, 'custom_auto_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_auto_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_auto_label'] = $custom_auto_label;

        return $this;
    }

    /**
     * Gets enable_payment
     *
     * @return bool|null
     */
    public function getEnablePayment()
    {
        return $this->container['enable_payment'];
    }

    /**
     * Sets enable_payment
     *
     * @param bool|null $enable_payment enable_payment
     *
     * @return self
     */
    public function setEnablePayment($enable_payment)
    {
        if (is_null($enable_payment)) {
            throw new \InvalidArgumentException('non-nullable enable_payment cannot be null');
        }
        $this->container['enable_payment'] = $enable_payment;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \Submittable\Model\OptionRequest[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Submittable\Model\OptionRequest[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            array_push($this->openAPINullablesSetToNull, 'options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets enable_branching
     *
     * @return bool|null
     */
    public function getEnableBranching()
    {
        return $this->container['enable_branching'];
    }

    /**
     * Sets enable_branching
     *
     * @param bool|null $enable_branching enable_branching
     *
     * @return self
     */
    public function setEnableBranching($enable_branching)
    {
        if (is_null($enable_branching)) {
            throw new \InvalidArgumentException('non-nullable enable_branching cannot be null');
        }
        $this->container['enable_branching'] = $enable_branching;

        return $this;
    }

    /**
     * Gets inline
     *
     * @return bool|null
     */
    public function getInline()
    {
        return $this->container['inline'];
    }

    /**
     * Sets inline
     *
     * @param bool|null $inline inline
     *
     * @return self
     */
    public function setInline($inline)
    {
        if (is_null($inline)) {
            throw new \InvalidArgumentException('non-nullable inline cannot be null');
        }
        $this->container['inline'] = $inline;

        return $this;
    }

    /**
     * Gets file_types
     *
     * @return string[]|null
     */
    public function getFileTypes()
    {
        return $this->container['file_types'];
    }

    /**
     * Sets file_types
     *
     * @param string[]|null $file_types file_types
     *
     * @return self
     */
    public function setFileTypes($file_types)
    {
        if (is_null($file_types)) {
            array_push($this->openAPINullablesSetToNull, 'file_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_types'] = $file_types;

        return $this;
    }

    /**
     * Gets file_limit
     *
     * @return int|null
     */
    public function getFileLimit()
    {
        return $this->container['file_limit'];
    }

    /**
     * Sets file_limit
     *
     * @param int|null $file_limit file_limit
     *
     * @return self
     */
    public function setFileLimit($file_limit)
    {
        if (is_null($file_limit)) {
            throw new \InvalidArgumentException('non-nullable file_limit cannot be null');
        }
        $this->container['file_limit'] = $file_limit;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Submittable\Model\MetadataRequest[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Submittable\Model\MetadataRequest[]|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets table_id
     *
     * @return string|null
     */
    public function getTableId()
    {
        return $this->container['table_id'];
    }

    /**
     * Sets table_id
     *
     * @param string|null $table_id table_id
     *
     * @return self
     */
    public function setTableId($table_id)
    {
        if (is_null($table_id)) {
            array_push($this->openAPINullablesSetToNull, 'table_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('table_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['table_id'] = $table_id;

        return $this;
    }

    /**
     * Gets min_value
     *
     * @return string|null
     */
    public function getMinValue()
    {
        return $this->container['min_value'];
    }

    /**
     * Sets min_value
     *
     * @param string|null $min_value min_value
     *
     * @return self
     */
    public function setMinValue($min_value)
    {
        if (is_null($min_value)) {
            array_push($this->openAPINullablesSetToNull, 'min_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_value'] = $min_value;

        return $this;
    }

    /**
     * Gets max_value
     *
     * @return string|null
     */
    public function getMaxValue()
    {
        return $this->container['max_value'];
    }

    /**
     * Sets max_value
     *
     * @param string|null $max_value max_value
     *
     * @return self
     */
    public function setMaxValue($max_value)
    {
        if (is_null($max_value)) {
            array_push($this->openAPINullablesSetToNull, 'max_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_value'] = $max_value;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            array_push($this->openAPINullablesSetToNull, 'format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets default_country
     *
     * @return string|null
     */
    public function getDefaultCountry()
    {
        return $this->container['default_country'];
    }

    /**
     * Sets default_country
     *
     * @param string|null $default_country default_country
     *
     * @return self
     */
    public function setDefaultCountry($default_country)
    {
        if (is_null($default_country)) {
            array_push($this->openAPINullablesSetToNull, 'default_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_country'] = $default_country;

        return $this;
    }

    /**
     * Gets text_block
     *
     * @return string|null
     */
    public function getTextBlock()
    {
        return $this->container['text_block'];
    }

    /**
     * Sets text_block
     *
     * @param string|null $text_block text_block
     *
     * @return self
     */
    public function setTextBlock($text_block)
    {
        if (is_null($text_block)) {
            array_push($this->openAPINullablesSetToNull, 'text_block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text_block'] = $text_block;

        return $this;
    }

    /**
     * Gets reference_form_id
     *
     * @return string
     */
    public function getReferenceFormId()
    {
        return $this->container['reference_form_id'];
    }

    /**
     * Sets reference_form_id
     *
     * @param string $reference_form_id reference_form_id
     *
     * @return self
     */
    public function setReferenceFormId($reference_form_id)
    {
        if (is_null($reference_form_id)) {
            throw new \InvalidArgumentException('non-nullable reference_form_id cannot be null');
        }
        $this->container['reference_form_id'] = $reference_form_id;

        return $this;
    }

    /**
     * Gets org_message
     *
     * @return string|null
     */
    public function getOrgMessage()
    {
        return $this->container['org_message'];
    }

    /**
     * Sets org_message
     *
     * @param string|null $org_message org_message
     *
     * @return self
     */
    public function setOrgMessage($org_message)
    {
        if (is_null($org_message)) {
            array_push($this->openAPINullablesSetToNull, 'org_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('org_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['org_message'] = $org_message;

        return $this;
    }

    /**
     * Gets show_org_message
     *
     * @return bool|null
     */
    public function getShowOrgMessage()
    {
        return $this->container['show_org_message'];
    }

    /**
     * Sets show_org_message
     *
     * @param bool|null $show_org_message show_org_message
     *
     * @return self
     */
    public function setShowOrgMessage($show_org_message)
    {
        if (is_null($show_org_message)) {
            throw new \InvalidArgumentException('non-nullable show_org_message cannot be null');
        }
        $this->container['show_org_message'] = $show_org_message;

        return $this;
    }

    /**
     * Gets eligible_subsections
     *
     * @return string[]|null
     */
    public function getEligibleSubsections()
    {
        return $this->container['eligible_subsections'];
    }

    /**
     * Sets eligible_subsections
     *
     * @param string[]|null $eligible_subsections eligible_subsections
     *
     * @return self
     */
    public function setEligibleSubsections($eligible_subsections)
    {
        if (is_null($eligible_subsections)) {
            array_push($this->openAPINullablesSetToNull, 'eligible_subsections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligible_subsections', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligible_subsections'] = $eligible_subsections;

        return $this;
    }

    /**
     * Gets is_eligible_value
     *
     * @return bool|null
     */
    public function getIsEligibleValue()
    {
        return $this->container['is_eligible_value'];
    }

    /**
     * Sets is_eligible_value
     *
     * @param bool|null $is_eligible_value is_eligible_value
     *
     * @return self
     */
    public function setIsEligibleValue($is_eligible_value)
    {
        if (is_null($is_eligible_value)) {
            throw new \InvalidArgumentException('non-nullable is_eligible_value cannot be null');
        }
        $this->container['is_eligible_value'] = $is_eligible_value;

        return $this;
    }

    /**
     * Gets has_routing_number
     *
     * @return bool|null
     */
    public function getHasRoutingNumber()
    {
        return $this->container['has_routing_number'];
    }

    /**
     * Sets has_routing_number
     *
     * @param bool|null $has_routing_number has_routing_number
     *
     * @return self
     */
    public function setHasRoutingNumber($has_routing_number)
    {
        if (is_null($has_routing_number)) {
            throw new \InvalidArgumentException('non-nullable has_routing_number cannot be null');
        }
        $this->container['has_routing_number'] = $has_routing_number;

        return $this;
    }

    /**
     * Gets has_account_number
     *
     * @return bool|null
     */
    public function getHasAccountNumber()
    {
        return $this->container['has_account_number'];
    }

    /**
     * Sets has_account_number
     *
     * @param bool|null $has_account_number has_account_number
     *
     * @return self
     */
    public function setHasAccountNumber($has_account_number)
    {
        if (is_null($has_account_number)) {
            throw new \InvalidArgumentException('non-nullable has_account_number cannot be null');
        }
        $this->container['has_account_number'] = $has_account_number;

        return $this;
    }

    /**
     * Gets fraud_prevention_type
     *
     * @return string|null
     */
    public function getFraudPreventionType()
    {
        return $this->container['fraud_prevention_type'];
    }

    /**
     * Sets fraud_prevention_type
     *
     * @param string|null $fraud_prevention_type fraud_prevention_type
     *
     * @return self
     */
    public function setFraudPreventionType($fraud_prevention_type)
    {
        if (is_null($fraud_prevention_type)) {
            array_push($this->openAPINullablesSetToNull, 'fraud_prevention_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fraud_prevention_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFraudPreventionTypeAllowableValues();
        if (!is_null($fraud_prevention_type) && !in_array($fraud_prevention_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fraud_prevention_type', must be one of '%s'",
                    $fraud_prevention_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fraud_prevention_type'] = $fraud_prevention_type;

        return $this;
    }

    /**
     * Gets kba_label_map
     *
     * @return array<string,string>|null
     */
    public function getKbaLabelMap()
    {
        return $this->container['kba_label_map'];
    }

    /**
     * Sets kba_label_map
     *
     * @param array<string,string>|null $kba_label_map kba_label_map
     *
     * @return self
     */
    public function setKbaLabelMap($kba_label_map)
    {
        if (is_null($kba_label_map)) {
            array_push($this->openAPINullablesSetToNull, 'kba_label_map');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('kba_label_map', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['kba_label_map'] = $kba_label_map;

        return $this;
    }

    /**
     * Gets idv_label_map
     *
     * @return object|null
     */
    public function getIdvLabelMap()
    {
        return $this->container['idv_label_map'];
    }

    /**
     * Sets idv_label_map
     *
     * @param object|null $idv_label_map idv_label_map
     *
     * @return self
     */
    public function setIdvLabelMap($idv_label_map)
    {
        if (is_null($idv_label_map)) {
            array_push($this->openAPINullablesSetToNull, 'idv_label_map');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('idv_label_map', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['idv_label_map'] = $idv_label_map;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            array_push($this->openAPINullablesSetToNull, 'document_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_type', must be one of '%s'",
                    $document_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


