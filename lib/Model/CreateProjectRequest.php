<?php
/**
 * CreateProjectRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Submittable\Model;

use \ArrayAccess;
use \Submittable\ObjectSerializer;

/**
 * CreateProjectRequest Class Doc Comment
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateProjectRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateProjectRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'guidelines_html' => 'string',
        'terms_of_use' => 'string',
        'eligibility_form_id' => 'string',
        'custom_ineligible_message' => 'string',
        'initial_form_id' => 'string',
        'internal_form_id' => 'string',
        'starts_at' => '\DateTime',
        'ends_at' => '\DateTime',
        'is_hidden' => 'bool',
        'is_live' => 'bool',
        'is_archived' => 'bool',
        'should_hide_blind_fields' => 'bool',
        'blind_level' => 'string',
        'require_public_org_id' => 'bool',
        'conceal_public_org_info' => 'bool',
        'require_validated_email' => 'bool',
        'enable_us_bank_check_payment' => 'bool',
        'enable_us_bank_ach_payment' => 'bool',
        'enable_us_bank_prepaid_card_payment' => 'bool',
        'us_bank_prepaid_card_disclosure_url' => 'string',
        'us_bank_ach_account_is_individual' => 'bool',
        'enable_organization_search' => 'bool',
        'organization_search_by_ein' => 'bool',
        'organization_search_by_uei' => 'bool',
        'discover_tags' => 'string[]',
        'default_note_visibility' => 'string',
        'email_on_submission' => 'bool',
        'auto_response_template_id' => 'string',
        'success_url' => 'string',
        'review_stages' => '\Submittable\Model\ReviewStageRequest[]',
        'enforce_submission_cap' => 'bool',
        'limit_multiple_submissions' => 'bool',
        'num_submissions_allowed' => 'int',
        'submission_cap_display_submission_cap' => 'bool',
        'send_submission_cap_notification' => 'bool',
        'submission_cap_notification_percentage' => 'int',
        'enable_collaborative_drafts' => 'bool',
        'enable_award_payment_visibility' => 'bool',
        'enable_edit_reviews' => 'bool',
        'enable_reimbursements' => 'bool',
        'gallery' => '\Submittable\Model\ProjectGalleryRequest',
        'request_form_criteria' => '\Submittable\Model\RequestFormCriteriaRequest[]',
        'allowed_funds' => 'string[]',
        'budget_categories' => 'string[]',
        'organization_search_agencies' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'guidelines_html' => null,
        'terms_of_use' => null,
        'eligibility_form_id' => 'uuid',
        'custom_ineligible_message' => null,
        'initial_form_id' => 'uuid',
        'internal_form_id' => 'uuid',
        'starts_at' => 'date-time',
        'ends_at' => 'date-time',
        'is_hidden' => null,
        'is_live' => null,
        'is_archived' => null,
        'should_hide_blind_fields' => null,
        'blind_level' => null,
        'require_public_org_id' => null,
        'conceal_public_org_info' => null,
        'require_validated_email' => null,
        'enable_us_bank_check_payment' => null,
        'enable_us_bank_ach_payment' => null,
        'enable_us_bank_prepaid_card_payment' => null,
        'us_bank_prepaid_card_disclosure_url' => 'uri',
        'us_bank_ach_account_is_individual' => null,
        'enable_organization_search' => null,
        'organization_search_by_ein' => null,
        'organization_search_by_uei' => null,
        'discover_tags' => null,
        'default_note_visibility' => null,
        'email_on_submission' => null,
        'auto_response_template_id' => null,
        'success_url' => null,
        'review_stages' => null,
        'enforce_submission_cap' => null,
        'limit_multiple_submissions' => null,
        'num_submissions_allowed' => 'int32',
        'submission_cap_display_submission_cap' => null,
        'send_submission_cap_notification' => null,
        'submission_cap_notification_percentage' => 'int32',
        'enable_collaborative_drafts' => null,
        'enable_award_payment_visibility' => null,
        'enable_edit_reviews' => null,
        'enable_reimbursements' => null,
        'gallery' => null,
        'request_form_criteria' => null,
        'allowed_funds' => 'uuid',
        'budget_categories' => null,
        'organization_search_agencies' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'guidelines_html' => true,
        'terms_of_use' => true,
        'eligibility_form_id' => true,
        'custom_ineligible_message' => true,
        'initial_form_id' => true,
        'internal_form_id' => true,
        'starts_at' => true,
        'ends_at' => true,
        'is_hidden' => false,
        'is_live' => false,
        'is_archived' => false,
        'should_hide_blind_fields' => false,
        'blind_level' => true,
        'require_public_org_id' => false,
        'conceal_public_org_info' => false,
        'require_validated_email' => false,
        'enable_us_bank_check_payment' => false,
        'enable_us_bank_ach_payment' => false,
        'enable_us_bank_prepaid_card_payment' => false,
        'us_bank_prepaid_card_disclosure_url' => true,
        'us_bank_ach_account_is_individual' => true,
        'enable_organization_search' => false,
        'organization_search_by_ein' => false,
        'organization_search_by_uei' => false,
        'discover_tags' => true,
        'default_note_visibility' => true,
        'email_on_submission' => false,
        'auto_response_template_id' => true,
        'success_url' => true,
        'review_stages' => true,
        'enforce_submission_cap' => false,
        'limit_multiple_submissions' => false,
        'num_submissions_allowed' => false,
        'submission_cap_display_submission_cap' => false,
        'send_submission_cap_notification' => false,
        'submission_cap_notification_percentage' => true,
        'enable_collaborative_drafts' => false,
        'enable_award_payment_visibility' => false,
        'enable_edit_reviews' => false,
        'enable_reimbursements' => false,
        'gallery' => false,
        'request_form_criteria' => true,
        'allowed_funds' => true,
        'budget_categories' => true,
        'organization_search_agencies' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'guidelines_html' => 'guidelinesHtml',
        'terms_of_use' => 'termsOfUse',
        'eligibility_form_id' => 'eligibilityFormId',
        'custom_ineligible_message' => 'customIneligibleMessage',
        'initial_form_id' => 'initialFormId',
        'internal_form_id' => 'internalFormId',
        'starts_at' => 'startsAt',
        'ends_at' => 'endsAt',
        'is_hidden' => 'isHidden',
        'is_live' => 'isLive',
        'is_archived' => 'isArchived',
        'should_hide_blind_fields' => 'shouldHideBlindFields',
        'blind_level' => 'blindLevel',
        'require_public_org_id' => 'requirePublicOrgId',
        'conceal_public_org_info' => 'concealPublicOrgInfo',
        'require_validated_email' => 'requireValidatedEmail',
        'enable_us_bank_check_payment' => 'enableUsBankCheckPayment',
        'enable_us_bank_ach_payment' => 'enableUsBankAchPayment',
        'enable_us_bank_prepaid_card_payment' => 'enableUsBankPrepaidCardPayment',
        'us_bank_prepaid_card_disclosure_url' => 'usBankPrepaidCardDisclosureUrl',
        'us_bank_ach_account_is_individual' => 'usBankAchAccountIsIndividual',
        'enable_organization_search' => 'enableOrganizationSearch',
        'organization_search_by_ein' => 'organizationSearchByEIN',
        'organization_search_by_uei' => 'organizationSearchByUEI',
        'discover_tags' => 'discoverTags',
        'default_note_visibility' => 'defaultNoteVisibility',
        'email_on_submission' => 'emailOnSubmission',
        'auto_response_template_id' => 'autoResponseTemplateId',
        'success_url' => 'successUrl',
        'review_stages' => 'reviewStages',
        'enforce_submission_cap' => 'enforceSubmissionCap',
        'limit_multiple_submissions' => 'limitMultipleSubmissions',
        'num_submissions_allowed' => 'numSubmissionsAllowed',
        'submission_cap_display_submission_cap' => 'submissionCapDisplaySubmissionCap',
        'send_submission_cap_notification' => 'sendSubmissionCapNotification',
        'submission_cap_notification_percentage' => 'submissionCapNotificationPercentage',
        'enable_collaborative_drafts' => 'enableCollaborativeDrafts',
        'enable_award_payment_visibility' => 'enableAwardPaymentVisibility',
        'enable_edit_reviews' => 'enableEditReviews',
        'enable_reimbursements' => 'enableReimbursements',
        'gallery' => 'gallery',
        'request_form_criteria' => 'requestFormCriteria',
        'allowed_funds' => 'allowedFunds',
        'budget_categories' => 'budgetCategories',
        'organization_search_agencies' => 'organizationSearchAgencies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'guidelines_html' => 'setGuidelinesHtml',
        'terms_of_use' => 'setTermsOfUse',
        'eligibility_form_id' => 'setEligibilityFormId',
        'custom_ineligible_message' => 'setCustomIneligibleMessage',
        'initial_form_id' => 'setInitialFormId',
        'internal_form_id' => 'setInternalFormId',
        'starts_at' => 'setStartsAt',
        'ends_at' => 'setEndsAt',
        'is_hidden' => 'setIsHidden',
        'is_live' => 'setIsLive',
        'is_archived' => 'setIsArchived',
        'should_hide_blind_fields' => 'setShouldHideBlindFields',
        'blind_level' => 'setBlindLevel',
        'require_public_org_id' => 'setRequirePublicOrgId',
        'conceal_public_org_info' => 'setConcealPublicOrgInfo',
        'require_validated_email' => 'setRequireValidatedEmail',
        'enable_us_bank_check_payment' => 'setEnableUsBankCheckPayment',
        'enable_us_bank_ach_payment' => 'setEnableUsBankAchPayment',
        'enable_us_bank_prepaid_card_payment' => 'setEnableUsBankPrepaidCardPayment',
        'us_bank_prepaid_card_disclosure_url' => 'setUsBankPrepaidCardDisclosureUrl',
        'us_bank_ach_account_is_individual' => 'setUsBankAchAccountIsIndividual',
        'enable_organization_search' => 'setEnableOrganizationSearch',
        'organization_search_by_ein' => 'setOrganizationSearchByEin',
        'organization_search_by_uei' => 'setOrganizationSearchByUei',
        'discover_tags' => 'setDiscoverTags',
        'default_note_visibility' => 'setDefaultNoteVisibility',
        'email_on_submission' => 'setEmailOnSubmission',
        'auto_response_template_id' => 'setAutoResponseTemplateId',
        'success_url' => 'setSuccessUrl',
        'review_stages' => 'setReviewStages',
        'enforce_submission_cap' => 'setEnforceSubmissionCap',
        'limit_multiple_submissions' => 'setLimitMultipleSubmissions',
        'num_submissions_allowed' => 'setNumSubmissionsAllowed',
        'submission_cap_display_submission_cap' => 'setSubmissionCapDisplaySubmissionCap',
        'send_submission_cap_notification' => 'setSendSubmissionCapNotification',
        'submission_cap_notification_percentage' => 'setSubmissionCapNotificationPercentage',
        'enable_collaborative_drafts' => 'setEnableCollaborativeDrafts',
        'enable_award_payment_visibility' => 'setEnableAwardPaymentVisibility',
        'enable_edit_reviews' => 'setEnableEditReviews',
        'enable_reimbursements' => 'setEnableReimbursements',
        'gallery' => 'setGallery',
        'request_form_criteria' => 'setRequestFormCriteria',
        'allowed_funds' => 'setAllowedFunds',
        'budget_categories' => 'setBudgetCategories',
        'organization_search_agencies' => 'setOrganizationSearchAgencies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'guidelines_html' => 'getGuidelinesHtml',
        'terms_of_use' => 'getTermsOfUse',
        'eligibility_form_id' => 'getEligibilityFormId',
        'custom_ineligible_message' => 'getCustomIneligibleMessage',
        'initial_form_id' => 'getInitialFormId',
        'internal_form_id' => 'getInternalFormId',
        'starts_at' => 'getStartsAt',
        'ends_at' => 'getEndsAt',
        'is_hidden' => 'getIsHidden',
        'is_live' => 'getIsLive',
        'is_archived' => 'getIsArchived',
        'should_hide_blind_fields' => 'getShouldHideBlindFields',
        'blind_level' => 'getBlindLevel',
        'require_public_org_id' => 'getRequirePublicOrgId',
        'conceal_public_org_info' => 'getConcealPublicOrgInfo',
        'require_validated_email' => 'getRequireValidatedEmail',
        'enable_us_bank_check_payment' => 'getEnableUsBankCheckPayment',
        'enable_us_bank_ach_payment' => 'getEnableUsBankAchPayment',
        'enable_us_bank_prepaid_card_payment' => 'getEnableUsBankPrepaidCardPayment',
        'us_bank_prepaid_card_disclosure_url' => 'getUsBankPrepaidCardDisclosureUrl',
        'us_bank_ach_account_is_individual' => 'getUsBankAchAccountIsIndividual',
        'enable_organization_search' => 'getEnableOrganizationSearch',
        'organization_search_by_ein' => 'getOrganizationSearchByEin',
        'organization_search_by_uei' => 'getOrganizationSearchByUei',
        'discover_tags' => 'getDiscoverTags',
        'default_note_visibility' => 'getDefaultNoteVisibility',
        'email_on_submission' => 'getEmailOnSubmission',
        'auto_response_template_id' => 'getAutoResponseTemplateId',
        'success_url' => 'getSuccessUrl',
        'review_stages' => 'getReviewStages',
        'enforce_submission_cap' => 'getEnforceSubmissionCap',
        'limit_multiple_submissions' => 'getLimitMultipleSubmissions',
        'num_submissions_allowed' => 'getNumSubmissionsAllowed',
        'submission_cap_display_submission_cap' => 'getSubmissionCapDisplaySubmissionCap',
        'send_submission_cap_notification' => 'getSendSubmissionCapNotification',
        'submission_cap_notification_percentage' => 'getSubmissionCapNotificationPercentage',
        'enable_collaborative_drafts' => 'getEnableCollaborativeDrafts',
        'enable_award_payment_visibility' => 'getEnableAwardPaymentVisibility',
        'enable_edit_reviews' => 'getEnableEditReviews',
        'enable_reimbursements' => 'getEnableReimbursements',
        'gallery' => 'getGallery',
        'request_form_criteria' => 'getRequestFormCriteria',
        'allowed_funds' => 'getAllowedFunds',
        'budget_categories' => 'getBudgetCategories',
        'organization_search_agencies' => 'getOrganizationSearchAgencies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BLIND_LEVEL_NONE = 'None';
    public const BLIND_LEVEL_LEVEL1 = 'Level1';
    public const BLIND_LEVEL_LEVEL2 = 'Level2';
    public const BLIND_LEVEL_LEVEL3 = 'Level3';
    public const BLIND_LEVEL_LEVEL4 = 'Level4';
    public const BLIND_LEVEL_LEVEL5 = 'Level5';
    public const DEFAULT_NOTE_VISIBILITY_STAFF = 'staff';
    public const DEFAULT_NOTE_VISIBILITY__PRIVATE = 'private';
    public const DEFAULT_NOTE_VISIBILITY_ALL_STAFF = 'All Staff';
    public const DEFAULT_NOTE_VISIBILITY_ENTIRE_TEAM = 'Entire Team';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlindLevelAllowableValues()
    {
        return [
            self::BLIND_LEVEL_NONE,
            self::BLIND_LEVEL_LEVEL1,
            self::BLIND_LEVEL_LEVEL2,
            self::BLIND_LEVEL_LEVEL3,
            self::BLIND_LEVEL_LEVEL4,
            self::BLIND_LEVEL_LEVEL5,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultNoteVisibilityAllowableValues()
    {
        return [
            self::DEFAULT_NOTE_VISIBILITY_STAFF,
            self::DEFAULT_NOTE_VISIBILITY__PRIVATE,
            self::DEFAULT_NOTE_VISIBILITY_ALL_STAFF,
            self::DEFAULT_NOTE_VISIBILITY_ENTIRE_TEAM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('guidelines_html', $data ?? [], null);
        $this->setIfExists('terms_of_use', $data ?? [], null);
        $this->setIfExists('eligibility_form_id', $data ?? [], null);
        $this->setIfExists('custom_ineligible_message', $data ?? [], null);
        $this->setIfExists('initial_form_id', $data ?? [], null);
        $this->setIfExists('internal_form_id', $data ?? [], null);
        $this->setIfExists('starts_at', $data ?? [], null);
        $this->setIfExists('ends_at', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_live', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('should_hide_blind_fields', $data ?? [], null);
        $this->setIfExists('blind_level', $data ?? [], null);
        $this->setIfExists('require_public_org_id', $data ?? [], null);
        $this->setIfExists('conceal_public_org_info', $data ?? [], null);
        $this->setIfExists('require_validated_email', $data ?? [], null);
        $this->setIfExists('enable_us_bank_check_payment', $data ?? [], null);
        $this->setIfExists('enable_us_bank_ach_payment', $data ?? [], null);
        $this->setIfExists('enable_us_bank_prepaid_card_payment', $data ?? [], null);
        $this->setIfExists('us_bank_prepaid_card_disclosure_url', $data ?? [], null);
        $this->setIfExists('us_bank_ach_account_is_individual', $data ?? [], null);
        $this->setIfExists('enable_organization_search', $data ?? [], null);
        $this->setIfExists('organization_search_by_ein', $data ?? [], null);
        $this->setIfExists('organization_search_by_uei', $data ?? [], null);
        $this->setIfExists('discover_tags', $data ?? [], null);
        $this->setIfExists('default_note_visibility', $data ?? [], null);
        $this->setIfExists('email_on_submission', $data ?? [], null);
        $this->setIfExists('auto_response_template_id', $data ?? [], null);
        $this->setIfExists('success_url', $data ?? [], null);
        $this->setIfExists('review_stages', $data ?? [], null);
        $this->setIfExists('enforce_submission_cap', $data ?? [], null);
        $this->setIfExists('limit_multiple_submissions', $data ?? [], null);
        $this->setIfExists('num_submissions_allowed', $data ?? [], 1);
        $this->setIfExists('submission_cap_display_submission_cap', $data ?? [], null);
        $this->setIfExists('send_submission_cap_notification', $data ?? [], null);
        $this->setIfExists('submission_cap_notification_percentage', $data ?? [], null);
        $this->setIfExists('enable_collaborative_drafts', $data ?? [], null);
        $this->setIfExists('enable_award_payment_visibility', $data ?? [], null);
        $this->setIfExists('enable_edit_reviews', $data ?? [], null);
        $this->setIfExists('enable_reimbursements', $data ?? [], null);
        $this->setIfExists('gallery', $data ?? [], null);
        $this->setIfExists('request_form_criteria', $data ?? [], null);
        $this->setIfExists('allowed_funds', $data ?? [], null);
        $this->setIfExists('budget_categories', $data ?? [], null);
        $this->setIfExists('organization_search_agencies', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 200)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getBlindLevelAllowableValues();
        if (!is_null($this->container['blind_level']) && !in_array($this->container['blind_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blind_level', must be one of '%s'",
                $this->container['blind_level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultNoteVisibilityAllowableValues();
        if (!is_null($this->container['default_note_visibility']) && !in_array($this->container['default_note_visibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_note_visibility', must be one of '%s'",
                $this->container['default_note_visibility'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateProjectRequest., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateProjectRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets guidelines_html
     *
     * @return string|null
     */
    public function getGuidelinesHtml()
    {
        return $this->container['guidelines_html'];
    }

    /**
     * Sets guidelines_html
     *
     * @param string|null $guidelines_html guidelines_html
     *
     * @return self
     */
    public function setGuidelinesHtml($guidelines_html)
    {
        if (is_null($guidelines_html)) {
            array_push($this->openAPINullablesSetToNull, 'guidelines_html');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guidelines_html', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['guidelines_html'] = $guidelines_html;

        return $this;
    }

    /**
     * Gets terms_of_use
     *
     * @return string|null
     */
    public function getTermsOfUse()
    {
        return $this->container['terms_of_use'];
    }

    /**
     * Sets terms_of_use
     *
     * @param string|null $terms_of_use terms_of_use
     *
     * @return self
     */
    public function setTermsOfUse($terms_of_use)
    {
        if (is_null($terms_of_use)) {
            array_push($this->openAPINullablesSetToNull, 'terms_of_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terms_of_use', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['terms_of_use'] = $terms_of_use;

        return $this;
    }

    /**
     * Gets eligibility_form_id
     *
     * @return string|null
     */
    public function getEligibilityFormId()
    {
        return $this->container['eligibility_form_id'];
    }

    /**
     * Sets eligibility_form_id
     *
     * @param string|null $eligibility_form_id eligibility_form_id
     *
     * @return self
     */
    public function setEligibilityFormId($eligibility_form_id)
    {
        if (is_null($eligibility_form_id)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_form_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_form_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligibility_form_id'] = $eligibility_form_id;

        return $this;
    }

    /**
     * Gets custom_ineligible_message
     *
     * @return string|null
     */
    public function getCustomIneligibleMessage()
    {
        return $this->container['custom_ineligible_message'];
    }

    /**
     * Sets custom_ineligible_message
     *
     * @param string|null $custom_ineligible_message custom_ineligible_message
     *
     * @return self
     */
    public function setCustomIneligibleMessage($custom_ineligible_message)
    {
        if (is_null($custom_ineligible_message)) {
            array_push($this->openAPINullablesSetToNull, 'custom_ineligible_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_ineligible_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_ineligible_message'] = $custom_ineligible_message;

        return $this;
    }

    /**
     * Gets initial_form_id
     *
     * @return string|null
     */
    public function getInitialFormId()
    {
        return $this->container['initial_form_id'];
    }

    /**
     * Sets initial_form_id
     *
     * @param string|null $initial_form_id initial_form_id
     *
     * @return self
     */
    public function setInitialFormId($initial_form_id)
    {
        if (is_null($initial_form_id)) {
            array_push($this->openAPINullablesSetToNull, 'initial_form_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('initial_form_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['initial_form_id'] = $initial_form_id;

        return $this;
    }

    /**
     * Gets internal_form_id
     *
     * @return string|null
     */
    public function getInternalFormId()
    {
        return $this->container['internal_form_id'];
    }

    /**
     * Sets internal_form_id
     *
     * @param string|null $internal_form_id internal_form_id
     *
     * @return self
     */
    public function setInternalFormId($internal_form_id)
    {
        if (is_null($internal_form_id)) {
            array_push($this->openAPINullablesSetToNull, 'internal_form_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_form_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_form_id'] = $internal_form_id;

        return $this;
    }

    /**
     * Gets starts_at
     *
     * @return \DateTime|null
     */
    public function getStartsAt()
    {
        return $this->container['starts_at'];
    }

    /**
     * Sets starts_at
     *
     * @param \DateTime|null $starts_at starts_at
     *
     * @return self
     */
    public function setStartsAt($starts_at)
    {
        if (is_null($starts_at)) {
            array_push($this->openAPINullablesSetToNull, 'starts_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('starts_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['starts_at'] = $starts_at;

        return $this;
    }

    /**
     * Gets ends_at
     *
     * @return \DateTime|null
     */
    public function getEndsAt()
    {
        return $this->container['ends_at'];
    }

    /**
     * Sets ends_at
     *
     * @param \DateTime|null $ends_at ends_at
     *
     * @return self
     */
    public function setEndsAt($ends_at)
    {
        if (is_null($ends_at)) {
            array_push($this->openAPINullablesSetToNull, 'ends_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ends_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ends_at'] = $ends_at;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_live
     *
     * @return bool|null
     */
    public function getIsLive()
    {
        return $this->container['is_live'];
    }

    /**
     * Sets is_live
     *
     * @param bool|null $is_live is_live
     *
     * @return self
     */
    public function setIsLive($is_live)
    {
        if (is_null($is_live)) {
            throw new \InvalidArgumentException('non-nullable is_live cannot be null');
        }
        $this->container['is_live'] = $is_live;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets should_hide_blind_fields
     *
     * @return bool|null
     */
    public function getShouldHideBlindFields()
    {
        return $this->container['should_hide_blind_fields'];
    }

    /**
     * Sets should_hide_blind_fields
     *
     * @param bool|null $should_hide_blind_fields should_hide_blind_fields
     *
     * @return self
     */
    public function setShouldHideBlindFields($should_hide_blind_fields)
    {
        if (is_null($should_hide_blind_fields)) {
            throw new \InvalidArgumentException('non-nullable should_hide_blind_fields cannot be null');
        }
        $this->container['should_hide_blind_fields'] = $should_hide_blind_fields;

        return $this;
    }

    /**
     * Gets blind_level
     *
     * @return string|null
     */
    public function getBlindLevel()
    {
        return $this->container['blind_level'];
    }

    /**
     * Sets blind_level
     *
     * @param string|null $blind_level blind_level
     *
     * @return self
     */
    public function setBlindLevel($blind_level)
    {
        if (is_null($blind_level)) {
            array_push($this->openAPINullablesSetToNull, 'blind_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blind_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBlindLevelAllowableValues();
        if (!is_null($blind_level) && !in_array($blind_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blind_level', must be one of '%s'",
                    $blind_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blind_level'] = $blind_level;

        return $this;
    }

    /**
     * Gets require_public_org_id
     *
     * @return bool|null
     */
    public function getRequirePublicOrgId()
    {
        return $this->container['require_public_org_id'];
    }

    /**
     * Sets require_public_org_id
     *
     * @param bool|null $require_public_org_id require_public_org_id
     *
     * @return self
     */
    public function setRequirePublicOrgId($require_public_org_id)
    {
        if (is_null($require_public_org_id)) {
            throw new \InvalidArgumentException('non-nullable require_public_org_id cannot be null');
        }
        $this->container['require_public_org_id'] = $require_public_org_id;

        return $this;
    }

    /**
     * Gets conceal_public_org_info
     *
     * @return bool|null
     */
    public function getConcealPublicOrgInfo()
    {
        return $this->container['conceal_public_org_info'];
    }

    /**
     * Sets conceal_public_org_info
     *
     * @param bool|null $conceal_public_org_info conceal_public_org_info
     *
     * @return self
     */
    public function setConcealPublicOrgInfo($conceal_public_org_info)
    {
        if (is_null($conceal_public_org_info)) {
            throw new \InvalidArgumentException('non-nullable conceal_public_org_info cannot be null');
        }
        $this->container['conceal_public_org_info'] = $conceal_public_org_info;

        return $this;
    }

    /**
     * Gets require_validated_email
     *
     * @return bool|null
     */
    public function getRequireValidatedEmail()
    {
        return $this->container['require_validated_email'];
    }

    /**
     * Sets require_validated_email
     *
     * @param bool|null $require_validated_email require_validated_email
     *
     * @return self
     */
    public function setRequireValidatedEmail($require_validated_email)
    {
        if (is_null($require_validated_email)) {
            throw new \InvalidArgumentException('non-nullable require_validated_email cannot be null');
        }
        $this->container['require_validated_email'] = $require_validated_email;

        return $this;
    }

    /**
     * Gets enable_us_bank_check_payment
     *
     * @return bool|null
     */
    public function getEnableUsBankCheckPayment()
    {
        return $this->container['enable_us_bank_check_payment'];
    }

    /**
     * Sets enable_us_bank_check_payment
     *
     * @param bool|null $enable_us_bank_check_payment enable_us_bank_check_payment
     *
     * @return self
     */
    public function setEnableUsBankCheckPayment($enable_us_bank_check_payment)
    {
        if (is_null($enable_us_bank_check_payment)) {
            throw new \InvalidArgumentException('non-nullable enable_us_bank_check_payment cannot be null');
        }
        $this->container['enable_us_bank_check_payment'] = $enable_us_bank_check_payment;

        return $this;
    }

    /**
     * Gets enable_us_bank_ach_payment
     *
     * @return bool|null
     */
    public function getEnableUsBankAchPayment()
    {
        return $this->container['enable_us_bank_ach_payment'];
    }

    /**
     * Sets enable_us_bank_ach_payment
     *
     * @param bool|null $enable_us_bank_ach_payment enable_us_bank_ach_payment
     *
     * @return self
     */
    public function setEnableUsBankAchPayment($enable_us_bank_ach_payment)
    {
        if (is_null($enable_us_bank_ach_payment)) {
            throw new \InvalidArgumentException('non-nullable enable_us_bank_ach_payment cannot be null');
        }
        $this->container['enable_us_bank_ach_payment'] = $enable_us_bank_ach_payment;

        return $this;
    }

    /**
     * Gets enable_us_bank_prepaid_card_payment
     *
     * @return bool|null
     */
    public function getEnableUsBankPrepaidCardPayment()
    {
        return $this->container['enable_us_bank_prepaid_card_payment'];
    }

    /**
     * Sets enable_us_bank_prepaid_card_payment
     *
     * @param bool|null $enable_us_bank_prepaid_card_payment enable_us_bank_prepaid_card_payment
     *
     * @return self
     */
    public function setEnableUsBankPrepaidCardPayment($enable_us_bank_prepaid_card_payment)
    {
        if (is_null($enable_us_bank_prepaid_card_payment)) {
            throw new \InvalidArgumentException('non-nullable enable_us_bank_prepaid_card_payment cannot be null');
        }
        $this->container['enable_us_bank_prepaid_card_payment'] = $enable_us_bank_prepaid_card_payment;

        return $this;
    }

    /**
     * Gets us_bank_prepaid_card_disclosure_url
     *
     * @return string|null
     */
    public function getUsBankPrepaidCardDisclosureUrl()
    {
        return $this->container['us_bank_prepaid_card_disclosure_url'];
    }

    /**
     * Sets us_bank_prepaid_card_disclosure_url
     *
     * @param string|null $us_bank_prepaid_card_disclosure_url us_bank_prepaid_card_disclosure_url
     *
     * @return self
     */
    public function setUsBankPrepaidCardDisclosureUrl($us_bank_prepaid_card_disclosure_url)
    {
        if (is_null($us_bank_prepaid_card_disclosure_url)) {
            array_push($this->openAPINullablesSetToNull, 'us_bank_prepaid_card_disclosure_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('us_bank_prepaid_card_disclosure_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['us_bank_prepaid_card_disclosure_url'] = $us_bank_prepaid_card_disclosure_url;

        return $this;
    }

    /**
     * Gets us_bank_ach_account_is_individual
     *
     * @return bool|null
     */
    public function getUsBankAchAccountIsIndividual()
    {
        return $this->container['us_bank_ach_account_is_individual'];
    }

    /**
     * Sets us_bank_ach_account_is_individual
     *
     * @param bool|null $us_bank_ach_account_is_individual us_bank_ach_account_is_individual
     *
     * @return self
     */
    public function setUsBankAchAccountIsIndividual($us_bank_ach_account_is_individual)
    {
        if (is_null($us_bank_ach_account_is_individual)) {
            array_push($this->openAPINullablesSetToNull, 'us_bank_ach_account_is_individual');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('us_bank_ach_account_is_individual', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['us_bank_ach_account_is_individual'] = $us_bank_ach_account_is_individual;

        return $this;
    }

    /**
     * Gets enable_organization_search
     *
     * @return bool|null
     */
    public function getEnableOrganizationSearch()
    {
        return $this->container['enable_organization_search'];
    }

    /**
     * Sets enable_organization_search
     *
     * @param bool|null $enable_organization_search enable_organization_search
     *
     * @return self
     */
    public function setEnableOrganizationSearch($enable_organization_search)
    {
        if (is_null($enable_organization_search)) {
            throw new \InvalidArgumentException('non-nullable enable_organization_search cannot be null');
        }
        $this->container['enable_organization_search'] = $enable_organization_search;

        return $this;
    }

    /**
     * Gets organization_search_by_ein
     *
     * @return bool|null
     */
    public function getOrganizationSearchByEin()
    {
        return $this->container['organization_search_by_ein'];
    }

    /**
     * Sets organization_search_by_ein
     *
     * @param bool|null $organization_search_by_ein organization_search_by_ein
     *
     * @return self
     */
    public function setOrganizationSearchByEin($organization_search_by_ein)
    {
        if (is_null($organization_search_by_ein)) {
            throw new \InvalidArgumentException('non-nullable organization_search_by_ein cannot be null');
        }
        $this->container['organization_search_by_ein'] = $organization_search_by_ein;

        return $this;
    }

    /**
     * Gets organization_search_by_uei
     *
     * @return bool|null
     */
    public function getOrganizationSearchByUei()
    {
        return $this->container['organization_search_by_uei'];
    }

    /**
     * Sets organization_search_by_uei
     *
     * @param bool|null $organization_search_by_uei organization_search_by_uei
     *
     * @return self
     */
    public function setOrganizationSearchByUei($organization_search_by_uei)
    {
        if (is_null($organization_search_by_uei)) {
            throw new \InvalidArgumentException('non-nullable organization_search_by_uei cannot be null');
        }
        $this->container['organization_search_by_uei'] = $organization_search_by_uei;

        return $this;
    }

    /**
     * Gets discover_tags
     *
     * @return string[]|null
     */
    public function getDiscoverTags()
    {
        return $this->container['discover_tags'];
    }

    /**
     * Sets discover_tags
     *
     * @param string[]|null $discover_tags discover_tags
     *
     * @return self
     */
    public function setDiscoverTags($discover_tags)
    {
        if (is_null($discover_tags)) {
            array_push($this->openAPINullablesSetToNull, 'discover_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discover_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discover_tags'] = $discover_tags;

        return $this;
    }

    /**
     * Gets default_note_visibility
     *
     * @return string|null
     */
    public function getDefaultNoteVisibility()
    {
        return $this->container['default_note_visibility'];
    }

    /**
     * Sets default_note_visibility
     *
     * @param string|null $default_note_visibility default_note_visibility
     *
     * @return self
     */
    public function setDefaultNoteVisibility($default_note_visibility)
    {
        if (is_null($default_note_visibility)) {
            array_push($this->openAPINullablesSetToNull, 'default_note_visibility');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_note_visibility', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDefaultNoteVisibilityAllowableValues();
        if (!is_null($default_note_visibility) && !in_array($default_note_visibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_note_visibility', must be one of '%s'",
                    $default_note_visibility,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_note_visibility'] = $default_note_visibility;

        return $this;
    }

    /**
     * Gets email_on_submission
     *
     * @return bool|null
     */
    public function getEmailOnSubmission()
    {
        return $this->container['email_on_submission'];
    }

    /**
     * Sets email_on_submission
     *
     * @param bool|null $email_on_submission email_on_submission
     *
     * @return self
     */
    public function setEmailOnSubmission($email_on_submission)
    {
        if (is_null($email_on_submission)) {
            throw new \InvalidArgumentException('non-nullable email_on_submission cannot be null');
        }
        $this->container['email_on_submission'] = $email_on_submission;

        return $this;
    }

    /**
     * Gets auto_response_template_id
     *
     * @return string|null
     */
    public function getAutoResponseTemplateId()
    {
        return $this->container['auto_response_template_id'];
    }

    /**
     * Sets auto_response_template_id
     *
     * @param string|null $auto_response_template_id auto_response_template_id
     *
     * @return self
     */
    public function setAutoResponseTemplateId($auto_response_template_id)
    {
        if (is_null($auto_response_template_id)) {
            array_push($this->openAPINullablesSetToNull, 'auto_response_template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_response_template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_response_template_id'] = $auto_response_template_id;

        return $this;
    }

    /**
     * Gets success_url
     *
     * @return string|null
     */
    public function getSuccessUrl()
    {
        return $this->container['success_url'];
    }

    /**
     * Sets success_url
     *
     * @param string|null $success_url success_url
     *
     * @return self
     */
    public function setSuccessUrl($success_url)
    {
        if (is_null($success_url)) {
            array_push($this->openAPINullablesSetToNull, 'success_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('success_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['success_url'] = $success_url;

        return $this;
    }

    /**
     * Gets review_stages
     *
     * @return \Submittable\Model\ReviewStageRequest[]|null
     */
    public function getReviewStages()
    {
        return $this->container['review_stages'];
    }

    /**
     * Sets review_stages
     *
     * @param \Submittable\Model\ReviewStageRequest[]|null $review_stages review_stages
     *
     * @return self
     */
    public function setReviewStages($review_stages)
    {
        if (is_null($review_stages)) {
            array_push($this->openAPINullablesSetToNull, 'review_stages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_stages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['review_stages'] = $review_stages;

        return $this;
    }

    /**
     * Gets enforce_submission_cap
     *
     * @return bool|null
     */
    public function getEnforceSubmissionCap()
    {
        return $this->container['enforce_submission_cap'];
    }

    /**
     * Sets enforce_submission_cap
     *
     * @param bool|null $enforce_submission_cap enforce_submission_cap
     *
     * @return self
     */
    public function setEnforceSubmissionCap($enforce_submission_cap)
    {
        if (is_null($enforce_submission_cap)) {
            throw new \InvalidArgumentException('non-nullable enforce_submission_cap cannot be null');
        }
        $this->container['enforce_submission_cap'] = $enforce_submission_cap;

        return $this;
    }

    /**
     * Gets limit_multiple_submissions
     *
     * @return bool|null
     */
    public function getLimitMultipleSubmissions()
    {
        return $this->container['limit_multiple_submissions'];
    }

    /**
     * Sets limit_multiple_submissions
     *
     * @param bool|null $limit_multiple_submissions limit_multiple_submissions
     *
     * @return self
     */
    public function setLimitMultipleSubmissions($limit_multiple_submissions)
    {
        if (is_null($limit_multiple_submissions)) {
            throw new \InvalidArgumentException('non-nullable limit_multiple_submissions cannot be null');
        }
        $this->container['limit_multiple_submissions'] = $limit_multiple_submissions;

        return $this;
    }

    /**
     * Gets num_submissions_allowed
     *
     * @return int|null
     */
    public function getNumSubmissionsAllowed()
    {
        return $this->container['num_submissions_allowed'];
    }

    /**
     * Sets num_submissions_allowed
     *
     * @param int|null $num_submissions_allowed num_submissions_allowed
     *
     * @return self
     */
    public function setNumSubmissionsAllowed($num_submissions_allowed)
    {
        if (is_null($num_submissions_allowed)) {
            throw new \InvalidArgumentException('non-nullable num_submissions_allowed cannot be null');
        }
        $this->container['num_submissions_allowed'] = $num_submissions_allowed;

        return $this;
    }

    /**
     * Gets submission_cap_display_submission_cap
     *
     * @return bool|null
     */
    public function getSubmissionCapDisplaySubmissionCap()
    {
        return $this->container['submission_cap_display_submission_cap'];
    }

    /**
     * Sets submission_cap_display_submission_cap
     *
     * @param bool|null $submission_cap_display_submission_cap submission_cap_display_submission_cap
     *
     * @return self
     */
    public function setSubmissionCapDisplaySubmissionCap($submission_cap_display_submission_cap)
    {
        if (is_null($submission_cap_display_submission_cap)) {
            throw new \InvalidArgumentException('non-nullable submission_cap_display_submission_cap cannot be null');
        }
        $this->container['submission_cap_display_submission_cap'] = $submission_cap_display_submission_cap;

        return $this;
    }

    /**
     * Gets send_submission_cap_notification
     *
     * @return bool|null
     */
    public function getSendSubmissionCapNotification()
    {
        return $this->container['send_submission_cap_notification'];
    }

    /**
     * Sets send_submission_cap_notification
     *
     * @param bool|null $send_submission_cap_notification send_submission_cap_notification
     *
     * @return self
     */
    public function setSendSubmissionCapNotification($send_submission_cap_notification)
    {
        if (is_null($send_submission_cap_notification)) {
            throw new \InvalidArgumentException('non-nullable send_submission_cap_notification cannot be null');
        }
        $this->container['send_submission_cap_notification'] = $send_submission_cap_notification;

        return $this;
    }

    /**
     * Gets submission_cap_notification_percentage
     *
     * @return int|null
     */
    public function getSubmissionCapNotificationPercentage()
    {
        return $this->container['submission_cap_notification_percentage'];
    }

    /**
     * Sets submission_cap_notification_percentage
     *
     * @param int|null $submission_cap_notification_percentage submission_cap_notification_percentage
     *
     * @return self
     */
    public function setSubmissionCapNotificationPercentage($submission_cap_notification_percentage)
    {
        if (is_null($submission_cap_notification_percentage)) {
            array_push($this->openAPINullablesSetToNull, 'submission_cap_notification_percentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submission_cap_notification_percentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submission_cap_notification_percentage'] = $submission_cap_notification_percentage;

        return $this;
    }

    /**
     * Gets enable_collaborative_drafts
     *
     * @return bool|null
     */
    public function getEnableCollaborativeDrafts()
    {
        return $this->container['enable_collaborative_drafts'];
    }

    /**
     * Sets enable_collaborative_drafts
     *
     * @param bool|null $enable_collaborative_drafts enable_collaborative_drafts
     *
     * @return self
     */
    public function setEnableCollaborativeDrafts($enable_collaborative_drafts)
    {
        if (is_null($enable_collaborative_drafts)) {
            throw new \InvalidArgumentException('non-nullable enable_collaborative_drafts cannot be null');
        }
        $this->container['enable_collaborative_drafts'] = $enable_collaborative_drafts;

        return $this;
    }

    /**
     * Gets enable_award_payment_visibility
     *
     * @return bool|null
     */
    public function getEnableAwardPaymentVisibility()
    {
        return $this->container['enable_award_payment_visibility'];
    }

    /**
     * Sets enable_award_payment_visibility
     *
     * @param bool|null $enable_award_payment_visibility enable_award_payment_visibility
     *
     * @return self
     */
    public function setEnableAwardPaymentVisibility($enable_award_payment_visibility)
    {
        if (is_null($enable_award_payment_visibility)) {
            throw new \InvalidArgumentException('non-nullable enable_award_payment_visibility cannot be null');
        }
        $this->container['enable_award_payment_visibility'] = $enable_award_payment_visibility;

        return $this;
    }

    /**
     * Gets enable_edit_reviews
     *
     * @return bool|null
     */
    public function getEnableEditReviews()
    {
        return $this->container['enable_edit_reviews'];
    }

    /**
     * Sets enable_edit_reviews
     *
     * @param bool|null $enable_edit_reviews enable_edit_reviews
     *
     * @return self
     */
    public function setEnableEditReviews($enable_edit_reviews)
    {
        if (is_null($enable_edit_reviews)) {
            throw new \InvalidArgumentException('non-nullable enable_edit_reviews cannot be null');
        }
        $this->container['enable_edit_reviews'] = $enable_edit_reviews;

        return $this;
    }

    /**
     * Gets enable_reimbursements
     *
     * @return bool|null
     */
    public function getEnableReimbursements()
    {
        return $this->container['enable_reimbursements'];
    }

    /**
     * Sets enable_reimbursements
     *
     * @param bool|null $enable_reimbursements enable_reimbursements
     *
     * @return self
     */
    public function setEnableReimbursements($enable_reimbursements)
    {
        if (is_null($enable_reimbursements)) {
            throw new \InvalidArgumentException('non-nullable enable_reimbursements cannot be null');
        }
        $this->container['enable_reimbursements'] = $enable_reimbursements;

        return $this;
    }

    /**
     * Gets gallery
     *
     * @return \Submittable\Model\ProjectGalleryRequest|null
     */
    public function getGallery()
    {
        return $this->container['gallery'];
    }

    /**
     * Sets gallery
     *
     * @param \Submittable\Model\ProjectGalleryRequest|null $gallery gallery
     *
     * @return self
     */
    public function setGallery($gallery)
    {
        if (is_null($gallery)) {
            throw new \InvalidArgumentException('non-nullable gallery cannot be null');
        }
        $this->container['gallery'] = $gallery;

        return $this;
    }

    /**
     * Gets request_form_criteria
     *
     * @return \Submittable\Model\RequestFormCriteriaRequest[]|null
     */
    public function getRequestFormCriteria()
    {
        return $this->container['request_form_criteria'];
    }

    /**
     * Sets request_form_criteria
     *
     * @param \Submittable\Model\RequestFormCriteriaRequest[]|null $request_form_criteria request_form_criteria
     *
     * @return self
     */
    public function setRequestFormCriteria($request_form_criteria)
    {
        if (is_null($request_form_criteria)) {
            array_push($this->openAPINullablesSetToNull, 'request_form_criteria');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_form_criteria', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['request_form_criteria'] = $request_form_criteria;

        return $this;
    }

    /**
     * Gets allowed_funds
     *
     * @return string[]|null
     */
    public function getAllowedFunds()
    {
        return $this->container['allowed_funds'];
    }

    /**
     * Sets allowed_funds
     *
     * @param string[]|null $allowed_funds allowed_funds
     *
     * @return self
     */
    public function setAllowedFunds($allowed_funds)
    {
        if (is_null($allowed_funds)) {
            array_push($this->openAPINullablesSetToNull, 'allowed_funds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allowed_funds', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allowed_funds'] = $allowed_funds;

        return $this;
    }

    /**
     * Gets budget_categories
     *
     * @return string[]|null
     */
    public function getBudgetCategories()
    {
        return $this->container['budget_categories'];
    }

    /**
     * Sets budget_categories
     *
     * @param string[]|null $budget_categories budget_categories
     *
     * @return self
     */
    public function setBudgetCategories($budget_categories)
    {
        if (is_null($budget_categories)) {
            array_push($this->openAPINullablesSetToNull, 'budget_categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('budget_categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['budget_categories'] = $budget_categories;

        return $this;
    }

    /**
     * Gets organization_search_agencies
     *
     * @return string[]|null
     */
    public function getOrganizationSearchAgencies()
    {
        return $this->container['organization_search_agencies'];
    }

    /**
     * Sets organization_search_agencies
     *
     * @param string[]|null $organization_search_agencies organization_search_agencies
     *
     * @return self
     */
    public function setOrganizationSearchAgencies($organization_search_agencies)
    {
        if (is_null($organization_search_agencies)) {
            array_push($this->openAPINullablesSetToNull, 'organization_search_agencies');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_search_agencies', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_search_agencies'] = $organization_search_agencies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


