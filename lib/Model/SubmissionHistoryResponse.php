<?php
/**
 * SubmissionHistoryResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Submittable\Model;

use \ArrayAccess;
use \Submittable\ObjectSerializer;

/**
 * SubmissionHistoryResponse Class Doc Comment
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubmissionHistoryResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubmissionHistoryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'history_type_id' => 'int',
        'submission_id' => 'string',
        'replace_data' => 'string',
        'submission_name' => 'string',
        'email_recipients' => 'string',
        'activity_user_id' => 'string',
        'activity_date_utc' => '\DateTime',
        'created_on_utc' => '\DateTime',
        'bulk_action_task_id' => 'string',
        'activity_user_first_name' => 'string',
        'activity_user_last_name' => 'string',
        'submitter_name' => 'string',
        'note' => 'string',
        'change_reason' => 'string',
        'change_description' => 'string',
        'entry_version_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'history_type_id' => 'int32',
        'submission_id' => 'uuid',
        'replace_data' => null,
        'submission_name' => null,
        'email_recipients' => null,
        'activity_user_id' => 'uuid',
        'activity_date_utc' => 'date-time',
        'created_on_utc' => 'date-time',
        'bulk_action_task_id' => 'uuid',
        'activity_user_first_name' => null,
        'activity_user_last_name' => null,
        'submitter_name' => null,
        'note' => null,
        'change_reason' => null,
        'change_description' => null,
        'entry_version_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'history_type_id' => false,
        'submission_id' => true,
        'replace_data' => true,
        'submission_name' => true,
        'email_recipients' => true,
        'activity_user_id' => true,
        'activity_date_utc' => true,
        'created_on_utc' => true,
        'bulk_action_task_id' => false,
        'activity_user_first_name' => true,
        'activity_user_last_name' => true,
        'submitter_name' => true,
        'note' => true,
        'change_reason' => true,
        'change_description' => true,
        'entry_version_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'history_type_id' => 'historyTypeId',
        'submission_id' => 'submissionId',
        'replace_data' => 'replaceData',
        'submission_name' => 'submissionName',
        'email_recipients' => 'emailRecipients',
        'activity_user_id' => 'activityUserId',
        'activity_date_utc' => 'activityDateUtc',
        'created_on_utc' => 'createdOnUtc',
        'bulk_action_task_id' => 'bulkActionTaskId',
        'activity_user_first_name' => 'activityUserFirstName',
        'activity_user_last_name' => 'activityUserLastName',
        'submitter_name' => 'submitterName',
        'note' => 'note',
        'change_reason' => 'changeReason',
        'change_description' => 'changeDescription',
        'entry_version_id' => 'entryVersionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'history_type_id' => 'setHistoryTypeId',
        'submission_id' => 'setSubmissionId',
        'replace_data' => 'setReplaceData',
        'submission_name' => 'setSubmissionName',
        'email_recipients' => 'setEmailRecipients',
        'activity_user_id' => 'setActivityUserId',
        'activity_date_utc' => 'setActivityDateUtc',
        'created_on_utc' => 'setCreatedOnUtc',
        'bulk_action_task_id' => 'setBulkActionTaskId',
        'activity_user_first_name' => 'setActivityUserFirstName',
        'activity_user_last_name' => 'setActivityUserLastName',
        'submitter_name' => 'setSubmitterName',
        'note' => 'setNote',
        'change_reason' => 'setChangeReason',
        'change_description' => 'setChangeDescription',
        'entry_version_id' => 'setEntryVersionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'history_type_id' => 'getHistoryTypeId',
        'submission_id' => 'getSubmissionId',
        'replace_data' => 'getReplaceData',
        'submission_name' => 'getSubmissionName',
        'email_recipients' => 'getEmailRecipients',
        'activity_user_id' => 'getActivityUserId',
        'activity_date_utc' => 'getActivityDateUtc',
        'created_on_utc' => 'getCreatedOnUtc',
        'bulk_action_task_id' => 'getBulkActionTaskId',
        'activity_user_first_name' => 'getActivityUserFirstName',
        'activity_user_last_name' => 'getActivityUserLastName',
        'submitter_name' => 'getSubmitterName',
        'note' => 'getNote',
        'change_reason' => 'getChangeReason',
        'change_description' => 'getChangeDescription',
        'entry_version_id' => 'getEntryVersionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('history_type_id', $data ?? [], null);
        $this->setIfExists('submission_id', $data ?? [], null);
        $this->setIfExists('replace_data', $data ?? [], null);
        $this->setIfExists('submission_name', $data ?? [], null);
        $this->setIfExists('email_recipients', $data ?? [], null);
        $this->setIfExists('activity_user_id', $data ?? [], null);
        $this->setIfExists('activity_date_utc', $data ?? [], null);
        $this->setIfExists('created_on_utc', $data ?? [], null);
        $this->setIfExists('bulk_action_task_id', $data ?? [], null);
        $this->setIfExists('activity_user_first_name', $data ?? [], null);
        $this->setIfExists('activity_user_last_name', $data ?? [], null);
        $this->setIfExists('submitter_name', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('change_reason', $data ?? [], null);
        $this->setIfExists('change_description', $data ?? [], null);
        $this->setIfExists('entry_version_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets history_type_id
     *
     * @return int|null
     */
    public function getHistoryTypeId()
    {
        return $this->container['history_type_id'];
    }

    /**
     * Sets history_type_id
     *
     * @param int|null $history_type_id history_type_id
     *
     * @return self
     */
    public function setHistoryTypeId($history_type_id)
    {
        if (is_null($history_type_id)) {
            throw new \InvalidArgumentException('non-nullable history_type_id cannot be null');
        }
        $this->container['history_type_id'] = $history_type_id;

        return $this;
    }

    /**
     * Gets submission_id
     *
     * @return string|null
     */
    public function getSubmissionId()
    {
        return $this->container['submission_id'];
    }

    /**
     * Sets submission_id
     *
     * @param string|null $submission_id submission_id
     *
     * @return self
     */
    public function setSubmissionId($submission_id)
    {
        if (is_null($submission_id)) {
            array_push($this->openAPINullablesSetToNull, 'submission_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submission_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submission_id'] = $submission_id;

        return $this;
    }

    /**
     * Gets replace_data
     *
     * @return string|null
     */
    public function getReplaceData()
    {
        return $this->container['replace_data'];
    }

    /**
     * Sets replace_data
     *
     * @param string|null $replace_data replace_data
     *
     * @return self
     */
    public function setReplaceData($replace_data)
    {
        if (is_null($replace_data)) {
            array_push($this->openAPINullablesSetToNull, 'replace_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replace_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['replace_data'] = $replace_data;

        return $this;
    }

    /**
     * Gets submission_name
     *
     * @return string|null
     */
    public function getSubmissionName()
    {
        return $this->container['submission_name'];
    }

    /**
     * Sets submission_name
     *
     * @param string|null $submission_name submission_name
     *
     * @return self
     */
    public function setSubmissionName($submission_name)
    {
        if (is_null($submission_name)) {
            array_push($this->openAPINullablesSetToNull, 'submission_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submission_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submission_name'] = $submission_name;

        return $this;
    }

    /**
     * Gets email_recipients
     *
     * @return string|null
     */
    public function getEmailRecipients()
    {
        return $this->container['email_recipients'];
    }

    /**
     * Sets email_recipients
     *
     * @param string|null $email_recipients email_recipients
     *
     * @return self
     */
    public function setEmailRecipients($email_recipients)
    {
        if (is_null($email_recipients)) {
            array_push($this->openAPINullablesSetToNull, 'email_recipients');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_recipients', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_recipients'] = $email_recipients;

        return $this;
    }

    /**
     * Gets activity_user_id
     *
     * @return string|null
     */
    public function getActivityUserId()
    {
        return $this->container['activity_user_id'];
    }

    /**
     * Sets activity_user_id
     *
     * @param string|null $activity_user_id activity_user_id
     *
     * @return self
     */
    public function setActivityUserId($activity_user_id)
    {
        if (is_null($activity_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'activity_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_user_id'] = $activity_user_id;

        return $this;
    }

    /**
     * Gets activity_date_utc
     *
     * @return \DateTime|null
     */
    public function getActivityDateUtc()
    {
        return $this->container['activity_date_utc'];
    }

    /**
     * Sets activity_date_utc
     *
     * @param \DateTime|null $activity_date_utc activity_date_utc
     *
     * @return self
     */
    public function setActivityDateUtc($activity_date_utc)
    {
        if (is_null($activity_date_utc)) {
            array_push($this->openAPINullablesSetToNull, 'activity_date_utc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_date_utc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_date_utc'] = $activity_date_utc;

        return $this;
    }

    /**
     * Gets created_on_utc
     *
     * @return \DateTime|null
     */
    public function getCreatedOnUtc()
    {
        return $this->container['created_on_utc'];
    }

    /**
     * Sets created_on_utc
     *
     * @param \DateTime|null $created_on_utc created_on_utc
     *
     * @return self
     */
    public function setCreatedOnUtc($created_on_utc)
    {
        if (is_null($created_on_utc)) {
            array_push($this->openAPINullablesSetToNull, 'created_on_utc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_on_utc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_on_utc'] = $created_on_utc;

        return $this;
    }

    /**
     * Gets bulk_action_task_id
     *
     * @return string|null
     */
    public function getBulkActionTaskId()
    {
        return $this->container['bulk_action_task_id'];
    }

    /**
     * Sets bulk_action_task_id
     *
     * @param string|null $bulk_action_task_id bulk_action_task_id
     *
     * @return self
     */
    public function setBulkActionTaskId($bulk_action_task_id)
    {
        if (is_null($bulk_action_task_id)) {
            throw new \InvalidArgumentException('non-nullable bulk_action_task_id cannot be null');
        }
        $this->container['bulk_action_task_id'] = $bulk_action_task_id;

        return $this;
    }

    /**
     * Gets activity_user_first_name
     *
     * @return string|null
     */
    public function getActivityUserFirstName()
    {
        return $this->container['activity_user_first_name'];
    }

    /**
     * Sets activity_user_first_name
     *
     * @param string|null $activity_user_first_name activity_user_first_name
     *
     * @return self
     */
    public function setActivityUserFirstName($activity_user_first_name)
    {
        if (is_null($activity_user_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'activity_user_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_user_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_user_first_name'] = $activity_user_first_name;

        return $this;
    }

    /**
     * Gets activity_user_last_name
     *
     * @return string|null
     */
    public function getActivityUserLastName()
    {
        return $this->container['activity_user_last_name'];
    }

    /**
     * Sets activity_user_last_name
     *
     * @param string|null $activity_user_last_name activity_user_last_name
     *
     * @return self
     */
    public function setActivityUserLastName($activity_user_last_name)
    {
        if (is_null($activity_user_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'activity_user_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_user_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_user_last_name'] = $activity_user_last_name;

        return $this;
    }

    /**
     * Gets submitter_name
     *
     * @return string|null
     */
    public function getSubmitterName()
    {
        return $this->container['submitter_name'];
    }

    /**
     * Sets submitter_name
     *
     * @param string|null $submitter_name submitter_name
     *
     * @return self
     */
    public function setSubmitterName($submitter_name)
    {
        if (is_null($submitter_name)) {
            array_push($this->openAPINullablesSetToNull, 'submitter_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submitter_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submitter_name'] = $submitter_name;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets change_reason
     *
     * @return string|null
     */
    public function getChangeReason()
    {
        return $this->container['change_reason'];
    }

    /**
     * Sets change_reason
     *
     * @param string|null $change_reason change_reason
     *
     * @return self
     */
    public function setChangeReason($change_reason)
    {
        if (is_null($change_reason)) {
            array_push($this->openAPINullablesSetToNull, 'change_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_reason'] = $change_reason;

        return $this;
    }

    /**
     * Gets change_description
     *
     * @return string|null
     */
    public function getChangeDescription()
    {
        return $this->container['change_description'];
    }

    /**
     * Sets change_description
     *
     * @param string|null $change_description change_description
     *
     * @return self
     */
    public function setChangeDescription($change_description)
    {
        if (is_null($change_description)) {
            array_push($this->openAPINullablesSetToNull, 'change_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_description'] = $change_description;

        return $this;
    }

    /**
     * Gets entry_version_id
     *
     * @return string|null
     */
    public function getEntryVersionId()
    {
        return $this->container['entry_version_id'];
    }

    /**
     * Sets entry_version_id
     *
     * @param string|null $entry_version_id entry_version_id
     *
     * @return self
     */
    public function setEntryVersionId($entry_version_id)
    {
        if (is_null($entry_version_id)) {
            array_push($this->openAPINullablesSetToNull, 'entry_version_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entry_version_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entry_version_id'] = $entry_version_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


