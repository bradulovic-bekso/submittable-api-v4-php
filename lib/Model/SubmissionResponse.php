<?php
/**
 * SubmissionResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubmissionResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubmissionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubmissionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'submission_id' => 'string',
        'project_id' => 'string',
        'submitter_id' => 'string',
        'submission_status' => 'string',
        'is_archived_by_submitter' => 'bool',
        'is_archived_by_organization' => 'bool',
        'is_paid' => 'bool',
        'form_entries' => '\OpenAPI\Client\Model\ContinuationTokenResponseAnyFormTypeEntryMetadataResponseItemsInner[]',
        'labels' => '\OpenAPI\Client\Model\V4LabelResponse[]',
        'review_stage_id' => 'string',
        'public_org_id' => 'string',
        'public_org_version' => 'int',
        'public_org_name' => 'string',
        'submission_title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'submission_id' => 'uuid',
        'project_id' => 'uuid',
        'submitter_id' => 'uuid',
        'submission_status' => null,
        'is_archived_by_submitter' => null,
        'is_archived_by_organization' => null,
        'is_paid' => null,
        'form_entries' => null,
        'labels' => null,
        'review_stage_id' => 'uuid',
        'public_org_id' => 'uuid',
        'public_org_version' => 'int32',
        'public_org_name' => null,
        'submission_title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'submission_id' => true,
        'project_id' => true,
        'submitter_id' => true,
        'submission_status' => true,
        'is_archived_by_submitter' => false,
        'is_archived_by_organization' => false,
        'is_paid' => false,
        'form_entries' => true,
        'labels' => true,
        'review_stage_id' => false,
        'public_org_id' => true,
        'public_org_version' => true,
        'public_org_name' => true,
        'submission_title' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'submission_id' => 'submissionId',
        'project_id' => 'projectId',
        'submitter_id' => 'submitterId',
        'submission_status' => 'submissionStatus',
        'is_archived_by_submitter' => 'isArchivedBySubmitter',
        'is_archived_by_organization' => 'isArchivedByOrganization',
        'is_paid' => 'isPaid',
        'form_entries' => 'formEntries',
        'labels' => 'labels',
        'review_stage_id' => 'reviewStageId',
        'public_org_id' => 'publicOrgId',
        'public_org_version' => 'publicOrgVersion',
        'public_org_name' => 'publicOrgName',
        'submission_title' => 'submissionTitle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'submission_id' => 'setSubmissionId',
        'project_id' => 'setProjectId',
        'submitter_id' => 'setSubmitterId',
        'submission_status' => 'setSubmissionStatus',
        'is_archived_by_submitter' => 'setIsArchivedBySubmitter',
        'is_archived_by_organization' => 'setIsArchivedByOrganization',
        'is_paid' => 'setIsPaid',
        'form_entries' => 'setFormEntries',
        'labels' => 'setLabels',
        'review_stage_id' => 'setReviewStageId',
        'public_org_id' => 'setPublicOrgId',
        'public_org_version' => 'setPublicOrgVersion',
        'public_org_name' => 'setPublicOrgName',
        'submission_title' => 'setSubmissionTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'submission_id' => 'getSubmissionId',
        'project_id' => 'getProjectId',
        'submitter_id' => 'getSubmitterId',
        'submission_status' => 'getSubmissionStatus',
        'is_archived_by_submitter' => 'getIsArchivedBySubmitter',
        'is_archived_by_organization' => 'getIsArchivedByOrganization',
        'is_paid' => 'getIsPaid',
        'form_entries' => 'getFormEntries',
        'labels' => 'getLabels',
        'review_stage_id' => 'getReviewStageId',
        'public_org_id' => 'getPublicOrgId',
        'public_org_version' => 'getPublicOrgVersion',
        'public_org_name' => 'getPublicOrgName',
        'submission_title' => 'getSubmissionTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUBMISSION_STATUS__NEW = 'new';
    public const SUBMISSION_STATUS_IN_PROGRESS = 'in_progress';
    public const SUBMISSION_STATUS_ACCEPTED = 'accepted';
    public const SUBMISSION_STATUS_DECLINED = 'declined';
    public const SUBMISSION_STATUS_WITHDRAWN = 'withdrawn';
    public const SUBMISSION_STATUS_COMPLETED = 'completed';
    public const SUBMISSION_STATUS_EDITABLE = 'editable';
    public const SUBMISSION_STATUS_VIEWED = 'viewed';
    public const SUBMISSION_STATUS_RECEIVED = 'received';
    public const SUBMISSION_STATUS_PUBLISHED = 'published';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubmissionStatusAllowableValues()
    {
        return [
            self::SUBMISSION_STATUS__NEW,
            self::SUBMISSION_STATUS_IN_PROGRESS,
            self::SUBMISSION_STATUS_ACCEPTED,
            self::SUBMISSION_STATUS_DECLINED,
            self::SUBMISSION_STATUS_WITHDRAWN,
            self::SUBMISSION_STATUS_COMPLETED,
            self::SUBMISSION_STATUS_EDITABLE,
            self::SUBMISSION_STATUS_VIEWED,
            self::SUBMISSION_STATUS_RECEIVED,
            self::SUBMISSION_STATUS_PUBLISHED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('submission_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('submitter_id', $data ?? [], null);
        $this->setIfExists('submission_status', $data ?? [], null);
        $this->setIfExists('is_archived_by_submitter', $data ?? [], null);
        $this->setIfExists('is_archived_by_organization', $data ?? [], null);
        $this->setIfExists('is_paid', $data ?? [], null);
        $this->setIfExists('form_entries', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('review_stage_id', $data ?? [], null);
        $this->setIfExists('public_org_id', $data ?? [], null);
        $this->setIfExists('public_org_version', $data ?? [], null);
        $this->setIfExists('public_org_name', $data ?? [], null);
        $this->setIfExists('submission_title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubmissionStatusAllowableValues();
        if (!is_null($this->container['submission_status']) && !in_array($this->container['submission_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'submission_status', must be one of '%s'",
                $this->container['submission_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets submission_id
     *
     * @return string|null
     */
    public function getSubmissionId()
    {
        return $this->container['submission_id'];
    }

    /**
     * Sets submission_id
     *
     * @param string|null $submission_id submission_id
     *
     * @return self
     */
    public function setSubmissionId($submission_id)
    {
        if (is_null($submission_id)) {
            array_push($this->openAPINullablesSetToNull, 'submission_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submission_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submission_id'] = $submission_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            array_push($this->openAPINullablesSetToNull, 'project_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets submitter_id
     *
     * @return string|null
     */
    public function getSubmitterId()
    {
        return $this->container['submitter_id'];
    }

    /**
     * Sets submitter_id
     *
     * @param string|null $submitter_id submitter_id
     *
     * @return self
     */
    public function setSubmitterId($submitter_id)
    {
        if (is_null($submitter_id)) {
            array_push($this->openAPINullablesSetToNull, 'submitter_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submitter_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submitter_id'] = $submitter_id;

        return $this;
    }

    /**
     * Gets submission_status
     *
     * @return string|null
     */
    public function getSubmissionStatus()
    {
        return $this->container['submission_status'];
    }

    /**
     * Sets submission_status
     *
     * @param string|null $submission_status submission_status
     *
     * @return self
     */
    public function setSubmissionStatus($submission_status)
    {
        if (is_null($submission_status)) {
            array_push($this->openAPINullablesSetToNull, 'submission_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submission_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSubmissionStatusAllowableValues();
        if (!is_null($submission_status) && !in_array($submission_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'submission_status', must be one of '%s'",
                    $submission_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['submission_status'] = $submission_status;

        return $this;
    }

    /**
     * Gets is_archived_by_submitter
     *
     * @return bool|null
     */
    public function getIsArchivedBySubmitter()
    {
        return $this->container['is_archived_by_submitter'];
    }

    /**
     * Sets is_archived_by_submitter
     *
     * @param bool|null $is_archived_by_submitter is_archived_by_submitter
     *
     * @return self
     */
    public function setIsArchivedBySubmitter($is_archived_by_submitter)
    {
        if (is_null($is_archived_by_submitter)) {
            throw new \InvalidArgumentException('non-nullable is_archived_by_submitter cannot be null');
        }
        $this->container['is_archived_by_submitter'] = $is_archived_by_submitter;

        return $this;
    }

    /**
     * Gets is_archived_by_organization
     *
     * @return bool|null
     */
    public function getIsArchivedByOrganization()
    {
        return $this->container['is_archived_by_organization'];
    }

    /**
     * Sets is_archived_by_organization
     *
     * @param bool|null $is_archived_by_organization is_archived_by_organization
     *
     * @return self
     */
    public function setIsArchivedByOrganization($is_archived_by_organization)
    {
        if (is_null($is_archived_by_organization)) {
            throw new \InvalidArgumentException('non-nullable is_archived_by_organization cannot be null');
        }
        $this->container['is_archived_by_organization'] = $is_archived_by_organization;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool|null
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool|null $is_paid is_paid
     *
     * @return self
     */
    public function setIsPaid($is_paid)
    {
        if (is_null($is_paid)) {
            throw new \InvalidArgumentException('non-nullable is_paid cannot be null');
        }
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets form_entries
     *
     * @return \OpenAPI\Client\Model\ContinuationTokenResponseAnyFormTypeEntryMetadataResponseItemsInner[]|null
     */
    public function getFormEntries()
    {
        return $this->container['form_entries'];
    }

    /**
     * Sets form_entries
     *
     * @param \OpenAPI\Client\Model\ContinuationTokenResponseAnyFormTypeEntryMetadataResponseItemsInner[]|null $form_entries form_entries
     *
     * @return self
     */
    public function setFormEntries($form_entries)
    {
        if (is_null($form_entries)) {
            array_push($this->openAPINullablesSetToNull, 'form_entries');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_entries', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_entries'] = $form_entries;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \OpenAPI\Client\Model\V4LabelResponse[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \OpenAPI\Client\Model\V4LabelResponse[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            array_push($this->openAPINullablesSetToNull, 'labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets review_stage_id
     *
     * @return string|null
     */
    public function getReviewStageId()
    {
        return $this->container['review_stage_id'];
    }

    /**
     * Sets review_stage_id
     *
     * @param string|null $review_stage_id review_stage_id
     *
     * @return self
     */
    public function setReviewStageId($review_stage_id)
    {
        if (is_null($review_stage_id)) {
            throw new \InvalidArgumentException('non-nullable review_stage_id cannot be null');
        }
        $this->container['review_stage_id'] = $review_stage_id;

        return $this;
    }

    /**
     * Gets public_org_id
     *
     * @return string|null
     */
    public function getPublicOrgId()
    {
        return $this->container['public_org_id'];
    }

    /**
     * Sets public_org_id
     *
     * @param string|null $public_org_id public_org_id
     *
     * @return self
     */
    public function setPublicOrgId($public_org_id)
    {
        if (is_null($public_org_id)) {
            array_push($this->openAPINullablesSetToNull, 'public_org_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_org_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_org_id'] = $public_org_id;

        return $this;
    }

    /**
     * Gets public_org_version
     *
     * @return int|null
     */
    public function getPublicOrgVersion()
    {
        return $this->container['public_org_version'];
    }

    /**
     * Sets public_org_version
     *
     * @param int|null $public_org_version public_org_version
     *
     * @return self
     */
    public function setPublicOrgVersion($public_org_version)
    {
        if (is_null($public_org_version)) {
            array_push($this->openAPINullablesSetToNull, 'public_org_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_org_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_org_version'] = $public_org_version;

        return $this;
    }

    /**
     * Gets public_org_name
     *
     * @return string|null
     */
    public function getPublicOrgName()
    {
        return $this->container['public_org_name'];
    }

    /**
     * Sets public_org_name
     *
     * @param string|null $public_org_name public_org_name
     *
     * @return self
     */
    public function setPublicOrgName($public_org_name)
    {
        if (is_null($public_org_name)) {
            array_push($this->openAPINullablesSetToNull, 'public_org_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_org_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_org_name'] = $public_org_name;

        return $this;
    }

    /**
     * Gets submission_title
     *
     * @return string|null
     */
    public function getSubmissionTitle()
    {
        return $this->container['submission_title'];
    }

    /**
     * Sets submission_title
     *
     * @param string|null $submission_title submission_title
     *
     * @return self
     */
    public function setSubmissionTitle($submission_title)
    {
        if (is_null($submission_title)) {
            array_push($this->openAPINullablesSetToNull, 'submission_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submission_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submission_title'] = $submission_title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


