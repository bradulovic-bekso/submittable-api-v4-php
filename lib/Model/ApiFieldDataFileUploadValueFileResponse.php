<?php
/**
 * ApiFieldDataFileUploadValueFileResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiFieldDataFileUploadValueFileResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiFieldDataFileUploadValueFileResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiFieldDataFileUploadValueFileResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'metadata' => '\OpenAPI\Client\Model\ApiFieldDataFileUploadValueFileMetadata[]',
        'file_name' => 'string',
        'type' => 'string',
        'get_download_url' => 'string',
        'get_thumbnail_url' => 'string',
        'get_conversion_url' => 'string',
        'bucket' => 'string',
        'storage_key' => 'string',
        'duration' => 'int',
        'thumbnail_interval' => 'int',
        'converted_bucket_name' => 'string',
        'converted_storage_key' => 'string',
        'file_size_bytes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'metadata' => null,
        'file_name' => null,
        'type' => null,
        'get_download_url' => null,
        'get_thumbnail_url' => null,
        'get_conversion_url' => null,
        'bucket' => null,
        'storage_key' => null,
        'duration' => 'int32',
        'thumbnail_interval' => 'int32',
        'converted_bucket_name' => null,
        'converted_storage_key' => null,
        'file_size_bytes' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'file_id' => true,
        'metadata' => true,
        'file_name' => true,
        'type' => true,
        'get_download_url' => true,
        'get_thumbnail_url' => true,
        'get_conversion_url' => true,
        'bucket' => true,
        'storage_key' => true,
        'duration' => true,
        'thumbnail_interval' => true,
        'converted_bucket_name' => true,
        'converted_storage_key' => true,
        'file_size_bytes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'fileId',
        'metadata' => 'metadata',
        'file_name' => 'fileName',
        'type' => 'type',
        'get_download_url' => 'getDownloadUrl',
        'get_thumbnail_url' => 'getThumbnailUrl',
        'get_conversion_url' => 'getConversionUrl',
        'bucket' => 'bucket',
        'storage_key' => 'storageKey',
        'duration' => 'duration',
        'thumbnail_interval' => 'thumbnailInterval',
        'converted_bucket_name' => 'convertedBucketName',
        'converted_storage_key' => 'convertedStorageKey',
        'file_size_bytes' => 'fileSizeBytes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'metadata' => 'setMetadata',
        'file_name' => 'setFileName',
        'type' => 'setType',
        'get_download_url' => 'setGetDownloadUrl',
        'get_thumbnail_url' => 'setGetThumbnailUrl',
        'get_conversion_url' => 'setGetConversionUrl',
        'bucket' => 'setBucket',
        'storage_key' => 'setStorageKey',
        'duration' => 'setDuration',
        'thumbnail_interval' => 'setThumbnailInterval',
        'converted_bucket_name' => 'setConvertedBucketName',
        'converted_storage_key' => 'setConvertedStorageKey',
        'file_size_bytes' => 'setFileSizeBytes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'metadata' => 'getMetadata',
        'file_name' => 'getFileName',
        'type' => 'getType',
        'get_download_url' => 'getGetDownloadUrl',
        'get_thumbnail_url' => 'getGetThumbnailUrl',
        'get_conversion_url' => 'getGetConversionUrl',
        'bucket' => 'getBucket',
        'storage_key' => 'getStorageKey',
        'duration' => 'getDuration',
        'thumbnail_interval' => 'getThumbnailInterval',
        'converted_bucket_name' => 'getConvertedBucketName',
        'converted_storage_key' => 'getConvertedStorageKey',
        'file_size_bytes' => 'getFileSizeBytes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('file_id', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('get_download_url', $data ?? [], null);
        $this->setIfExists('get_thumbnail_url', $data ?? [], null);
        $this->setIfExists('get_conversion_url', $data ?? [], null);
        $this->setIfExists('bucket', $data ?? [], null);
        $this->setIfExists('storage_key', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('thumbnail_interval', $data ?? [], null);
        $this->setIfExists('converted_bucket_name', $data ?? [], null);
        $this->setIfExists('converted_storage_key', $data ?? [], null);
        $this->setIfExists('file_size_bytes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string|null
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string|null $file_id file_id
     *
     * @return self
     */
    public function setFileId($file_id)
    {
        if (is_null($file_id)) {
            array_push($this->openAPINullablesSetToNull, 'file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\ApiFieldDataFileUploadValueFileMetadata[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\ApiFieldDataFileUploadValueFileMetadata[]|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            array_push($this->openAPINullablesSetToNull, 'file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets get_download_url
     *
     * @return string|null
     */
    public function getGetDownloadUrl()
    {
        return $this->container['get_download_url'];
    }

    /**
     * Sets get_download_url
     *
     * @param string|null $get_download_url get_download_url
     *
     * @return self
     */
    public function setGetDownloadUrl($get_download_url)
    {
        if (is_null($get_download_url)) {
            array_push($this->openAPINullablesSetToNull, 'get_download_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('get_download_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['get_download_url'] = $get_download_url;

        return $this;
    }

    /**
     * Gets get_thumbnail_url
     *
     * @return string|null
     */
    public function getGetThumbnailUrl()
    {
        return $this->container['get_thumbnail_url'];
    }

    /**
     * Sets get_thumbnail_url
     *
     * @param string|null $get_thumbnail_url get_thumbnail_url
     *
     * @return self
     */
    public function setGetThumbnailUrl($get_thumbnail_url)
    {
        if (is_null($get_thumbnail_url)) {
            array_push($this->openAPINullablesSetToNull, 'get_thumbnail_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('get_thumbnail_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['get_thumbnail_url'] = $get_thumbnail_url;

        return $this;
    }

    /**
     * Gets get_conversion_url
     *
     * @return string|null
     */
    public function getGetConversionUrl()
    {
        return $this->container['get_conversion_url'];
    }

    /**
     * Sets get_conversion_url
     *
     * @param string|null $get_conversion_url get_conversion_url
     *
     * @return self
     */
    public function setGetConversionUrl($get_conversion_url)
    {
        if (is_null($get_conversion_url)) {
            array_push($this->openAPINullablesSetToNull, 'get_conversion_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('get_conversion_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['get_conversion_url'] = $get_conversion_url;

        return $this;
    }

    /**
     * Gets bucket
     *
     * @return string|null
     */
    public function getBucket()
    {
        return $this->container['bucket'];
    }

    /**
     * Sets bucket
     *
     * @param string|null $bucket bucket
     *
     * @return self
     */
    public function setBucket($bucket)
    {
        if (is_null($bucket)) {
            array_push($this->openAPINullablesSetToNull, 'bucket');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bucket', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bucket'] = $bucket;

        return $this;
    }

    /**
     * Gets storage_key
     *
     * @return string|null
     */
    public function getStorageKey()
    {
        return $this->container['storage_key'];
    }

    /**
     * Sets storage_key
     *
     * @param string|null $storage_key storage_key
     *
     * @return self
     */
    public function setStorageKey($storage_key)
    {
        if (is_null($storage_key)) {
            array_push($this->openAPINullablesSetToNull, 'storage_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_key'] = $storage_key;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            array_push($this->openAPINullablesSetToNull, 'duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets thumbnail_interval
     *
     * @return int|null
     */
    public function getThumbnailInterval()
    {
        return $this->container['thumbnail_interval'];
    }

    /**
     * Sets thumbnail_interval
     *
     * @param int|null $thumbnail_interval thumbnail_interval
     *
     * @return self
     */
    public function setThumbnailInterval($thumbnail_interval)
    {
        if (is_null($thumbnail_interval)) {
            array_push($this->openAPINullablesSetToNull, 'thumbnail_interval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumbnail_interval', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thumbnail_interval'] = $thumbnail_interval;

        return $this;
    }

    /**
     * Gets converted_bucket_name
     *
     * @return string|null
     */
    public function getConvertedBucketName()
    {
        return $this->container['converted_bucket_name'];
    }

    /**
     * Sets converted_bucket_name
     *
     * @param string|null $converted_bucket_name converted_bucket_name
     *
     * @return self
     */
    public function setConvertedBucketName($converted_bucket_name)
    {
        if (is_null($converted_bucket_name)) {
            array_push($this->openAPINullablesSetToNull, 'converted_bucket_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('converted_bucket_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['converted_bucket_name'] = $converted_bucket_name;

        return $this;
    }

    /**
     * Gets converted_storage_key
     *
     * @return string|null
     */
    public function getConvertedStorageKey()
    {
        return $this->container['converted_storage_key'];
    }

    /**
     * Sets converted_storage_key
     *
     * @param string|null $converted_storage_key converted_storage_key
     *
     * @return self
     */
    public function setConvertedStorageKey($converted_storage_key)
    {
        if (is_null($converted_storage_key)) {
            array_push($this->openAPINullablesSetToNull, 'converted_storage_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('converted_storage_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['converted_storage_key'] = $converted_storage_key;

        return $this;
    }

    /**
     * Gets file_size_bytes
     *
     * @return int|null
     */
    public function getFileSizeBytes()
    {
        return $this->container['file_size_bytes'];
    }

    /**
     * Sets file_size_bytes
     *
     * @param int|null $file_size_bytes file_size_bytes
     *
     * @return self
     */
    public function setFileSizeBytes($file_size_bytes)
    {
        if (is_null($file_size_bytes)) {
            throw new \InvalidArgumentException('non-nullable file_size_bytes cannot be null');
        }
        $this->container['file_size_bytes'] = $file_size_bytes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


