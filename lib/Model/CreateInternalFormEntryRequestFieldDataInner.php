<?php
/**
 * CreateInternalFormEntryRequestFieldDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Submittable\Model;

use \ArrayAccess;
use \Submittable\ObjectSerializer;

/**
 * CreateInternalFormEntryRequestFieldDataInner Class Doc Comment
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateInternalFormEntryRequestFieldDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'field_type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateInternalFormEntryRequest_fieldData_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'value' => 'string',
        'field_type' => 'string',
        'form_field_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'city' => 'string',
        'region' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'latitude' => 'string',
        'longitude' => 'string',
        'options' => 'string[]',
        'files' => '\Submittable\Model\FieldDataFileUploadValueFileRequest[]',
        'table' => '\Submittable\Model\FieldDataTableValueRequest',
        'referee_email' => 'string',
        'personal_message' => 'string',
        'ein' => 'string',
        'status_code' => '\Submittable\Model\HttpStatusCode',
        'organization_name' => 'string',
        'address' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'ofac_status' => 'string',
        'pub78_verified' => 'bool',
        'irs_bmf_pub78_conflict' => 'bool',
        'most_recent_pub78' => 'string',
        'most_recent_irb' => 'string',
        'subsection_description' => 'string',
        'deductibility_status' => 'string',
        'foundation509_a_status' => 'string',
        'most_recent_bmf' => 'string',
        'ruling_year' => 'string',
        'ruling_month' => 'string',
        'routing_number' => 'string',
        'confirm_routing_number' => 'string',
        'account_number' => 'string',
        'confirm_account_number' => 'string',
        'ssn' => 'string',
        'dob' => '\DateTime',
        'number_of_correct_answers' => 'int',
        'user_access_code' => 'string',
        'email' => 'string',
        'session_url' => 'string',
        'verification_status' => '\Submittable\Model\IdVerificationStatus',
        'verification_status_string' => 'string',
        'verification_data' => '\Submittable\Model\IdVerificationDetails',
        'verification_first_name' => 'string',
        'verification_last_name' => 'string',
        'verification_id_number' => 'string',
        'citizenship' => 'string',
        'verification_dateof_birth' => '\DateTime',
        'gender' => 'string',
        'verification_reason' => 'string',
        'verification_reason_code' => 'int',
        'document_number' => 'string',
        'document_type' => 'string',
        'document_country' => 'string',
        'document_valid_from' => 'string',
        'url' => 'string',
        'is_accepted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'value' => null,
        'field_type' => null,
        'form_field_id' => null,
        'first_name' => null,
        'last_name' => null,
        'address1' => null,
        'address2' => null,
        'city' => null,
        'region' => null,
        'postal_code' => null,
        'country' => null,
        'latitude' => null,
        'longitude' => null,
        'options' => null,
        'files' => null,
        'table' => null,
        'referee_email' => null,
        'personal_message' => null,
        'ein' => null,
        'status_code' => null,
        'organization_name' => null,
        'address' => null,
        'state' => null,
        'zip' => null,
        'ofac_status' => null,
        'pub78_verified' => null,
        'irs_bmf_pub78_conflict' => null,
        'most_recent_pub78' => null,
        'most_recent_irb' => null,
        'subsection_description' => null,
        'deductibility_status' => null,
        'foundation509_a_status' => null,
        'most_recent_bmf' => null,
        'ruling_year' => null,
        'ruling_month' => null,
        'routing_number' => null,
        'confirm_routing_number' => null,
        'account_number' => null,
        'confirm_account_number' => null,
        'ssn' => null,
        'dob' => 'date-time',
        'number_of_correct_answers' => 'int32',
        'user_access_code' => null,
        'email' => null,
        'session_url' => null,
        'verification_status' => null,
        'verification_status_string' => null,
        'verification_data' => null,
        'verification_first_name' => null,
        'verification_last_name' => null,
        'verification_id_number' => null,
        'citizenship' => null,
        'verification_dateof_birth' => 'date-time',
        'gender' => null,
        'verification_reason' => null,
        'verification_reason_code' => 'int32',
        'document_number' => null,
        'document_type' => null,
        'document_country' => null,
        'document_valid_from' => null,
        'url' => null,
        'is_accepted' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'value' => true,
        'field_type' => false,
        'form_field_id' => false,
        'first_name' => true,
        'last_name' => true,
        'address1' => true,
        'address2' => true,
        'city' => true,
        'region' => true,
        'postal_code' => true,
        'country' => true,
        'latitude' => true,
        'longitude' => true,
        'options' => false,
        'files' => true,
        'table' => false,
        'referee_email' => true,
        'personal_message' => true,
        'ein' => true,
        'status_code' => false,
        'organization_name' => true,
        'address' => true,
        'state' => true,
        'zip' => true,
        'ofac_status' => true,
        'pub78_verified' => true,
        'irs_bmf_pub78_conflict' => true,
        'most_recent_pub78' => true,
        'most_recent_irb' => true,
        'subsection_description' => true,
        'deductibility_status' => true,
        'foundation509_a_status' => true,
        'most_recent_bmf' => true,
        'ruling_year' => true,
        'ruling_month' => true,
        'routing_number' => true,
        'confirm_routing_number' => true,
        'account_number' => true,
        'confirm_account_number' => true,
        'ssn' => true,
        'dob' => true,
        'number_of_correct_answers' => true,
        'user_access_code' => true,
        'email' => true,
        'session_url' => true,
        'verification_status' => false,
        'verification_status_string' => true,
        'verification_data' => false,
        'verification_first_name' => true,
        'verification_last_name' => true,
        'verification_id_number' => true,
        'citizenship' => true,
        'verification_dateof_birth' => true,
        'gender' => true,
        'verification_reason' => true,
        'verification_reason_code' => true,
        'document_number' => true,
        'document_type' => true,
        'document_country' => true,
        'document_valid_from' => true,
        'url' => true,
        'is_accepted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'value' => 'value',
        'field_type' => 'fieldType',
        'form_field_id' => 'formFieldId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'address1' => 'address1',
        'address2' => 'address2',
        'city' => 'city',
        'region' => 'region',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'options' => 'options',
        'files' => 'files',
        'table' => 'table',
        'referee_email' => 'refereeEmail',
        'personal_message' => 'personalMessage',
        'ein' => 'ein',
        'status_code' => 'statusCode',
        'organization_name' => 'organizationName',
        'address' => 'address',
        'state' => 'state',
        'zip' => 'zip',
        'ofac_status' => 'ofacStatus',
        'pub78_verified' => 'pub78Verified',
        'irs_bmf_pub78_conflict' => 'irsBmfPub78Conflict',
        'most_recent_pub78' => 'mostRecentPub78',
        'most_recent_irb' => 'mostRecentIrb',
        'subsection_description' => 'subsectionDescription',
        'deductibility_status' => 'deductibilityStatus',
        'foundation509_a_status' => 'foundation509AStatus',
        'most_recent_bmf' => 'mostRecentBmf',
        'ruling_year' => 'rulingYear',
        'ruling_month' => 'rulingMonth',
        'routing_number' => 'routingNumber',
        'confirm_routing_number' => 'confirmRoutingNumber',
        'account_number' => 'accountNumber',
        'confirm_account_number' => 'confirmAccountNumber',
        'ssn' => 'ssn',
        'dob' => 'dob',
        'number_of_correct_answers' => 'numberOfCorrectAnswers',
        'user_access_code' => 'userAccessCode',
        'email' => 'email',
        'session_url' => 'sessionUrl',
        'verification_status' => 'verificationStatus',
        'verification_status_string' => 'verificationStatusString',
        'verification_data' => 'verificationData',
        'verification_first_name' => 'verificationFirstName',
        'verification_last_name' => 'verificationLastName',
        'verification_id_number' => 'verificationIdNumber',
        'citizenship' => 'citizenship',
        'verification_dateof_birth' => 'verificationDateofBirth',
        'gender' => 'gender',
        'verification_reason' => 'verificationReason',
        'verification_reason_code' => 'verificationReasonCode',
        'document_number' => 'documentNumber',
        'document_type' => 'documentType',
        'document_country' => 'documentCountry',
        'document_valid_from' => 'documentValidFrom',
        'url' => 'url',
        'is_accepted' => 'isAccepted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'value' => 'setValue',
        'field_type' => 'setFieldType',
        'form_field_id' => 'setFormFieldId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'city' => 'setCity',
        'region' => 'setRegion',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'options' => 'setOptions',
        'files' => 'setFiles',
        'table' => 'setTable',
        'referee_email' => 'setRefereeEmail',
        'personal_message' => 'setPersonalMessage',
        'ein' => 'setEin',
        'status_code' => 'setStatusCode',
        'organization_name' => 'setOrganizationName',
        'address' => 'setAddress',
        'state' => 'setState',
        'zip' => 'setZip',
        'ofac_status' => 'setOfacStatus',
        'pub78_verified' => 'setPub78Verified',
        'irs_bmf_pub78_conflict' => 'setIrsBmfPub78Conflict',
        'most_recent_pub78' => 'setMostRecentPub78',
        'most_recent_irb' => 'setMostRecentIrb',
        'subsection_description' => 'setSubsectionDescription',
        'deductibility_status' => 'setDeductibilityStatus',
        'foundation509_a_status' => 'setFoundation509AStatus',
        'most_recent_bmf' => 'setMostRecentBmf',
        'ruling_year' => 'setRulingYear',
        'ruling_month' => 'setRulingMonth',
        'routing_number' => 'setRoutingNumber',
        'confirm_routing_number' => 'setConfirmRoutingNumber',
        'account_number' => 'setAccountNumber',
        'confirm_account_number' => 'setConfirmAccountNumber',
        'ssn' => 'setSsn',
        'dob' => 'setDob',
        'number_of_correct_answers' => 'setNumberOfCorrectAnswers',
        'user_access_code' => 'setUserAccessCode',
        'email' => 'setEmail',
        'session_url' => 'setSessionUrl',
        'verification_status' => 'setVerificationStatus',
        'verification_status_string' => 'setVerificationStatusString',
        'verification_data' => 'setVerificationData',
        'verification_first_name' => 'setVerificationFirstName',
        'verification_last_name' => 'setVerificationLastName',
        'verification_id_number' => 'setVerificationIdNumber',
        'citizenship' => 'setCitizenship',
        'verification_dateof_birth' => 'setVerificationDateofBirth',
        'gender' => 'setGender',
        'verification_reason' => 'setVerificationReason',
        'verification_reason_code' => 'setVerificationReasonCode',
        'document_number' => 'setDocumentNumber',
        'document_type' => 'setDocumentType',
        'document_country' => 'setDocumentCountry',
        'document_valid_from' => 'setDocumentValidFrom',
        'url' => 'setUrl',
        'is_accepted' => 'setIsAccepted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'value' => 'getValue',
        'field_type' => 'getFieldType',
        'form_field_id' => 'getFormFieldId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'city' => 'getCity',
        'region' => 'getRegion',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'options' => 'getOptions',
        'files' => 'getFiles',
        'table' => 'getTable',
        'referee_email' => 'getRefereeEmail',
        'personal_message' => 'getPersonalMessage',
        'ein' => 'getEin',
        'status_code' => 'getStatusCode',
        'organization_name' => 'getOrganizationName',
        'address' => 'getAddress',
        'state' => 'getState',
        'zip' => 'getZip',
        'ofac_status' => 'getOfacStatus',
        'pub78_verified' => 'getPub78Verified',
        'irs_bmf_pub78_conflict' => 'getIrsBmfPub78Conflict',
        'most_recent_pub78' => 'getMostRecentPub78',
        'most_recent_irb' => 'getMostRecentIrb',
        'subsection_description' => 'getSubsectionDescription',
        'deductibility_status' => 'getDeductibilityStatus',
        'foundation509_a_status' => 'getFoundation509AStatus',
        'most_recent_bmf' => 'getMostRecentBmf',
        'ruling_year' => 'getRulingYear',
        'ruling_month' => 'getRulingMonth',
        'routing_number' => 'getRoutingNumber',
        'confirm_routing_number' => 'getConfirmRoutingNumber',
        'account_number' => 'getAccountNumber',
        'confirm_account_number' => 'getConfirmAccountNumber',
        'ssn' => 'getSsn',
        'dob' => 'getDob',
        'number_of_correct_answers' => 'getNumberOfCorrectAnswers',
        'user_access_code' => 'getUserAccessCode',
        'email' => 'getEmail',
        'session_url' => 'getSessionUrl',
        'verification_status' => 'getVerificationStatus',
        'verification_status_string' => 'getVerificationStatusString',
        'verification_data' => 'getVerificationData',
        'verification_first_name' => 'getVerificationFirstName',
        'verification_last_name' => 'getVerificationLastName',
        'verification_id_number' => 'getVerificationIdNumber',
        'citizenship' => 'getCitizenship',
        'verification_dateof_birth' => 'getVerificationDateofBirth',
        'gender' => 'getGender',
        'verification_reason' => 'getVerificationReason',
        'verification_reason_code' => 'getVerificationReasonCode',
        'document_number' => 'getDocumentNumber',
        'document_type' => 'getDocumentType',
        'document_country' => 'getDocumentCountry',
        'document_valid_from' => 'getDocumentValidFrom',
        'url' => 'getUrl',
        'is_accepted' => 'getIsAccepted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('field_type', $data ?? [], null);
        $this->setIfExists('form_field_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('address1', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('table', $data ?? [], null);
        $this->setIfExists('referee_email', $data ?? [], null);
        $this->setIfExists('personal_message', $data ?? [], null);
        $this->setIfExists('ein', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('organization_name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('ofac_status', $data ?? [], null);
        $this->setIfExists('pub78_verified', $data ?? [], null);
        $this->setIfExists('irs_bmf_pub78_conflict', $data ?? [], null);
        $this->setIfExists('most_recent_pub78', $data ?? [], null);
        $this->setIfExists('most_recent_irb', $data ?? [], null);
        $this->setIfExists('subsection_description', $data ?? [], null);
        $this->setIfExists('deductibility_status', $data ?? [], null);
        $this->setIfExists('foundation509_a_status', $data ?? [], null);
        $this->setIfExists('most_recent_bmf', $data ?? [], null);
        $this->setIfExists('ruling_year', $data ?? [], null);
        $this->setIfExists('ruling_month', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('confirm_routing_number', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('confirm_account_number', $data ?? [], null);
        $this->setIfExists('ssn', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('number_of_correct_answers', $data ?? [], null);
        $this->setIfExists('user_access_code', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('session_url', $data ?? [], null);
        $this->setIfExists('verification_status', $data ?? [], null);
        $this->setIfExists('verification_status_string', $data ?? [], null);
        $this->setIfExists('verification_data', $data ?? [], null);
        $this->setIfExists('verification_first_name', $data ?? [], null);
        $this->setIfExists('verification_last_name', $data ?? [], null);
        $this->setIfExists('verification_id_number', $data ?? [], null);
        $this->setIfExists('citizenship', $data ?? [], null);
        $this->setIfExists('verification_dateof_birth', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('verification_reason', $data ?? [], null);
        $this->setIfExists('verification_reason_code', $data ?? [], null);
        $this->setIfExists('document_number', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('document_country', $data ?? [], null);
        $this->setIfExists('document_valid_from', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('is_accepted', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['field_type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['field_type'] === null) {
            $invalidProperties[] = "'field_type' can't be null";
        }
        if ((mb_strlen($this->container['field_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'field_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['form_field_id'] === null) {
            $invalidProperties[] = "'form_field_id' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalidProperties[] = "'options' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            array_push($this->openAPINullablesSetToNull, 'value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string $field_type field_type
     *
     * @return self
     */
    public function setFieldType($field_type)
    {
        if (is_null($field_type)) {
            throw new \InvalidArgumentException('non-nullable field_type cannot be null');
        }

        if ((mb_strlen($field_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $field_type when calling CreateInternalFormEntryRequestFieldDataInner., must be bigger than or equal to 1.');
        }

        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets form_field_id
     *
     * @return string
     */
    public function getFormFieldId()
    {
        return $this->container['form_field_id'];
    }

    /**
     * Sets form_field_id
     *
     * @param string $form_field_id form_field_id
     *
     * @return self
     */
    public function setFormFieldId($form_field_id)
    {
        if (is_null($form_field_id)) {
            throw new \InvalidArgumentException('non-nullable form_field_id cannot be null');
        }
        $this->container['form_field_id'] = $form_field_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 address1
     *
     * @return self
     */
    public function setAddress1($address1)
    {
        if (is_null($address1)) {
            array_push($this->openAPINullablesSetToNull, 'address1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 address2
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            array_push($this->openAPINullablesSetToNull, 'address2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return string|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param string|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            array_push($this->openAPINullablesSetToNull, 'latitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return string|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param string|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            array_push($this->openAPINullablesSetToNull, 'longitude');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('longitude', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string[] $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Submittable\Model\FieldDataFileUploadValueFileRequest[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Submittable\Model\FieldDataFileUploadValueFileRequest[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            array_push($this->openAPINullablesSetToNull, 'files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('files', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets table
     *
     * @return \Submittable\Model\FieldDataTableValueRequest|null
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param \Submittable\Model\FieldDataTableValueRequest|null $table table
     *
     * @return self
     */
    public function setTable($table)
    {
        if (is_null($table)) {
            throw new \InvalidArgumentException('non-nullable table cannot be null');
        }
        $this->container['table'] = $table;

        return $this;
    }

    /**
     * Gets referee_email
     *
     * @return string|null
     */
    public function getRefereeEmail()
    {
        return $this->container['referee_email'];
    }

    /**
     * Sets referee_email
     *
     * @param string|null $referee_email referee_email
     *
     * @return self
     */
    public function setRefereeEmail($referee_email)
    {
        if (is_null($referee_email)) {
            array_push($this->openAPINullablesSetToNull, 'referee_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referee_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referee_email'] = $referee_email;

        return $this;
    }

    /**
     * Gets personal_message
     *
     * @return string|null
     */
    public function getPersonalMessage()
    {
        return $this->container['personal_message'];
    }

    /**
     * Sets personal_message
     *
     * @param string|null $personal_message personal_message
     *
     * @return self
     */
    public function setPersonalMessage($personal_message)
    {
        if (is_null($personal_message)) {
            array_push($this->openAPINullablesSetToNull, 'personal_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['personal_message'] = $personal_message;

        return $this;
    }

    /**
     * Gets ein
     *
     * @return string|null
     */
    public function getEin()
    {
        return $this->container['ein'];
    }

    /**
     * Sets ein
     *
     * @param string|null $ein ein
     *
     * @return self
     */
    public function setEin($ein)
    {
        if (is_null($ein)) {
            array_push($this->openAPINullablesSetToNull, 'ein');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ein', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ein'] = $ein;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return \Submittable\Model\HttpStatusCode|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param \Submittable\Model\HttpStatusCode|null $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string|null $organization_name organization_name
     *
     * @return self
     */
    public function setOrganizationName($organization_name)
    {
        if (is_null($organization_name)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            array_push($this->openAPINullablesSetToNull, 'address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            array_push($this->openAPINullablesSetToNull, 'zip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets ofac_status
     *
     * @return string|null
     */
    public function getOfacStatus()
    {
        return $this->container['ofac_status'];
    }

    /**
     * Sets ofac_status
     *
     * @param string|null $ofac_status ofac_status
     *
     * @return self
     */
    public function setOfacStatus($ofac_status)
    {
        if (is_null($ofac_status)) {
            array_push($this->openAPINullablesSetToNull, 'ofac_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ofac_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ofac_status'] = $ofac_status;

        return $this;
    }

    /**
     * Gets pub78_verified
     *
     * @return bool|null
     */
    public function getPub78Verified()
    {
        return $this->container['pub78_verified'];
    }

    /**
     * Sets pub78_verified
     *
     * @param bool|null $pub78_verified pub78_verified
     *
     * @return self
     */
    public function setPub78Verified($pub78_verified)
    {
        if (is_null($pub78_verified)) {
            array_push($this->openAPINullablesSetToNull, 'pub78_verified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pub78_verified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pub78_verified'] = $pub78_verified;

        return $this;
    }

    /**
     * Gets irs_bmf_pub78_conflict
     *
     * @return bool|null
     */
    public function getIrsBmfPub78Conflict()
    {
        return $this->container['irs_bmf_pub78_conflict'];
    }

    /**
     * Sets irs_bmf_pub78_conflict
     *
     * @param bool|null $irs_bmf_pub78_conflict irs_bmf_pub78_conflict
     *
     * @return self
     */
    public function setIrsBmfPub78Conflict($irs_bmf_pub78_conflict)
    {
        if (is_null($irs_bmf_pub78_conflict)) {
            array_push($this->openAPINullablesSetToNull, 'irs_bmf_pub78_conflict');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('irs_bmf_pub78_conflict', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['irs_bmf_pub78_conflict'] = $irs_bmf_pub78_conflict;

        return $this;
    }

    /**
     * Gets most_recent_pub78
     *
     * @return string|null
     */
    public function getMostRecentPub78()
    {
        return $this->container['most_recent_pub78'];
    }

    /**
     * Sets most_recent_pub78
     *
     * @param string|null $most_recent_pub78 most_recent_pub78
     *
     * @return self
     */
    public function setMostRecentPub78($most_recent_pub78)
    {
        if (is_null($most_recent_pub78)) {
            array_push($this->openAPINullablesSetToNull, 'most_recent_pub78');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('most_recent_pub78', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['most_recent_pub78'] = $most_recent_pub78;

        return $this;
    }

    /**
     * Gets most_recent_irb
     *
     * @return string|null
     */
    public function getMostRecentIrb()
    {
        return $this->container['most_recent_irb'];
    }

    /**
     * Sets most_recent_irb
     *
     * @param string|null $most_recent_irb most_recent_irb
     *
     * @return self
     */
    public function setMostRecentIrb($most_recent_irb)
    {
        if (is_null($most_recent_irb)) {
            array_push($this->openAPINullablesSetToNull, 'most_recent_irb');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('most_recent_irb', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['most_recent_irb'] = $most_recent_irb;

        return $this;
    }

    /**
     * Gets subsection_description
     *
     * @return string|null
     */
    public function getSubsectionDescription()
    {
        return $this->container['subsection_description'];
    }

    /**
     * Sets subsection_description
     *
     * @param string|null $subsection_description subsection_description
     *
     * @return self
     */
    public function setSubsectionDescription($subsection_description)
    {
        if (is_null($subsection_description)) {
            array_push($this->openAPINullablesSetToNull, 'subsection_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subsection_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subsection_description'] = $subsection_description;

        return $this;
    }

    /**
     * Gets deductibility_status
     *
     * @return string|null
     */
    public function getDeductibilityStatus()
    {
        return $this->container['deductibility_status'];
    }

    /**
     * Sets deductibility_status
     *
     * @param string|null $deductibility_status deductibility_status
     *
     * @return self
     */
    public function setDeductibilityStatus($deductibility_status)
    {
        if (is_null($deductibility_status)) {
            array_push($this->openAPINullablesSetToNull, 'deductibility_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deductibility_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deductibility_status'] = $deductibility_status;

        return $this;
    }

    /**
     * Gets foundation509_a_status
     *
     * @return string|null
     */
    public function getFoundation509AStatus()
    {
        return $this->container['foundation509_a_status'];
    }

    /**
     * Sets foundation509_a_status
     *
     * @param string|null $foundation509_a_status foundation509_a_status
     *
     * @return self
     */
    public function setFoundation509AStatus($foundation509_a_status)
    {
        if (is_null($foundation509_a_status)) {
            array_push($this->openAPINullablesSetToNull, 'foundation509_a_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('foundation509_a_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['foundation509_a_status'] = $foundation509_a_status;

        return $this;
    }

    /**
     * Gets most_recent_bmf
     *
     * @return string|null
     */
    public function getMostRecentBmf()
    {
        return $this->container['most_recent_bmf'];
    }

    /**
     * Sets most_recent_bmf
     *
     * @param string|null $most_recent_bmf most_recent_bmf
     *
     * @return self
     */
    public function setMostRecentBmf($most_recent_bmf)
    {
        if (is_null($most_recent_bmf)) {
            array_push($this->openAPINullablesSetToNull, 'most_recent_bmf');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('most_recent_bmf', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['most_recent_bmf'] = $most_recent_bmf;

        return $this;
    }

    /**
     * Gets ruling_year
     *
     * @return string|null
     */
    public function getRulingYear()
    {
        return $this->container['ruling_year'];
    }

    /**
     * Sets ruling_year
     *
     * @param string|null $ruling_year ruling_year
     *
     * @return self
     */
    public function setRulingYear($ruling_year)
    {
        if (is_null($ruling_year)) {
            array_push($this->openAPINullablesSetToNull, 'ruling_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ruling_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ruling_year'] = $ruling_year;

        return $this;
    }

    /**
     * Gets ruling_month
     *
     * @return string|null
     */
    public function getRulingMonth()
    {
        return $this->container['ruling_month'];
    }

    /**
     * Sets ruling_month
     *
     * @param string|null $ruling_month ruling_month
     *
     * @return self
     */
    public function setRulingMonth($ruling_month)
    {
        if (is_null($ruling_month)) {
            array_push($this->openAPINullablesSetToNull, 'ruling_month');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ruling_month', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ruling_month'] = $ruling_month;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number routing_number
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            array_push($this->openAPINullablesSetToNull, 'routing_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('routing_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets confirm_routing_number
     *
     * @return string|null
     */
    public function getConfirmRoutingNumber()
    {
        return $this->container['confirm_routing_number'];
    }

    /**
     * Sets confirm_routing_number
     *
     * @param string|null $confirm_routing_number confirm_routing_number
     *
     * @return self
     */
    public function setConfirmRoutingNumber($confirm_routing_number)
    {
        if (is_null($confirm_routing_number)) {
            array_push($this->openAPINullablesSetToNull, 'confirm_routing_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirm_routing_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirm_routing_number'] = $confirm_routing_number;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            array_push($this->openAPINullablesSetToNull, 'account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets confirm_account_number
     *
     * @return string|null
     */
    public function getConfirmAccountNumber()
    {
        return $this->container['confirm_account_number'];
    }

    /**
     * Sets confirm_account_number
     *
     * @param string|null $confirm_account_number confirm_account_number
     *
     * @return self
     */
    public function setConfirmAccountNumber($confirm_account_number)
    {
        if (is_null($confirm_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'confirm_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirm_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirm_account_number'] = $confirm_account_number;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string|null
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string|null $ssn ssn
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        if (is_null($ssn)) {
            array_push($this->openAPINullablesSetToNull, 'ssn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ssn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob dob
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            array_push($this->openAPINullablesSetToNull, 'dob');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dob', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets number_of_correct_answers
     *
     * @return int|null
     */
    public function getNumberOfCorrectAnswers()
    {
        return $this->container['number_of_correct_answers'];
    }

    /**
     * Sets number_of_correct_answers
     *
     * @param int|null $number_of_correct_answers number_of_correct_answers
     *
     * @return self
     */
    public function setNumberOfCorrectAnswers($number_of_correct_answers)
    {
        if (is_null($number_of_correct_answers)) {
            array_push($this->openAPINullablesSetToNull, 'number_of_correct_answers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number_of_correct_answers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number_of_correct_answers'] = $number_of_correct_answers;

        return $this;
    }

    /**
     * Gets user_access_code
     *
     * @return string|null
     */
    public function getUserAccessCode()
    {
        return $this->container['user_access_code'];
    }

    /**
     * Sets user_access_code
     *
     * @param string|null $user_access_code user_access_code
     *
     * @return self
     */
    public function setUserAccessCode($user_access_code)
    {
        if (is_null($user_access_code)) {
            array_push($this->openAPINullablesSetToNull, 'user_access_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_access_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_access_code'] = $user_access_code;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets session_url
     *
     * @return string|null
     */
    public function getSessionUrl()
    {
        return $this->container['session_url'];
    }

    /**
     * Sets session_url
     *
     * @param string|null $session_url session_url
     *
     * @return self
     */
    public function setSessionUrl($session_url)
    {
        if (is_null($session_url)) {
            array_push($this->openAPINullablesSetToNull, 'session_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_url'] = $session_url;

        return $this;
    }

    /**
     * Gets verification_status
     *
     * @return \Submittable\Model\IdVerificationStatus|null
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status
     *
     * @param \Submittable\Model\IdVerificationStatus|null $verification_status verification_status
     *
     * @return self
     */
    public function setVerificationStatus($verification_status)
    {
        if (is_null($verification_status)) {
            throw new \InvalidArgumentException('non-nullable verification_status cannot be null');
        }
        $this->container['verification_status'] = $verification_status;

        return $this;
    }

    /**
     * Gets verification_status_string
     *
     * @return string|null
     */
    public function getVerificationStatusString()
    {
        return $this->container['verification_status_string'];
    }

    /**
     * Sets verification_status_string
     *
     * @param string|null $verification_status_string verification_status_string
     *
     * @return self
     */
    public function setVerificationStatusString($verification_status_string)
    {
        if (is_null($verification_status_string)) {
            array_push($this->openAPINullablesSetToNull, 'verification_status_string');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_status_string', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_status_string'] = $verification_status_string;

        return $this;
    }

    /**
     * Gets verification_data
     *
     * @return \Submittable\Model\IdVerificationDetails|null
     */
    public function getVerificationData()
    {
        return $this->container['verification_data'];
    }

    /**
     * Sets verification_data
     *
     * @param \Submittable\Model\IdVerificationDetails|null $verification_data verification_data
     *
     * @return self
     */
    public function setVerificationData($verification_data)
    {
        if (is_null($verification_data)) {
            throw new \InvalidArgumentException('non-nullable verification_data cannot be null');
        }
        $this->container['verification_data'] = $verification_data;

        return $this;
    }

    /**
     * Gets verification_first_name
     *
     * @return string|null
     */
    public function getVerificationFirstName()
    {
        return $this->container['verification_first_name'];
    }

    /**
     * Sets verification_first_name
     *
     * @param string|null $verification_first_name verification_first_name
     *
     * @return self
     */
    public function setVerificationFirstName($verification_first_name)
    {
        if (is_null($verification_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'verification_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_first_name'] = $verification_first_name;

        return $this;
    }

    /**
     * Gets verification_last_name
     *
     * @return string|null
     */
    public function getVerificationLastName()
    {
        return $this->container['verification_last_name'];
    }

    /**
     * Sets verification_last_name
     *
     * @param string|null $verification_last_name verification_last_name
     *
     * @return self
     */
    public function setVerificationLastName($verification_last_name)
    {
        if (is_null($verification_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'verification_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_last_name'] = $verification_last_name;

        return $this;
    }

    /**
     * Gets verification_id_number
     *
     * @return string|null
     */
    public function getVerificationIdNumber()
    {
        return $this->container['verification_id_number'];
    }

    /**
     * Sets verification_id_number
     *
     * @param string|null $verification_id_number verification_id_number
     *
     * @return self
     */
    public function setVerificationIdNumber($verification_id_number)
    {
        if (is_null($verification_id_number)) {
            array_push($this->openAPINullablesSetToNull, 'verification_id_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_id_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_id_number'] = $verification_id_number;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string|null
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string|null $citizenship citizenship
     *
     * @return self
     */
    public function setCitizenship($citizenship)
    {
        if (is_null($citizenship)) {
            array_push($this->openAPINullablesSetToNull, 'citizenship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('citizenship', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets verification_dateof_birth
     *
     * @return \DateTime|null
     */
    public function getVerificationDateofBirth()
    {
        return $this->container['verification_dateof_birth'];
    }

    /**
     * Sets verification_dateof_birth
     *
     * @param \DateTime|null $verification_dateof_birth verification_dateof_birth
     *
     * @return self
     */
    public function setVerificationDateofBirth($verification_dateof_birth)
    {
        if (is_null($verification_dateof_birth)) {
            array_push($this->openAPINullablesSetToNull, 'verification_dateof_birth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_dateof_birth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_dateof_birth'] = $verification_dateof_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets verification_reason
     *
     * @return string|null
     */
    public function getVerificationReason()
    {
        return $this->container['verification_reason'];
    }

    /**
     * Sets verification_reason
     *
     * @param string|null $verification_reason verification_reason
     *
     * @return self
     */
    public function setVerificationReason($verification_reason)
    {
        if (is_null($verification_reason)) {
            array_push($this->openAPINullablesSetToNull, 'verification_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_reason'] = $verification_reason;

        return $this;
    }

    /**
     * Gets verification_reason_code
     *
     * @return int|null
     */
    public function getVerificationReasonCode()
    {
        return $this->container['verification_reason_code'];
    }

    /**
     * Sets verification_reason_code
     *
     * @param int|null $verification_reason_code verification_reason_code
     *
     * @return self
     */
    public function setVerificationReasonCode($verification_reason_code)
    {
        if (is_null($verification_reason_code)) {
            array_push($this->openAPINullablesSetToNull, 'verification_reason_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verification_reason_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verification_reason_code'] = $verification_reason_code;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string|null
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string|null $document_number document_number
     *
     * @return self
     */
    public function setDocumentNumber($document_number)
    {
        if (is_null($document_number)) {
            array_push($this->openAPINullablesSetToNull, 'document_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            array_push($this->openAPINullablesSetToNull, 'document_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_country
     *
     * @return string|null
     */
    public function getDocumentCountry()
    {
        return $this->container['document_country'];
    }

    /**
     * Sets document_country
     *
     * @param string|null $document_country document_country
     *
     * @return self
     */
    public function setDocumentCountry($document_country)
    {
        if (is_null($document_country)) {
            array_push($this->openAPINullablesSetToNull, 'document_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_country'] = $document_country;

        return $this;
    }

    /**
     * Gets document_valid_from
     *
     * @return string|null
     */
    public function getDocumentValidFrom()
    {
        return $this->container['document_valid_from'];
    }

    /**
     * Sets document_valid_from
     *
     * @param string|null $document_valid_from document_valid_from
     *
     * @return self
     */
    public function setDocumentValidFrom($document_valid_from)
    {
        if (is_null($document_valid_from)) {
            array_push($this->openAPINullablesSetToNull, 'document_valid_from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_valid_from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_valid_from'] = $document_valid_from;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets is_accepted
     *
     * @return bool|null
     */
    public function getIsAccepted()
    {
        return $this->container['is_accepted'];
    }

    /**
     * Sets is_accepted
     *
     * @param bool|null $is_accepted is_accepted
     *
     * @return self
     */
    public function setIsAccepted($is_accepted)
    {
        if (is_null($is_accepted)) {
            throw new \InvalidArgumentException('non-nullable is_accepted cannot be null');
        }
        $this->container['is_accepted'] = $is_accepted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


