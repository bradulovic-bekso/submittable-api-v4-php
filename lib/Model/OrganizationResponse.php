<?php
/**
 * OrganizationResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrganizationResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrganizationResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrganizationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'legacy_id' => 'string',
        'name' => 'string',
        'domain' => 'string',
        'website_url' => 'string',
        'time_zone' => 'string',
        'submission_type_name' => 'string',
        'project_type_name' => 'string',
        'email' => 'string',
        'account_status_name' => 'string',
        'is_access_restricted' => 'bool',
        'account_type_id' => 'int',
        'fee_schedule' => 'string',
        'organization_type_id' => 'int',
        'transaction_limit' => 'float',
        'team_capacity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'legacy_id' => null,
        'name' => null,
        'domain' => null,
        'website_url' => null,
        'time_zone' => null,
        'submission_type_name' => null,
        'project_type_name' => null,
        'email' => null,
        'account_status_name' => null,
        'is_access_restricted' => null,
        'account_type_id' => 'int32',
        'fee_schedule' => null,
        'organization_type_id' => 'int32',
        'transaction_limit' => 'double',
        'team_capacity' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'legacy_id' => true,
        'name' => true,
        'domain' => true,
        'website_url' => true,
        'time_zone' => true,
        'submission_type_name' => true,
        'project_type_name' => true,
        'email' => true,
        'account_status_name' => true,
        'is_access_restricted' => false,
        'account_type_id' => false,
        'fee_schedule' => true,
        'organization_type_id' => false,
        'transaction_limit' => false,
        'team_capacity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'legacy_id' => 'legacyId',
        'name' => 'name',
        'domain' => 'domain',
        'website_url' => 'websiteUrl',
        'time_zone' => 'timeZone',
        'submission_type_name' => 'submissionTypeName',
        'project_type_name' => 'projectTypeName',
        'email' => 'email',
        'account_status_name' => 'accountStatusName',
        'is_access_restricted' => 'isAccessRestricted',
        'account_type_id' => 'accountTypeId',
        'fee_schedule' => 'feeSchedule',
        'organization_type_id' => 'organizationTypeId',
        'transaction_limit' => 'transactionLimit',
        'team_capacity' => 'teamCapacity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'legacy_id' => 'setLegacyId',
        'name' => 'setName',
        'domain' => 'setDomain',
        'website_url' => 'setWebsiteUrl',
        'time_zone' => 'setTimeZone',
        'submission_type_name' => 'setSubmissionTypeName',
        'project_type_name' => 'setProjectTypeName',
        'email' => 'setEmail',
        'account_status_name' => 'setAccountStatusName',
        'is_access_restricted' => 'setIsAccessRestricted',
        'account_type_id' => 'setAccountTypeId',
        'fee_schedule' => 'setFeeSchedule',
        'organization_type_id' => 'setOrganizationTypeId',
        'transaction_limit' => 'setTransactionLimit',
        'team_capacity' => 'setTeamCapacity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'legacy_id' => 'getLegacyId',
        'name' => 'getName',
        'domain' => 'getDomain',
        'website_url' => 'getWebsiteUrl',
        'time_zone' => 'getTimeZone',
        'submission_type_name' => 'getSubmissionTypeName',
        'project_type_name' => 'getProjectTypeName',
        'email' => 'getEmail',
        'account_status_name' => 'getAccountStatusName',
        'is_access_restricted' => 'getIsAccessRestricted',
        'account_type_id' => 'getAccountTypeId',
        'fee_schedule' => 'getFeeSchedule',
        'organization_type_id' => 'getOrganizationTypeId',
        'transaction_limit' => 'getTransactionLimit',
        'team_capacity' => 'getTeamCapacity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_STATUS_NAME_ACTIVE = 'active';
    public const ACCOUNT_STATUS_NAME_CANCELLED = 'cancelled';
    public const ACCOUNT_STATUS_NAME_EXPIRED = 'expired';
    public const ACCOUNT_STATUS_NAME_PAST_DUE_30 = 'past_due_30';
    public const ACCOUNT_STATUS_NAME_PAST_DUE_60 = 'past_due_60';
    public const ACCOUNT_STATUS_NAME_PAST_DUE_90 = 'past_due_90';
    public const ACCOUNT_STATUS_NAME_PAST_DUE_CANCELLED = 'past_due_cancelled';
    public const ACCOUNT_STATUS_NAME_OVERDUE = 'overdue';
    public const ACCOUNT_STATUS_NAME_PAUSED = 'paused';
    public const ACCOUNT_STATUS_NAME_CANCELLATION_SCHEDULED = 'cancellation_scheduled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStatusNameAllowableValues()
    {
        return [
            self::ACCOUNT_STATUS_NAME_ACTIVE,
            self::ACCOUNT_STATUS_NAME_CANCELLED,
            self::ACCOUNT_STATUS_NAME_EXPIRED,
            self::ACCOUNT_STATUS_NAME_PAST_DUE_30,
            self::ACCOUNT_STATUS_NAME_PAST_DUE_60,
            self::ACCOUNT_STATUS_NAME_PAST_DUE_90,
            self::ACCOUNT_STATUS_NAME_PAST_DUE_CANCELLED,
            self::ACCOUNT_STATUS_NAME_OVERDUE,
            self::ACCOUNT_STATUS_NAME_PAUSED,
            self::ACCOUNT_STATUS_NAME_CANCELLATION_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('legacy_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('website_url', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('submission_type_name', $data ?? [], null);
        $this->setIfExists('project_type_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('account_status_name', $data ?? [], null);
        $this->setIfExists('is_access_restricted', $data ?? [], null);
        $this->setIfExists('account_type_id', $data ?? [], null);
        $this->setIfExists('fee_schedule', $data ?? [], null);
        $this->setIfExists('organization_type_id', $data ?? [], null);
        $this->setIfExists('transaction_limit', $data ?? [], null);
        $this->setIfExists('team_capacity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountStatusNameAllowableValues();
        if (!is_null($this->container['account_status_name']) && !in_array($this->container['account_status_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_status_name', must be one of '%s'",
                $this->container['account_status_name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets legacy_id
     *
     * @return string|null
     */
    public function getLegacyId()
    {
        return $this->container['legacy_id'];
    }

    /**
     * Sets legacy_id
     *
     * @param string|null $legacy_id legacy_id
     *
     * @return self
     */
    public function setLegacyId($legacy_id)
    {
        if (is_null($legacy_id)) {
            array_push($this->openAPINullablesSetToNull, 'legacy_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacy_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legacy_id'] = $legacy_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            array_push($this->openAPINullablesSetToNull, 'domain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string|null
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string|null $website_url website_url
     *
     * @return self
     */
    public function setWebsiteUrl($website_url)
    {
        if (is_null($website_url)) {
            array_push($this->openAPINullablesSetToNull, 'website_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets submission_type_name
     *
     * @return string|null
     */
    public function getSubmissionTypeName()
    {
        return $this->container['submission_type_name'];
    }

    /**
     * Sets submission_type_name
     *
     * @param string|null $submission_type_name submission_type_name
     *
     * @return self
     */
    public function setSubmissionTypeName($submission_type_name)
    {
        if (is_null($submission_type_name)) {
            array_push($this->openAPINullablesSetToNull, 'submission_type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('submission_type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['submission_type_name'] = $submission_type_name;

        return $this;
    }

    /**
     * Gets project_type_name
     *
     * @return string|null
     */
    public function getProjectTypeName()
    {
        return $this->container['project_type_name'];
    }

    /**
     * Sets project_type_name
     *
     * @param string|null $project_type_name project_type_name
     *
     * @return self
     */
    public function setProjectTypeName($project_type_name)
    {
        if (is_null($project_type_name)) {
            array_push($this->openAPINullablesSetToNull, 'project_type_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_type_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_type_name'] = $project_type_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets account_status_name
     *
     * @return string|null
     */
    public function getAccountStatusName()
    {
        return $this->container['account_status_name'];
    }

    /**
     * Sets account_status_name
     *
     * @param string|null $account_status_name account_status_name
     *
     * @return self
     */
    public function setAccountStatusName($account_status_name)
    {
        if (is_null($account_status_name)) {
            array_push($this->openAPINullablesSetToNull, 'account_status_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_status_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAccountStatusNameAllowableValues();
        if (!is_null($account_status_name) && !in_array($account_status_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_status_name', must be one of '%s'",
                    $account_status_name,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_status_name'] = $account_status_name;

        return $this;
    }

    /**
     * Gets is_access_restricted
     *
     * @return bool|null
     */
    public function getIsAccessRestricted()
    {
        return $this->container['is_access_restricted'];
    }

    /**
     * Sets is_access_restricted
     *
     * @param bool|null $is_access_restricted is_access_restricted
     *
     * @return self
     */
    public function setIsAccessRestricted($is_access_restricted)
    {
        if (is_null($is_access_restricted)) {
            throw new \InvalidArgumentException('non-nullable is_access_restricted cannot be null');
        }
        $this->container['is_access_restricted'] = $is_access_restricted;

        return $this;
    }

    /**
     * Gets account_type_id
     *
     * @return int|null
     */
    public function getAccountTypeId()
    {
        return $this->container['account_type_id'];
    }

    /**
     * Sets account_type_id
     *
     * @param int|null $account_type_id account_type_id
     *
     * @return self
     */
    public function setAccountTypeId($account_type_id)
    {
        if (is_null($account_type_id)) {
            throw new \InvalidArgumentException('non-nullable account_type_id cannot be null');
        }
        $this->container['account_type_id'] = $account_type_id;

        return $this;
    }

    /**
     * Gets fee_schedule
     *
     * @return string|null
     */
    public function getFeeSchedule()
    {
        return $this->container['fee_schedule'];
    }

    /**
     * Sets fee_schedule
     *
     * @param string|null $fee_schedule fee_schedule
     *
     * @return self
     */
    public function setFeeSchedule($fee_schedule)
    {
        if (is_null($fee_schedule)) {
            array_push($this->openAPINullablesSetToNull, 'fee_schedule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fee_schedule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fee_schedule'] = $fee_schedule;

        return $this;
    }

    /**
     * Gets organization_type_id
     *
     * @return int|null
     */
    public function getOrganizationTypeId()
    {
        return $this->container['organization_type_id'];
    }

    /**
     * Sets organization_type_id
     *
     * @param int|null $organization_type_id organization_type_id
     *
     * @return self
     */
    public function setOrganizationTypeId($organization_type_id)
    {
        if (is_null($organization_type_id)) {
            throw new \InvalidArgumentException('non-nullable organization_type_id cannot be null');
        }
        $this->container['organization_type_id'] = $organization_type_id;

        return $this;
    }

    /**
     * Gets transaction_limit
     *
     * @return float|null
     */
    public function getTransactionLimit()
    {
        return $this->container['transaction_limit'];
    }

    /**
     * Sets transaction_limit
     *
     * @param float|null $transaction_limit transaction_limit
     *
     * @return self
     */
    public function setTransactionLimit($transaction_limit)
    {
        if (is_null($transaction_limit)) {
            throw new \InvalidArgumentException('non-nullable transaction_limit cannot be null');
        }
        $this->container['transaction_limit'] = $transaction_limit;

        return $this;
    }

    /**
     * Gets team_capacity
     *
     * @return int|null
     */
    public function getTeamCapacity()
    {
        return $this->container['team_capacity'];
    }

    /**
     * Sets team_capacity
     *
     * @param int|null $team_capacity team_capacity
     *
     * @return self
     */
    public function setTeamCapacity($team_capacity)
    {
        if (is_null($team_capacity)) {
            throw new \InvalidArgumentException('non-nullable team_capacity cannot be null');
        }
        $this->container['team_capacity'] = $team_capacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


