<?php
/**
 * OrganizationFeatures
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Submittable\Model;

use \ArrayAccess;
use \Submittable\ObjectSerializer;

/**
 * OrganizationFeatures Class Doc Comment
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrganizationFeatures implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrganizationFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'legacy_organization_id' => 'string',
        'enable_eligibility_forms' => 'bool',
        'enable_additional_forms' => 'bool',
        'enable_reference_forms' => 'bool',
        'enable_new_internal_forms' => 'bool',
        'allow_reviews' => 'bool',
        'enable_form_tables' => 'bool',
        'enable_large_select' => 'bool',
        'num_form_fields' => 'int',
        'require_address' => 'bool',
        'enable_address_validation' => 'bool',
        'enable_short_answer_extended_validation' => 'bool',
        'enable_form_logic' => 'bool',
        'enable_charity_check' => 'bool',
        'enable_collaborative_drafts' => 'bool',
        'enable_docusign_integration' => 'bool',
        'enable_google_analytics' => 'bool',
        'enable_international_phone' => 'bool',
        'enable_idv_fraud_prevention' => 'bool',
        'enable_kba_fraud_prevention' => 'bool',
        'enable_transunion_kba' => 'bool',
        'enable_limit_multiple_submissions' => 'bool',
        'enable_localize_js' => 'bool',
        'enable_manual_submissions' => 'bool',
        'enable_messaging' => 'bool',
        'enable_message_drafts' => 'bool',
        'enable_new_public_gallery' => 'bool',
        'enable_reminders' => 'bool',
        'enable_responsive_public_forms' => 'bool',
        'enable_new_payment_options' => 'bool',
        'enable_stripe_subscription' => 'bool',
        'enable_terms' => 'bool',
        'enable_validated_public_voting' => 'bool',
        'enable_video_transcoding' => 'bool',
        'enable_data_platform' => 'bool',
        'enable_calendar' => 'bool',
        'enable_salesforce_integration' => 'bool',
        'enable_request_forms' => 'bool',
        'enable_ratings' => 'bool',
        'enable_multi_file_docs_preview' => 'bool',
        'enable_price_options' => 'bool',
        'enable_payment_addons' => 'bool',
        'apply_sub_fees_to_subscription' => 'bool',
        'enable_new_assignments' => 'bool',
        'enable_level_three_view_scores' => 'bool',
        'enable_discover' => 'bool',
        'enable_new_submission_details' => 'bool',
        'enable_new_additional_forms' => 'bool',
        'enable_new_submission_actions' => 'bool',
        'enable_submitter_notes' => 'bool',
        'allow_request_edit' => 'bool',
        'enable_new_initial_forms' => 'bool',
        'enable_self_service_submission_limits' => 'bool',
        'should_track_submissions_monthly' => 'bool',
        'enable_foreign_currency' => 'bool',
        'stripe_enabled' => 'bool',
        'enable_document_import' => 'bool',
        'enable_ai_assistant' => 'bool',
        'disable_us_form_fields' => 'bool',
        'is_hipaa' => 'bool',
        'enable_budget_tracking' => 'bool',
        'enable_funds_distribution' => 'bool',
        'enable_us_bank_payment_blocks' => 'bool',
        'enable_financial_oversight' => 'bool',
        'enable_financial_oversight_premium' => 'bool',
        'enable_reimbursements' => 'bool',
        'enable_auto_labels' => 'bool',
        'enable_reviews' => 'bool',
        'enable_single_round_review' => 'bool',
        'enable_multi_round_review' => 'bool',
        'enable_random_assignment' => 'bool',
        'enable_group_assignment' => 'bool',
        'enable_automated_review' => 'bool',
        'enable_feedback_sharing' => 'bool',
        'enable_reports_link' => 'bool',
        'enable_advanced_reporting' => 'bool',
        'enable_aggregate_statistics' => 'bool',
        'enable_pdf_export' => 'bool',
        'enable_visitor_report' => 'bool',
        'enable_dashboard' => 'bool',
        'enable_api' => 'bool',
        'allow_api' => 'bool',
        'enable_read_write_api' => 'bool',
        'enable_zapier_integration' => 'bool',
        'enable_google_sign_in' => 'bool',
        'enable_facebook_sign_in' => 'bool',
        'enable_social_media_buttons' => 'bool',
        'disable_submission_emails' => 'bool',
        'disable_create_account_emails' => 'bool',
        'enable_us_bank_check_payment' => 'bool',
        'enable_us_bank_ach_payment' => 'bool',
        'enable_us_bank_prepaid_card_payment' => 'bool',
        'is_azure' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'legacy_organization_id' => null,
        'enable_eligibility_forms' => null,
        'enable_additional_forms' => null,
        'enable_reference_forms' => null,
        'enable_new_internal_forms' => null,
        'allow_reviews' => null,
        'enable_form_tables' => null,
        'enable_large_select' => null,
        'num_form_fields' => 'int32',
        'require_address' => null,
        'enable_address_validation' => null,
        'enable_short_answer_extended_validation' => null,
        'enable_form_logic' => null,
        'enable_charity_check' => null,
        'enable_collaborative_drafts' => null,
        'enable_docusign_integration' => null,
        'enable_google_analytics' => null,
        'enable_international_phone' => null,
        'enable_idv_fraud_prevention' => null,
        'enable_kba_fraud_prevention' => null,
        'enable_transunion_kba' => null,
        'enable_limit_multiple_submissions' => null,
        'enable_localize_js' => null,
        'enable_manual_submissions' => null,
        'enable_messaging' => null,
        'enable_message_drafts' => null,
        'enable_new_public_gallery' => null,
        'enable_reminders' => null,
        'enable_responsive_public_forms' => null,
        'enable_new_payment_options' => null,
        'enable_stripe_subscription' => null,
        'enable_terms' => null,
        'enable_validated_public_voting' => null,
        'enable_video_transcoding' => null,
        'enable_data_platform' => null,
        'enable_calendar' => null,
        'enable_salesforce_integration' => null,
        'enable_request_forms' => null,
        'enable_ratings' => null,
        'enable_multi_file_docs_preview' => null,
        'enable_price_options' => null,
        'enable_payment_addons' => null,
        'apply_sub_fees_to_subscription' => null,
        'enable_new_assignments' => null,
        'enable_level_three_view_scores' => null,
        'enable_discover' => null,
        'enable_new_submission_details' => null,
        'enable_new_additional_forms' => null,
        'enable_new_submission_actions' => null,
        'enable_submitter_notes' => null,
        'allow_request_edit' => null,
        'enable_new_initial_forms' => null,
        'enable_self_service_submission_limits' => null,
        'should_track_submissions_monthly' => null,
        'enable_foreign_currency' => null,
        'stripe_enabled' => null,
        'enable_document_import' => null,
        'enable_ai_assistant' => null,
        'disable_us_form_fields' => null,
        'is_hipaa' => null,
        'enable_budget_tracking' => null,
        'enable_funds_distribution' => null,
        'enable_us_bank_payment_blocks' => null,
        'enable_financial_oversight' => null,
        'enable_financial_oversight_premium' => null,
        'enable_reimbursements' => null,
        'enable_auto_labels' => null,
        'enable_reviews' => null,
        'enable_single_round_review' => null,
        'enable_multi_round_review' => null,
        'enable_random_assignment' => null,
        'enable_group_assignment' => null,
        'enable_automated_review' => null,
        'enable_feedback_sharing' => null,
        'enable_reports_link' => null,
        'enable_advanced_reporting' => null,
        'enable_aggregate_statistics' => null,
        'enable_pdf_export' => null,
        'enable_visitor_report' => null,
        'enable_dashboard' => null,
        'enable_api' => null,
        'allow_api' => null,
        'enable_read_write_api' => null,
        'enable_zapier_integration' => null,
        'enable_google_sign_in' => null,
        'enable_facebook_sign_in' => null,
        'enable_social_media_buttons' => null,
        'disable_submission_emails' => null,
        'disable_create_account_emails' => null,
        'enable_us_bank_check_payment' => null,
        'enable_us_bank_ach_payment' => null,
        'enable_us_bank_prepaid_card_payment' => null,
        'is_azure' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'legacy_organization_id' => true,
        'enable_eligibility_forms' => false,
        'enable_additional_forms' => false,
        'enable_reference_forms' => false,
        'enable_new_internal_forms' => false,
        'allow_reviews' => false,
        'enable_form_tables' => false,
        'enable_large_select' => false,
        'num_form_fields' => false,
        'require_address' => false,
        'enable_address_validation' => false,
        'enable_short_answer_extended_validation' => false,
        'enable_form_logic' => false,
        'enable_charity_check' => false,
        'enable_collaborative_drafts' => false,
        'enable_docusign_integration' => false,
        'enable_google_analytics' => false,
        'enable_international_phone' => false,
        'enable_idv_fraud_prevention' => false,
        'enable_kba_fraud_prevention' => false,
        'enable_transunion_kba' => false,
        'enable_limit_multiple_submissions' => false,
        'enable_localize_js' => false,
        'enable_manual_submissions' => false,
        'enable_messaging' => false,
        'enable_message_drafts' => false,
        'enable_new_public_gallery' => false,
        'enable_reminders' => false,
        'enable_responsive_public_forms' => false,
        'enable_new_payment_options' => false,
        'enable_stripe_subscription' => false,
        'enable_terms' => false,
        'enable_validated_public_voting' => false,
        'enable_video_transcoding' => false,
        'enable_data_platform' => false,
        'enable_calendar' => false,
        'enable_salesforce_integration' => false,
        'enable_request_forms' => false,
        'enable_ratings' => false,
        'enable_multi_file_docs_preview' => false,
        'enable_price_options' => false,
        'enable_payment_addons' => false,
        'apply_sub_fees_to_subscription' => false,
        'enable_new_assignments' => false,
        'enable_level_three_view_scores' => false,
        'enable_discover' => false,
        'enable_new_submission_details' => false,
        'enable_new_additional_forms' => false,
        'enable_new_submission_actions' => false,
        'enable_submitter_notes' => false,
        'allow_request_edit' => false,
        'enable_new_initial_forms' => false,
        'enable_self_service_submission_limits' => false,
        'should_track_submissions_monthly' => false,
        'enable_foreign_currency' => false,
        'stripe_enabled' => false,
        'enable_document_import' => false,
        'enable_ai_assistant' => false,
        'disable_us_form_fields' => false,
        'is_hipaa' => false,
        'enable_budget_tracking' => false,
        'enable_funds_distribution' => false,
        'enable_us_bank_payment_blocks' => false,
        'enable_financial_oversight' => false,
        'enable_financial_oversight_premium' => false,
        'enable_reimbursements' => false,
        'enable_auto_labels' => false,
        'enable_reviews' => false,
        'enable_single_round_review' => false,
        'enable_multi_round_review' => false,
        'enable_random_assignment' => false,
        'enable_group_assignment' => false,
        'enable_automated_review' => false,
        'enable_feedback_sharing' => false,
        'enable_reports_link' => false,
        'enable_advanced_reporting' => false,
        'enable_aggregate_statistics' => false,
        'enable_pdf_export' => false,
        'enable_visitor_report' => false,
        'enable_dashboard' => false,
        'enable_api' => false,
        'allow_api' => false,
        'enable_read_write_api' => false,
        'enable_zapier_integration' => false,
        'enable_google_sign_in' => false,
        'enable_facebook_sign_in' => false,
        'enable_social_media_buttons' => false,
        'disable_submission_emails' => false,
        'disable_create_account_emails' => false,
        'enable_us_bank_check_payment' => false,
        'enable_us_bank_ach_payment' => false,
        'enable_us_bank_prepaid_card_payment' => false,
        'is_azure' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'legacy_organization_id' => 'legacyOrganizationId',
        'enable_eligibility_forms' => 'enableEligibilityForms',
        'enable_additional_forms' => 'enableAdditionalForms',
        'enable_reference_forms' => 'enableReferenceForms',
        'enable_new_internal_forms' => 'enableNewInternalForms',
        'allow_reviews' => 'allowReviews',
        'enable_form_tables' => 'enableFormTables',
        'enable_large_select' => 'enableLargeSelect',
        'num_form_fields' => 'numFormFields',
        'require_address' => 'requireAddress',
        'enable_address_validation' => 'enableAddressValidation',
        'enable_short_answer_extended_validation' => 'enableShortAnswerExtendedValidation',
        'enable_form_logic' => 'enableFormLogic',
        'enable_charity_check' => 'enableCharityCheck',
        'enable_collaborative_drafts' => 'enableCollaborativeDrafts',
        'enable_docusign_integration' => 'enableDocusignIntegration',
        'enable_google_analytics' => 'enableGoogleAnalytics',
        'enable_international_phone' => 'enableInternationalPhone',
        'enable_idv_fraud_prevention' => 'enableIDVFraudPrevention',
        'enable_kba_fraud_prevention' => 'enableKBAFraudPrevention',
        'enable_transunion_kba' => 'enableTransunionKBA',
        'enable_limit_multiple_submissions' => 'enableLimitMultipleSubmissions',
        'enable_localize_js' => 'enableLocalizeJs',
        'enable_manual_submissions' => 'enableManualSubmissions',
        'enable_messaging' => 'enableMessaging',
        'enable_message_drafts' => 'enableMessageDrafts',
        'enable_new_public_gallery' => 'enableNewPublicGallery',
        'enable_reminders' => 'enableReminders',
        'enable_responsive_public_forms' => 'enableResponsivePublicForms',
        'enable_new_payment_options' => 'enableNewPaymentOptions',
        'enable_stripe_subscription' => 'enableStripeSubscription',
        'enable_terms' => 'enableTerms',
        'enable_validated_public_voting' => 'enableValidatedPublicVoting',
        'enable_video_transcoding' => 'enableVideoTranscoding',
        'enable_data_platform' => 'enableDataPlatform',
        'enable_calendar' => 'enableCalendar',
        'enable_salesforce_integration' => 'enableSalesforceIntegration',
        'enable_request_forms' => 'enableRequestForms',
        'enable_ratings' => 'enableRatings',
        'enable_multi_file_docs_preview' => 'enableMultiFileDocsPreview',
        'enable_price_options' => 'enablePriceOptions',
        'enable_payment_addons' => 'enablePaymentAddons',
        'apply_sub_fees_to_subscription' => 'applySubFeesToSubscription',
        'enable_new_assignments' => 'enableNewAssignments',
        'enable_level_three_view_scores' => 'enableLevelThreeViewScores',
        'enable_discover' => 'enableDiscover',
        'enable_new_submission_details' => 'enableNewSubmissionDetails',
        'enable_new_additional_forms' => 'enableNewAdditionalForms',
        'enable_new_submission_actions' => 'enableNewSubmissionActions',
        'enable_submitter_notes' => 'enableSubmitterNotes',
        'allow_request_edit' => 'allowRequestEdit',
        'enable_new_initial_forms' => 'enableNewInitialForms',
        'enable_self_service_submission_limits' => 'enableSelfServiceSubmissionLimits',
        'should_track_submissions_monthly' => 'shouldTrackSubmissionsMonthly',
        'enable_foreign_currency' => 'enableForeignCurrency',
        'stripe_enabled' => 'stripeEnabled',
        'enable_document_import' => 'enableDocumentImport',
        'enable_ai_assistant' => 'enableAIAssistant',
        'disable_us_form_fields' => 'disableUSFormFields',
        'is_hipaa' => 'isHIPAA',
        'enable_budget_tracking' => 'enableBudgetTracking',
        'enable_funds_distribution' => 'enableFundsDistribution',
        'enable_us_bank_payment_blocks' => 'enableUsBankPaymentBlocks',
        'enable_financial_oversight' => 'enableFinancialOversight',
        'enable_financial_oversight_premium' => 'enableFinancialOversightPremium',
        'enable_reimbursements' => 'enableReimbursements',
        'enable_auto_labels' => 'enableAutoLabels',
        'enable_reviews' => 'enableReviews',
        'enable_single_round_review' => 'enableSingleRoundReview',
        'enable_multi_round_review' => 'enableMultiRoundReview',
        'enable_random_assignment' => 'enableRandomAssignment',
        'enable_group_assignment' => 'enableGroupAssignment',
        'enable_automated_review' => 'enableAutomatedReview',
        'enable_feedback_sharing' => 'enableFeedbackSharing',
        'enable_reports_link' => 'enableReportsLink',
        'enable_advanced_reporting' => 'enableAdvancedReporting',
        'enable_aggregate_statistics' => 'enableAggregateStatistics',
        'enable_pdf_export' => 'enablePdfExport',
        'enable_visitor_report' => 'enableVisitorReport',
        'enable_dashboard' => 'enableDashboard',
        'enable_api' => 'enableApi',
        'allow_api' => 'allowApi',
        'enable_read_write_api' => 'enableReadWriteApi',
        'enable_zapier_integration' => 'enableZapierIntegration',
        'enable_google_sign_in' => 'enableGoogleSignIn',
        'enable_facebook_sign_in' => 'enableFacebookSignIn',
        'enable_social_media_buttons' => 'enableSocialMediaButtons',
        'disable_submission_emails' => 'disableSubmissionEmails',
        'disable_create_account_emails' => 'disableCreateAccountEmails',
        'enable_us_bank_check_payment' => 'enableUsBankCheckPayment',
        'enable_us_bank_ach_payment' => 'enableUsBankAchPayment',
        'enable_us_bank_prepaid_card_payment' => 'enableUsBankPrepaidCardPayment',
        'is_azure' => 'isAzure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'legacy_organization_id' => 'setLegacyOrganizationId',
        'enable_eligibility_forms' => 'setEnableEligibilityForms',
        'enable_additional_forms' => 'setEnableAdditionalForms',
        'enable_reference_forms' => 'setEnableReferenceForms',
        'enable_new_internal_forms' => 'setEnableNewInternalForms',
        'allow_reviews' => 'setAllowReviews',
        'enable_form_tables' => 'setEnableFormTables',
        'enable_large_select' => 'setEnableLargeSelect',
        'num_form_fields' => 'setNumFormFields',
        'require_address' => 'setRequireAddress',
        'enable_address_validation' => 'setEnableAddressValidation',
        'enable_short_answer_extended_validation' => 'setEnableShortAnswerExtendedValidation',
        'enable_form_logic' => 'setEnableFormLogic',
        'enable_charity_check' => 'setEnableCharityCheck',
        'enable_collaborative_drafts' => 'setEnableCollaborativeDrafts',
        'enable_docusign_integration' => 'setEnableDocusignIntegration',
        'enable_google_analytics' => 'setEnableGoogleAnalytics',
        'enable_international_phone' => 'setEnableInternationalPhone',
        'enable_idv_fraud_prevention' => 'setEnableIdvFraudPrevention',
        'enable_kba_fraud_prevention' => 'setEnableKbaFraudPrevention',
        'enable_transunion_kba' => 'setEnableTransunionKba',
        'enable_limit_multiple_submissions' => 'setEnableLimitMultipleSubmissions',
        'enable_localize_js' => 'setEnableLocalizeJs',
        'enable_manual_submissions' => 'setEnableManualSubmissions',
        'enable_messaging' => 'setEnableMessaging',
        'enable_message_drafts' => 'setEnableMessageDrafts',
        'enable_new_public_gallery' => 'setEnableNewPublicGallery',
        'enable_reminders' => 'setEnableReminders',
        'enable_responsive_public_forms' => 'setEnableResponsivePublicForms',
        'enable_new_payment_options' => 'setEnableNewPaymentOptions',
        'enable_stripe_subscription' => 'setEnableStripeSubscription',
        'enable_terms' => 'setEnableTerms',
        'enable_validated_public_voting' => 'setEnableValidatedPublicVoting',
        'enable_video_transcoding' => 'setEnableVideoTranscoding',
        'enable_data_platform' => 'setEnableDataPlatform',
        'enable_calendar' => 'setEnableCalendar',
        'enable_salesforce_integration' => 'setEnableSalesforceIntegration',
        'enable_request_forms' => 'setEnableRequestForms',
        'enable_ratings' => 'setEnableRatings',
        'enable_multi_file_docs_preview' => 'setEnableMultiFileDocsPreview',
        'enable_price_options' => 'setEnablePriceOptions',
        'enable_payment_addons' => 'setEnablePaymentAddons',
        'apply_sub_fees_to_subscription' => 'setApplySubFeesToSubscription',
        'enable_new_assignments' => 'setEnableNewAssignments',
        'enable_level_three_view_scores' => 'setEnableLevelThreeViewScores',
        'enable_discover' => 'setEnableDiscover',
        'enable_new_submission_details' => 'setEnableNewSubmissionDetails',
        'enable_new_additional_forms' => 'setEnableNewAdditionalForms',
        'enable_new_submission_actions' => 'setEnableNewSubmissionActions',
        'enable_submitter_notes' => 'setEnableSubmitterNotes',
        'allow_request_edit' => 'setAllowRequestEdit',
        'enable_new_initial_forms' => 'setEnableNewInitialForms',
        'enable_self_service_submission_limits' => 'setEnableSelfServiceSubmissionLimits',
        'should_track_submissions_monthly' => 'setShouldTrackSubmissionsMonthly',
        'enable_foreign_currency' => 'setEnableForeignCurrency',
        'stripe_enabled' => 'setStripeEnabled',
        'enable_document_import' => 'setEnableDocumentImport',
        'enable_ai_assistant' => 'setEnableAiAssistant',
        'disable_us_form_fields' => 'setDisableUsFormFields',
        'is_hipaa' => 'setIsHipaa',
        'enable_budget_tracking' => 'setEnableBudgetTracking',
        'enable_funds_distribution' => 'setEnableFundsDistribution',
        'enable_us_bank_payment_blocks' => 'setEnableUsBankPaymentBlocks',
        'enable_financial_oversight' => 'setEnableFinancialOversight',
        'enable_financial_oversight_premium' => 'setEnableFinancialOversightPremium',
        'enable_reimbursements' => 'setEnableReimbursements',
        'enable_auto_labels' => 'setEnableAutoLabels',
        'enable_reviews' => 'setEnableReviews',
        'enable_single_round_review' => 'setEnableSingleRoundReview',
        'enable_multi_round_review' => 'setEnableMultiRoundReview',
        'enable_random_assignment' => 'setEnableRandomAssignment',
        'enable_group_assignment' => 'setEnableGroupAssignment',
        'enable_automated_review' => 'setEnableAutomatedReview',
        'enable_feedback_sharing' => 'setEnableFeedbackSharing',
        'enable_reports_link' => 'setEnableReportsLink',
        'enable_advanced_reporting' => 'setEnableAdvancedReporting',
        'enable_aggregate_statistics' => 'setEnableAggregateStatistics',
        'enable_pdf_export' => 'setEnablePdfExport',
        'enable_visitor_report' => 'setEnableVisitorReport',
        'enable_dashboard' => 'setEnableDashboard',
        'enable_api' => 'setEnableApi',
        'allow_api' => 'setAllowApi',
        'enable_read_write_api' => 'setEnableReadWriteApi',
        'enable_zapier_integration' => 'setEnableZapierIntegration',
        'enable_google_sign_in' => 'setEnableGoogleSignIn',
        'enable_facebook_sign_in' => 'setEnableFacebookSignIn',
        'enable_social_media_buttons' => 'setEnableSocialMediaButtons',
        'disable_submission_emails' => 'setDisableSubmissionEmails',
        'disable_create_account_emails' => 'setDisableCreateAccountEmails',
        'enable_us_bank_check_payment' => 'setEnableUsBankCheckPayment',
        'enable_us_bank_ach_payment' => 'setEnableUsBankAchPayment',
        'enable_us_bank_prepaid_card_payment' => 'setEnableUsBankPrepaidCardPayment',
        'is_azure' => 'setIsAzure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'legacy_organization_id' => 'getLegacyOrganizationId',
        'enable_eligibility_forms' => 'getEnableEligibilityForms',
        'enable_additional_forms' => 'getEnableAdditionalForms',
        'enable_reference_forms' => 'getEnableReferenceForms',
        'enable_new_internal_forms' => 'getEnableNewInternalForms',
        'allow_reviews' => 'getAllowReviews',
        'enable_form_tables' => 'getEnableFormTables',
        'enable_large_select' => 'getEnableLargeSelect',
        'num_form_fields' => 'getNumFormFields',
        'require_address' => 'getRequireAddress',
        'enable_address_validation' => 'getEnableAddressValidation',
        'enable_short_answer_extended_validation' => 'getEnableShortAnswerExtendedValidation',
        'enable_form_logic' => 'getEnableFormLogic',
        'enable_charity_check' => 'getEnableCharityCheck',
        'enable_collaborative_drafts' => 'getEnableCollaborativeDrafts',
        'enable_docusign_integration' => 'getEnableDocusignIntegration',
        'enable_google_analytics' => 'getEnableGoogleAnalytics',
        'enable_international_phone' => 'getEnableInternationalPhone',
        'enable_idv_fraud_prevention' => 'getEnableIdvFraudPrevention',
        'enable_kba_fraud_prevention' => 'getEnableKbaFraudPrevention',
        'enable_transunion_kba' => 'getEnableTransunionKba',
        'enable_limit_multiple_submissions' => 'getEnableLimitMultipleSubmissions',
        'enable_localize_js' => 'getEnableLocalizeJs',
        'enable_manual_submissions' => 'getEnableManualSubmissions',
        'enable_messaging' => 'getEnableMessaging',
        'enable_message_drafts' => 'getEnableMessageDrafts',
        'enable_new_public_gallery' => 'getEnableNewPublicGallery',
        'enable_reminders' => 'getEnableReminders',
        'enable_responsive_public_forms' => 'getEnableResponsivePublicForms',
        'enable_new_payment_options' => 'getEnableNewPaymentOptions',
        'enable_stripe_subscription' => 'getEnableStripeSubscription',
        'enable_terms' => 'getEnableTerms',
        'enable_validated_public_voting' => 'getEnableValidatedPublicVoting',
        'enable_video_transcoding' => 'getEnableVideoTranscoding',
        'enable_data_platform' => 'getEnableDataPlatform',
        'enable_calendar' => 'getEnableCalendar',
        'enable_salesforce_integration' => 'getEnableSalesforceIntegration',
        'enable_request_forms' => 'getEnableRequestForms',
        'enable_ratings' => 'getEnableRatings',
        'enable_multi_file_docs_preview' => 'getEnableMultiFileDocsPreview',
        'enable_price_options' => 'getEnablePriceOptions',
        'enable_payment_addons' => 'getEnablePaymentAddons',
        'apply_sub_fees_to_subscription' => 'getApplySubFeesToSubscription',
        'enable_new_assignments' => 'getEnableNewAssignments',
        'enable_level_three_view_scores' => 'getEnableLevelThreeViewScores',
        'enable_discover' => 'getEnableDiscover',
        'enable_new_submission_details' => 'getEnableNewSubmissionDetails',
        'enable_new_additional_forms' => 'getEnableNewAdditionalForms',
        'enable_new_submission_actions' => 'getEnableNewSubmissionActions',
        'enable_submitter_notes' => 'getEnableSubmitterNotes',
        'allow_request_edit' => 'getAllowRequestEdit',
        'enable_new_initial_forms' => 'getEnableNewInitialForms',
        'enable_self_service_submission_limits' => 'getEnableSelfServiceSubmissionLimits',
        'should_track_submissions_monthly' => 'getShouldTrackSubmissionsMonthly',
        'enable_foreign_currency' => 'getEnableForeignCurrency',
        'stripe_enabled' => 'getStripeEnabled',
        'enable_document_import' => 'getEnableDocumentImport',
        'enable_ai_assistant' => 'getEnableAiAssistant',
        'disable_us_form_fields' => 'getDisableUsFormFields',
        'is_hipaa' => 'getIsHipaa',
        'enable_budget_tracking' => 'getEnableBudgetTracking',
        'enable_funds_distribution' => 'getEnableFundsDistribution',
        'enable_us_bank_payment_blocks' => 'getEnableUsBankPaymentBlocks',
        'enable_financial_oversight' => 'getEnableFinancialOversight',
        'enable_financial_oversight_premium' => 'getEnableFinancialOversightPremium',
        'enable_reimbursements' => 'getEnableReimbursements',
        'enable_auto_labels' => 'getEnableAutoLabels',
        'enable_reviews' => 'getEnableReviews',
        'enable_single_round_review' => 'getEnableSingleRoundReview',
        'enable_multi_round_review' => 'getEnableMultiRoundReview',
        'enable_random_assignment' => 'getEnableRandomAssignment',
        'enable_group_assignment' => 'getEnableGroupAssignment',
        'enable_automated_review' => 'getEnableAutomatedReview',
        'enable_feedback_sharing' => 'getEnableFeedbackSharing',
        'enable_reports_link' => 'getEnableReportsLink',
        'enable_advanced_reporting' => 'getEnableAdvancedReporting',
        'enable_aggregate_statistics' => 'getEnableAggregateStatistics',
        'enable_pdf_export' => 'getEnablePdfExport',
        'enable_visitor_report' => 'getEnableVisitorReport',
        'enable_dashboard' => 'getEnableDashboard',
        'enable_api' => 'getEnableApi',
        'allow_api' => 'getAllowApi',
        'enable_read_write_api' => 'getEnableReadWriteApi',
        'enable_zapier_integration' => 'getEnableZapierIntegration',
        'enable_google_sign_in' => 'getEnableGoogleSignIn',
        'enable_facebook_sign_in' => 'getEnableFacebookSignIn',
        'enable_social_media_buttons' => 'getEnableSocialMediaButtons',
        'disable_submission_emails' => 'getDisableSubmissionEmails',
        'disable_create_account_emails' => 'getDisableCreateAccountEmails',
        'enable_us_bank_check_payment' => 'getEnableUsBankCheckPayment',
        'enable_us_bank_ach_payment' => 'getEnableUsBankAchPayment',
        'enable_us_bank_prepaid_card_payment' => 'getEnableUsBankPrepaidCardPayment',
        'is_azure' => 'getIsAzure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('legacy_organization_id', $data ?? [], null);
        $this->setIfExists('enable_eligibility_forms', $data ?? [], null);
        $this->setIfExists('enable_additional_forms', $data ?? [], null);
        $this->setIfExists('enable_reference_forms', $data ?? [], null);
        $this->setIfExists('enable_new_internal_forms', $data ?? [], null);
        $this->setIfExists('allow_reviews', $data ?? [], null);
        $this->setIfExists('enable_form_tables', $data ?? [], null);
        $this->setIfExists('enable_large_select', $data ?? [], null);
        $this->setIfExists('num_form_fields', $data ?? [], null);
        $this->setIfExists('require_address', $data ?? [], null);
        $this->setIfExists('enable_address_validation', $data ?? [], null);
        $this->setIfExists('enable_short_answer_extended_validation', $data ?? [], null);
        $this->setIfExists('enable_form_logic', $data ?? [], null);
        $this->setIfExists('enable_charity_check', $data ?? [], null);
        $this->setIfExists('enable_collaborative_drafts', $data ?? [], null);
        $this->setIfExists('enable_docusign_integration', $data ?? [], null);
        $this->setIfExists('enable_google_analytics', $data ?? [], null);
        $this->setIfExists('enable_international_phone', $data ?? [], null);
        $this->setIfExists('enable_idv_fraud_prevention', $data ?? [], null);
        $this->setIfExists('enable_kba_fraud_prevention', $data ?? [], null);
        $this->setIfExists('enable_transunion_kba', $data ?? [], null);
        $this->setIfExists('enable_limit_multiple_submissions', $data ?? [], null);
        $this->setIfExists('enable_localize_js', $data ?? [], null);
        $this->setIfExists('enable_manual_submissions', $data ?? [], null);
        $this->setIfExists('enable_messaging', $data ?? [], null);
        $this->setIfExists('enable_message_drafts', $data ?? [], null);
        $this->setIfExists('enable_new_public_gallery', $data ?? [], null);
        $this->setIfExists('enable_reminders', $data ?? [], null);
        $this->setIfExists('enable_responsive_public_forms', $data ?? [], null);
        $this->setIfExists('enable_new_payment_options', $data ?? [], null);
        $this->setIfExists('enable_stripe_subscription', $data ?? [], null);
        $this->setIfExists('enable_terms', $data ?? [], null);
        $this->setIfExists('enable_validated_public_voting', $data ?? [], null);
        $this->setIfExists('enable_video_transcoding', $data ?? [], null);
        $this->setIfExists('enable_data_platform', $data ?? [], null);
        $this->setIfExists('enable_calendar', $data ?? [], null);
        $this->setIfExists('enable_salesforce_integration', $data ?? [], null);
        $this->setIfExists('enable_request_forms', $data ?? [], null);
        $this->setIfExists('enable_ratings', $data ?? [], null);
        $this->setIfExists('enable_multi_file_docs_preview', $data ?? [], null);
        $this->setIfExists('enable_price_options', $data ?? [], null);
        $this->setIfExists('enable_payment_addons', $data ?? [], null);
        $this->setIfExists('apply_sub_fees_to_subscription', $data ?? [], null);
        $this->setIfExists('enable_new_assignments', $data ?? [], null);
        $this->setIfExists('enable_level_three_view_scores', $data ?? [], null);
        $this->setIfExists('enable_discover', $data ?? [], null);
        $this->setIfExists('enable_new_submission_details', $data ?? [], null);
        $this->setIfExists('enable_new_additional_forms', $data ?? [], null);
        $this->setIfExists('enable_new_submission_actions', $data ?? [], null);
        $this->setIfExists('enable_submitter_notes', $data ?? [], null);
        $this->setIfExists('allow_request_edit', $data ?? [], null);
        $this->setIfExists('enable_new_initial_forms', $data ?? [], null);
        $this->setIfExists('enable_self_service_submission_limits', $data ?? [], null);
        $this->setIfExists('should_track_submissions_monthly', $data ?? [], null);
        $this->setIfExists('enable_foreign_currency', $data ?? [], null);
        $this->setIfExists('stripe_enabled', $data ?? [], null);
        $this->setIfExists('enable_document_import', $data ?? [], null);
        $this->setIfExists('enable_ai_assistant', $data ?? [], null);
        $this->setIfExists('disable_us_form_fields', $data ?? [], null);
        $this->setIfExists('is_hipaa', $data ?? [], null);
        $this->setIfExists('enable_budget_tracking', $data ?? [], null);
        $this->setIfExists('enable_funds_distribution', $data ?? [], null);
        $this->setIfExists('enable_us_bank_payment_blocks', $data ?? [], null);
        $this->setIfExists('enable_financial_oversight', $data ?? [], null);
        $this->setIfExists('enable_financial_oversight_premium', $data ?? [], null);
        $this->setIfExists('enable_reimbursements', $data ?? [], null);
        $this->setIfExists('enable_auto_labels', $data ?? [], null);
        $this->setIfExists('enable_reviews', $data ?? [], null);
        $this->setIfExists('enable_single_round_review', $data ?? [], null);
        $this->setIfExists('enable_multi_round_review', $data ?? [], null);
        $this->setIfExists('enable_random_assignment', $data ?? [], null);
        $this->setIfExists('enable_group_assignment', $data ?? [], null);
        $this->setIfExists('enable_automated_review', $data ?? [], null);
        $this->setIfExists('enable_feedback_sharing', $data ?? [], null);
        $this->setIfExists('enable_reports_link', $data ?? [], null);
        $this->setIfExists('enable_advanced_reporting', $data ?? [], null);
        $this->setIfExists('enable_aggregate_statistics', $data ?? [], null);
        $this->setIfExists('enable_pdf_export', $data ?? [], null);
        $this->setIfExists('enable_visitor_report', $data ?? [], null);
        $this->setIfExists('enable_dashboard', $data ?? [], null);
        $this->setIfExists('enable_api', $data ?? [], null);
        $this->setIfExists('allow_api', $data ?? [], null);
        $this->setIfExists('enable_read_write_api', $data ?? [], null);
        $this->setIfExists('enable_zapier_integration', $data ?? [], null);
        $this->setIfExists('enable_google_sign_in', $data ?? [], null);
        $this->setIfExists('enable_facebook_sign_in', $data ?? [], null);
        $this->setIfExists('enable_social_media_buttons', $data ?? [], null);
        $this->setIfExists('disable_submission_emails', $data ?? [], null);
        $this->setIfExists('disable_create_account_emails', $data ?? [], null);
        $this->setIfExists('enable_us_bank_check_payment', $data ?? [], null);
        $this->setIfExists('enable_us_bank_ach_payment', $data ?? [], null);
        $this->setIfExists('enable_us_bank_prepaid_card_payment', $data ?? [], null);
        $this->setIfExists('is_azure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets legacy_organization_id
     *
     * @return string|null
     */
    public function getLegacyOrganizationId()
    {
        return $this->container['legacy_organization_id'];
    }

    /**
     * Sets legacy_organization_id
     *
     * @param string|null $legacy_organization_id legacy_organization_id
     *
     * @return self
     */
    public function setLegacyOrganizationId($legacy_organization_id)
    {
        if (is_null($legacy_organization_id)) {
            array_push($this->openAPINullablesSetToNull, 'legacy_organization_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacy_organization_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legacy_organization_id'] = $legacy_organization_id;

        return $this;
    }

    /**
     * Gets enable_eligibility_forms
     *
     * @return bool|null
     */
    public function getEnableEligibilityForms()
    {
        return $this->container['enable_eligibility_forms'];
    }

    /**
     * Sets enable_eligibility_forms
     *
     * @param bool|null $enable_eligibility_forms enable_eligibility_forms
     *
     * @return self
     */
    public function setEnableEligibilityForms($enable_eligibility_forms)
    {
        if (is_null($enable_eligibility_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_eligibility_forms cannot be null');
        }
        $this->container['enable_eligibility_forms'] = $enable_eligibility_forms;

        return $this;
    }

    /**
     * Gets enable_additional_forms
     *
     * @return bool|null
     */
    public function getEnableAdditionalForms()
    {
        return $this->container['enable_additional_forms'];
    }

    /**
     * Sets enable_additional_forms
     *
     * @param bool|null $enable_additional_forms enable_additional_forms
     *
     * @return self
     */
    public function setEnableAdditionalForms($enable_additional_forms)
    {
        if (is_null($enable_additional_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_additional_forms cannot be null');
        }
        $this->container['enable_additional_forms'] = $enable_additional_forms;

        return $this;
    }

    /**
     * Gets enable_reference_forms
     *
     * @return bool|null
     */
    public function getEnableReferenceForms()
    {
        return $this->container['enable_reference_forms'];
    }

    /**
     * Sets enable_reference_forms
     *
     * @param bool|null $enable_reference_forms enable_reference_forms
     *
     * @return self
     */
    public function setEnableReferenceForms($enable_reference_forms)
    {
        if (is_null($enable_reference_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_reference_forms cannot be null');
        }
        $this->container['enable_reference_forms'] = $enable_reference_forms;

        return $this;
    }

    /**
     * Gets enable_new_internal_forms
     *
     * @return bool|null
     */
    public function getEnableNewInternalForms()
    {
        return $this->container['enable_new_internal_forms'];
    }

    /**
     * Sets enable_new_internal_forms
     *
     * @param bool|null $enable_new_internal_forms enable_new_internal_forms
     *
     * @return self
     */
    public function setEnableNewInternalForms($enable_new_internal_forms)
    {
        if (is_null($enable_new_internal_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_new_internal_forms cannot be null');
        }
        $this->container['enable_new_internal_forms'] = $enable_new_internal_forms;

        return $this;
    }

    /**
     * Gets allow_reviews
     *
     * @return bool|null
     */
    public function getAllowReviews()
    {
        return $this->container['allow_reviews'];
    }

    /**
     * Sets allow_reviews
     *
     * @param bool|null $allow_reviews allow_reviews
     *
     * @return self
     */
    public function setAllowReviews($allow_reviews)
    {
        if (is_null($allow_reviews)) {
            throw new \InvalidArgumentException('non-nullable allow_reviews cannot be null');
        }
        $this->container['allow_reviews'] = $allow_reviews;

        return $this;
    }

    /**
     * Gets enable_form_tables
     *
     * @return bool|null
     */
    public function getEnableFormTables()
    {
        return $this->container['enable_form_tables'];
    }

    /**
     * Sets enable_form_tables
     *
     * @param bool|null $enable_form_tables enable_form_tables
     *
     * @return self
     */
    public function setEnableFormTables($enable_form_tables)
    {
        if (is_null($enable_form_tables)) {
            throw new \InvalidArgumentException('non-nullable enable_form_tables cannot be null');
        }
        $this->container['enable_form_tables'] = $enable_form_tables;

        return $this;
    }

    /**
     * Gets enable_large_select
     *
     * @return bool|null
     */
    public function getEnableLargeSelect()
    {
        return $this->container['enable_large_select'];
    }

    /**
     * Sets enable_large_select
     *
     * @param bool|null $enable_large_select enable_large_select
     *
     * @return self
     */
    public function setEnableLargeSelect($enable_large_select)
    {
        if (is_null($enable_large_select)) {
            throw new \InvalidArgumentException('non-nullable enable_large_select cannot be null');
        }
        $this->container['enable_large_select'] = $enable_large_select;

        return $this;
    }

    /**
     * Gets num_form_fields
     *
     * @return int|null
     */
    public function getNumFormFields()
    {
        return $this->container['num_form_fields'];
    }

    /**
     * Sets num_form_fields
     *
     * @param int|null $num_form_fields num_form_fields
     *
     * @return self
     */
    public function setNumFormFields($num_form_fields)
    {
        if (is_null($num_form_fields)) {
            throw new \InvalidArgumentException('non-nullable num_form_fields cannot be null');
        }
        $this->container['num_form_fields'] = $num_form_fields;

        return $this;
    }

    /**
     * Gets require_address
     *
     * @return bool|null
     */
    public function getRequireAddress()
    {
        return $this->container['require_address'];
    }

    /**
     * Sets require_address
     *
     * @param bool|null $require_address require_address
     *
     * @return self
     */
    public function setRequireAddress($require_address)
    {
        if (is_null($require_address)) {
            throw new \InvalidArgumentException('non-nullable require_address cannot be null');
        }
        $this->container['require_address'] = $require_address;

        return $this;
    }

    /**
     * Gets enable_address_validation
     *
     * @return bool|null
     */
    public function getEnableAddressValidation()
    {
        return $this->container['enable_address_validation'];
    }

    /**
     * Sets enable_address_validation
     *
     * @param bool|null $enable_address_validation enable_address_validation
     *
     * @return self
     */
    public function setEnableAddressValidation($enable_address_validation)
    {
        if (is_null($enable_address_validation)) {
            throw new \InvalidArgumentException('non-nullable enable_address_validation cannot be null');
        }
        $this->container['enable_address_validation'] = $enable_address_validation;

        return $this;
    }

    /**
     * Gets enable_short_answer_extended_validation
     *
     * @return bool|null
     */
    public function getEnableShortAnswerExtendedValidation()
    {
        return $this->container['enable_short_answer_extended_validation'];
    }

    /**
     * Sets enable_short_answer_extended_validation
     *
     * @param bool|null $enable_short_answer_extended_validation enable_short_answer_extended_validation
     *
     * @return self
     */
    public function setEnableShortAnswerExtendedValidation($enable_short_answer_extended_validation)
    {
        if (is_null($enable_short_answer_extended_validation)) {
            throw new \InvalidArgumentException('non-nullable enable_short_answer_extended_validation cannot be null');
        }
        $this->container['enable_short_answer_extended_validation'] = $enable_short_answer_extended_validation;

        return $this;
    }

    /**
     * Gets enable_form_logic
     *
     * @return bool|null
     */
    public function getEnableFormLogic()
    {
        return $this->container['enable_form_logic'];
    }

    /**
     * Sets enable_form_logic
     *
     * @param bool|null $enable_form_logic enable_form_logic
     *
     * @return self
     */
    public function setEnableFormLogic($enable_form_logic)
    {
        if (is_null($enable_form_logic)) {
            throw new \InvalidArgumentException('non-nullable enable_form_logic cannot be null');
        }
        $this->container['enable_form_logic'] = $enable_form_logic;

        return $this;
    }

    /**
     * Gets enable_charity_check
     *
     * @return bool|null
     */
    public function getEnableCharityCheck()
    {
        return $this->container['enable_charity_check'];
    }

    /**
     * Sets enable_charity_check
     *
     * @param bool|null $enable_charity_check enable_charity_check
     *
     * @return self
     */
    public function setEnableCharityCheck($enable_charity_check)
    {
        if (is_null($enable_charity_check)) {
            throw new \InvalidArgumentException('non-nullable enable_charity_check cannot be null');
        }
        $this->container['enable_charity_check'] = $enable_charity_check;

        return $this;
    }

    /**
     * Gets enable_collaborative_drafts
     *
     * @return bool|null
     */
    public function getEnableCollaborativeDrafts()
    {
        return $this->container['enable_collaborative_drafts'];
    }

    /**
     * Sets enable_collaborative_drafts
     *
     * @param bool|null $enable_collaborative_drafts enable_collaborative_drafts
     *
     * @return self
     */
    public function setEnableCollaborativeDrafts($enable_collaborative_drafts)
    {
        if (is_null($enable_collaborative_drafts)) {
            throw new \InvalidArgumentException('non-nullable enable_collaborative_drafts cannot be null');
        }
        $this->container['enable_collaborative_drafts'] = $enable_collaborative_drafts;

        return $this;
    }

    /**
     * Gets enable_docusign_integration
     *
     * @return bool|null
     */
    public function getEnableDocusignIntegration()
    {
        return $this->container['enable_docusign_integration'];
    }

    /**
     * Sets enable_docusign_integration
     *
     * @param bool|null $enable_docusign_integration enable_docusign_integration
     *
     * @return self
     */
    public function setEnableDocusignIntegration($enable_docusign_integration)
    {
        if (is_null($enable_docusign_integration)) {
            throw new \InvalidArgumentException('non-nullable enable_docusign_integration cannot be null');
        }
        $this->container['enable_docusign_integration'] = $enable_docusign_integration;

        return $this;
    }

    /**
     * Gets enable_google_analytics
     *
     * @return bool|null
     */
    public function getEnableGoogleAnalytics()
    {
        return $this->container['enable_google_analytics'];
    }

    /**
     * Sets enable_google_analytics
     *
     * @param bool|null $enable_google_analytics enable_google_analytics
     *
     * @return self
     */
    public function setEnableGoogleAnalytics($enable_google_analytics)
    {
        if (is_null($enable_google_analytics)) {
            throw new \InvalidArgumentException('non-nullable enable_google_analytics cannot be null');
        }
        $this->container['enable_google_analytics'] = $enable_google_analytics;

        return $this;
    }

    /**
     * Gets enable_international_phone
     *
     * @return bool|null
     */
    public function getEnableInternationalPhone()
    {
        return $this->container['enable_international_phone'];
    }

    /**
     * Sets enable_international_phone
     *
     * @param bool|null $enable_international_phone enable_international_phone
     *
     * @return self
     */
    public function setEnableInternationalPhone($enable_international_phone)
    {
        if (is_null($enable_international_phone)) {
            throw new \InvalidArgumentException('non-nullable enable_international_phone cannot be null');
        }
        $this->container['enable_international_phone'] = $enable_international_phone;

        return $this;
    }

    /**
     * Gets enable_idv_fraud_prevention
     *
     * @return bool|null
     */
    public function getEnableIdvFraudPrevention()
    {
        return $this->container['enable_idv_fraud_prevention'];
    }

    /**
     * Sets enable_idv_fraud_prevention
     *
     * @param bool|null $enable_idv_fraud_prevention enable_idv_fraud_prevention
     *
     * @return self
     */
    public function setEnableIdvFraudPrevention($enable_idv_fraud_prevention)
    {
        if (is_null($enable_idv_fraud_prevention)) {
            throw new \InvalidArgumentException('non-nullable enable_idv_fraud_prevention cannot be null');
        }
        $this->container['enable_idv_fraud_prevention'] = $enable_idv_fraud_prevention;

        return $this;
    }

    /**
     * Gets enable_kba_fraud_prevention
     *
     * @return bool|null
     */
    public function getEnableKbaFraudPrevention()
    {
        return $this->container['enable_kba_fraud_prevention'];
    }

    /**
     * Sets enable_kba_fraud_prevention
     *
     * @param bool|null $enable_kba_fraud_prevention enable_kba_fraud_prevention
     *
     * @return self
     */
    public function setEnableKbaFraudPrevention($enable_kba_fraud_prevention)
    {
        if (is_null($enable_kba_fraud_prevention)) {
            throw new \InvalidArgumentException('non-nullable enable_kba_fraud_prevention cannot be null');
        }
        $this->container['enable_kba_fraud_prevention'] = $enable_kba_fraud_prevention;

        return $this;
    }

    /**
     * Gets enable_transunion_kba
     *
     * @return bool|null
     */
    public function getEnableTransunionKba()
    {
        return $this->container['enable_transunion_kba'];
    }

    /**
     * Sets enable_transunion_kba
     *
     * @param bool|null $enable_transunion_kba enable_transunion_kba
     *
     * @return self
     */
    public function setEnableTransunionKba($enable_transunion_kba)
    {
        if (is_null($enable_transunion_kba)) {
            throw new \InvalidArgumentException('non-nullable enable_transunion_kba cannot be null');
        }
        $this->container['enable_transunion_kba'] = $enable_transunion_kba;

        return $this;
    }

    /**
     * Gets enable_limit_multiple_submissions
     *
     * @return bool|null
     */
    public function getEnableLimitMultipleSubmissions()
    {
        return $this->container['enable_limit_multiple_submissions'];
    }

    /**
     * Sets enable_limit_multiple_submissions
     *
     * @param bool|null $enable_limit_multiple_submissions enable_limit_multiple_submissions
     *
     * @return self
     */
    public function setEnableLimitMultipleSubmissions($enable_limit_multiple_submissions)
    {
        if (is_null($enable_limit_multiple_submissions)) {
            throw new \InvalidArgumentException('non-nullable enable_limit_multiple_submissions cannot be null');
        }
        $this->container['enable_limit_multiple_submissions'] = $enable_limit_multiple_submissions;

        return $this;
    }

    /**
     * Gets enable_localize_js
     *
     * @return bool|null
     */
    public function getEnableLocalizeJs()
    {
        return $this->container['enable_localize_js'];
    }

    /**
     * Sets enable_localize_js
     *
     * @param bool|null $enable_localize_js enable_localize_js
     *
     * @return self
     */
    public function setEnableLocalizeJs($enable_localize_js)
    {
        if (is_null($enable_localize_js)) {
            throw new \InvalidArgumentException('non-nullable enable_localize_js cannot be null');
        }
        $this->container['enable_localize_js'] = $enable_localize_js;

        return $this;
    }

    /**
     * Gets enable_manual_submissions
     *
     * @return bool|null
     */
    public function getEnableManualSubmissions()
    {
        return $this->container['enable_manual_submissions'];
    }

    /**
     * Sets enable_manual_submissions
     *
     * @param bool|null $enable_manual_submissions enable_manual_submissions
     *
     * @return self
     */
    public function setEnableManualSubmissions($enable_manual_submissions)
    {
        if (is_null($enable_manual_submissions)) {
            throw new \InvalidArgumentException('non-nullable enable_manual_submissions cannot be null');
        }
        $this->container['enable_manual_submissions'] = $enable_manual_submissions;

        return $this;
    }

    /**
     * Gets enable_messaging
     *
     * @return bool|null
     */
    public function getEnableMessaging()
    {
        return $this->container['enable_messaging'];
    }

    /**
     * Sets enable_messaging
     *
     * @param bool|null $enable_messaging enable_messaging
     *
     * @return self
     */
    public function setEnableMessaging($enable_messaging)
    {
        if (is_null($enable_messaging)) {
            throw new \InvalidArgumentException('non-nullable enable_messaging cannot be null');
        }
        $this->container['enable_messaging'] = $enable_messaging;

        return $this;
    }

    /**
     * Gets enable_message_drafts
     *
     * @return bool|null
     */
    public function getEnableMessageDrafts()
    {
        return $this->container['enable_message_drafts'];
    }

    /**
     * Sets enable_message_drafts
     *
     * @param bool|null $enable_message_drafts enable_message_drafts
     *
     * @return self
     */
    public function setEnableMessageDrafts($enable_message_drafts)
    {
        if (is_null($enable_message_drafts)) {
            throw new \InvalidArgumentException('non-nullable enable_message_drafts cannot be null');
        }
        $this->container['enable_message_drafts'] = $enable_message_drafts;

        return $this;
    }

    /**
     * Gets enable_new_public_gallery
     *
     * @return bool|null
     */
    public function getEnableNewPublicGallery()
    {
        return $this->container['enable_new_public_gallery'];
    }

    /**
     * Sets enable_new_public_gallery
     *
     * @param bool|null $enable_new_public_gallery enable_new_public_gallery
     *
     * @return self
     */
    public function setEnableNewPublicGallery($enable_new_public_gallery)
    {
        if (is_null($enable_new_public_gallery)) {
            throw new \InvalidArgumentException('non-nullable enable_new_public_gallery cannot be null');
        }
        $this->container['enable_new_public_gallery'] = $enable_new_public_gallery;

        return $this;
    }

    /**
     * Gets enable_reminders
     *
     * @return bool|null
     */
    public function getEnableReminders()
    {
        return $this->container['enable_reminders'];
    }

    /**
     * Sets enable_reminders
     *
     * @param bool|null $enable_reminders enable_reminders
     *
     * @return self
     */
    public function setEnableReminders($enable_reminders)
    {
        if (is_null($enable_reminders)) {
            throw new \InvalidArgumentException('non-nullable enable_reminders cannot be null');
        }
        $this->container['enable_reminders'] = $enable_reminders;

        return $this;
    }

    /**
     * Gets enable_responsive_public_forms
     *
     * @return bool|null
     */
    public function getEnableResponsivePublicForms()
    {
        return $this->container['enable_responsive_public_forms'];
    }

    /**
     * Sets enable_responsive_public_forms
     *
     * @param bool|null $enable_responsive_public_forms enable_responsive_public_forms
     *
     * @return self
     */
    public function setEnableResponsivePublicForms($enable_responsive_public_forms)
    {
        if (is_null($enable_responsive_public_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_responsive_public_forms cannot be null');
        }
        $this->container['enable_responsive_public_forms'] = $enable_responsive_public_forms;

        return $this;
    }

    /**
     * Gets enable_new_payment_options
     *
     * @return bool|null
     */
    public function getEnableNewPaymentOptions()
    {
        return $this->container['enable_new_payment_options'];
    }

    /**
     * Sets enable_new_payment_options
     *
     * @param bool|null $enable_new_payment_options enable_new_payment_options
     *
     * @return self
     */
    public function setEnableNewPaymentOptions($enable_new_payment_options)
    {
        if (is_null($enable_new_payment_options)) {
            throw new \InvalidArgumentException('non-nullable enable_new_payment_options cannot be null');
        }
        $this->container['enable_new_payment_options'] = $enable_new_payment_options;

        return $this;
    }

    /**
     * Gets enable_stripe_subscription
     *
     * @return bool|null
     */
    public function getEnableStripeSubscription()
    {
        return $this->container['enable_stripe_subscription'];
    }

    /**
     * Sets enable_stripe_subscription
     *
     * @param bool|null $enable_stripe_subscription enable_stripe_subscription
     *
     * @return self
     */
    public function setEnableStripeSubscription($enable_stripe_subscription)
    {
        if (is_null($enable_stripe_subscription)) {
            throw new \InvalidArgumentException('non-nullable enable_stripe_subscription cannot be null');
        }
        $this->container['enable_stripe_subscription'] = $enable_stripe_subscription;

        return $this;
    }

    /**
     * Gets enable_terms
     *
     * @return bool|null
     */
    public function getEnableTerms()
    {
        return $this->container['enable_terms'];
    }

    /**
     * Sets enable_terms
     *
     * @param bool|null $enable_terms enable_terms
     *
     * @return self
     */
    public function setEnableTerms($enable_terms)
    {
        if (is_null($enable_terms)) {
            throw new \InvalidArgumentException('non-nullable enable_terms cannot be null');
        }
        $this->container['enable_terms'] = $enable_terms;

        return $this;
    }

    /**
     * Gets enable_validated_public_voting
     *
     * @return bool|null
     */
    public function getEnableValidatedPublicVoting()
    {
        return $this->container['enable_validated_public_voting'];
    }

    /**
     * Sets enable_validated_public_voting
     *
     * @param bool|null $enable_validated_public_voting enable_validated_public_voting
     *
     * @return self
     */
    public function setEnableValidatedPublicVoting($enable_validated_public_voting)
    {
        if (is_null($enable_validated_public_voting)) {
            throw new \InvalidArgumentException('non-nullable enable_validated_public_voting cannot be null');
        }
        $this->container['enable_validated_public_voting'] = $enable_validated_public_voting;

        return $this;
    }

    /**
     * Gets enable_video_transcoding
     *
     * @return bool|null
     */
    public function getEnableVideoTranscoding()
    {
        return $this->container['enable_video_transcoding'];
    }

    /**
     * Sets enable_video_transcoding
     *
     * @param bool|null $enable_video_transcoding enable_video_transcoding
     *
     * @return self
     */
    public function setEnableVideoTranscoding($enable_video_transcoding)
    {
        if (is_null($enable_video_transcoding)) {
            throw new \InvalidArgumentException('non-nullable enable_video_transcoding cannot be null');
        }
        $this->container['enable_video_transcoding'] = $enable_video_transcoding;

        return $this;
    }

    /**
     * Gets enable_data_platform
     *
     * @return bool|null
     */
    public function getEnableDataPlatform()
    {
        return $this->container['enable_data_platform'];
    }

    /**
     * Sets enable_data_platform
     *
     * @param bool|null $enable_data_platform enable_data_platform
     *
     * @return self
     */
    public function setEnableDataPlatform($enable_data_platform)
    {
        if (is_null($enable_data_platform)) {
            throw new \InvalidArgumentException('non-nullable enable_data_platform cannot be null');
        }
        $this->container['enable_data_platform'] = $enable_data_platform;

        return $this;
    }

    /**
     * Gets enable_calendar
     *
     * @return bool|null
     */
    public function getEnableCalendar()
    {
        return $this->container['enable_calendar'];
    }

    /**
     * Sets enable_calendar
     *
     * @param bool|null $enable_calendar enable_calendar
     *
     * @return self
     */
    public function setEnableCalendar($enable_calendar)
    {
        if (is_null($enable_calendar)) {
            throw new \InvalidArgumentException('non-nullable enable_calendar cannot be null');
        }
        $this->container['enable_calendar'] = $enable_calendar;

        return $this;
    }

    /**
     * Gets enable_salesforce_integration
     *
     * @return bool|null
     */
    public function getEnableSalesforceIntegration()
    {
        return $this->container['enable_salesforce_integration'];
    }

    /**
     * Sets enable_salesforce_integration
     *
     * @param bool|null $enable_salesforce_integration enable_salesforce_integration
     *
     * @return self
     */
    public function setEnableSalesforceIntegration($enable_salesforce_integration)
    {
        if (is_null($enable_salesforce_integration)) {
            throw new \InvalidArgumentException('non-nullable enable_salesforce_integration cannot be null');
        }
        $this->container['enable_salesforce_integration'] = $enable_salesforce_integration;

        return $this;
    }

    /**
     * Gets enable_request_forms
     *
     * @return bool|null
     */
    public function getEnableRequestForms()
    {
        return $this->container['enable_request_forms'];
    }

    /**
     * Sets enable_request_forms
     *
     * @param bool|null $enable_request_forms enable_request_forms
     *
     * @return self
     */
    public function setEnableRequestForms($enable_request_forms)
    {
        if (is_null($enable_request_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_request_forms cannot be null');
        }
        $this->container['enable_request_forms'] = $enable_request_forms;

        return $this;
    }

    /**
     * Gets enable_ratings
     *
     * @return bool|null
     */
    public function getEnableRatings()
    {
        return $this->container['enable_ratings'];
    }

    /**
     * Sets enable_ratings
     *
     * @param bool|null $enable_ratings enable_ratings
     *
     * @return self
     */
    public function setEnableRatings($enable_ratings)
    {
        if (is_null($enable_ratings)) {
            throw new \InvalidArgumentException('non-nullable enable_ratings cannot be null');
        }
        $this->container['enable_ratings'] = $enable_ratings;

        return $this;
    }

    /**
     * Gets enable_multi_file_docs_preview
     *
     * @return bool|null
     */
    public function getEnableMultiFileDocsPreview()
    {
        return $this->container['enable_multi_file_docs_preview'];
    }

    /**
     * Sets enable_multi_file_docs_preview
     *
     * @param bool|null $enable_multi_file_docs_preview enable_multi_file_docs_preview
     *
     * @return self
     */
    public function setEnableMultiFileDocsPreview($enable_multi_file_docs_preview)
    {
        if (is_null($enable_multi_file_docs_preview)) {
            throw new \InvalidArgumentException('non-nullable enable_multi_file_docs_preview cannot be null');
        }
        $this->container['enable_multi_file_docs_preview'] = $enable_multi_file_docs_preview;

        return $this;
    }

    /**
     * Gets enable_price_options
     *
     * @return bool|null
     */
    public function getEnablePriceOptions()
    {
        return $this->container['enable_price_options'];
    }

    /**
     * Sets enable_price_options
     *
     * @param bool|null $enable_price_options enable_price_options
     *
     * @return self
     */
    public function setEnablePriceOptions($enable_price_options)
    {
        if (is_null($enable_price_options)) {
            throw new \InvalidArgumentException('non-nullable enable_price_options cannot be null');
        }
        $this->container['enable_price_options'] = $enable_price_options;

        return $this;
    }

    /**
     * Gets enable_payment_addons
     *
     * @return bool|null
     */
    public function getEnablePaymentAddons()
    {
        return $this->container['enable_payment_addons'];
    }

    /**
     * Sets enable_payment_addons
     *
     * @param bool|null $enable_payment_addons enable_payment_addons
     *
     * @return self
     */
    public function setEnablePaymentAddons($enable_payment_addons)
    {
        if (is_null($enable_payment_addons)) {
            throw new \InvalidArgumentException('non-nullable enable_payment_addons cannot be null');
        }
        $this->container['enable_payment_addons'] = $enable_payment_addons;

        return $this;
    }

    /**
     * Gets apply_sub_fees_to_subscription
     *
     * @return bool|null
     */
    public function getApplySubFeesToSubscription()
    {
        return $this->container['apply_sub_fees_to_subscription'];
    }

    /**
     * Sets apply_sub_fees_to_subscription
     *
     * @param bool|null $apply_sub_fees_to_subscription apply_sub_fees_to_subscription
     *
     * @return self
     */
    public function setApplySubFeesToSubscription($apply_sub_fees_to_subscription)
    {
        if (is_null($apply_sub_fees_to_subscription)) {
            throw new \InvalidArgumentException('non-nullable apply_sub_fees_to_subscription cannot be null');
        }
        $this->container['apply_sub_fees_to_subscription'] = $apply_sub_fees_to_subscription;

        return $this;
    }

    /**
     * Gets enable_new_assignments
     *
     * @return bool|null
     */
    public function getEnableNewAssignments()
    {
        return $this->container['enable_new_assignments'];
    }

    /**
     * Sets enable_new_assignments
     *
     * @param bool|null $enable_new_assignments enable_new_assignments
     *
     * @return self
     */
    public function setEnableNewAssignments($enable_new_assignments)
    {
        if (is_null($enable_new_assignments)) {
            throw new \InvalidArgumentException('non-nullable enable_new_assignments cannot be null');
        }
        $this->container['enable_new_assignments'] = $enable_new_assignments;

        return $this;
    }

    /**
     * Gets enable_level_three_view_scores
     *
     * @return bool|null
     */
    public function getEnableLevelThreeViewScores()
    {
        return $this->container['enable_level_three_view_scores'];
    }

    /**
     * Sets enable_level_three_view_scores
     *
     * @param bool|null $enable_level_three_view_scores enable_level_three_view_scores
     *
     * @return self
     */
    public function setEnableLevelThreeViewScores($enable_level_three_view_scores)
    {
        if (is_null($enable_level_three_view_scores)) {
            throw new \InvalidArgumentException('non-nullable enable_level_three_view_scores cannot be null');
        }
        $this->container['enable_level_three_view_scores'] = $enable_level_three_view_scores;

        return $this;
    }

    /**
     * Gets enable_discover
     *
     * @return bool|null
     */
    public function getEnableDiscover()
    {
        return $this->container['enable_discover'];
    }

    /**
     * Sets enable_discover
     *
     * @param bool|null $enable_discover enable_discover
     *
     * @return self
     */
    public function setEnableDiscover($enable_discover)
    {
        if (is_null($enable_discover)) {
            throw new \InvalidArgumentException('non-nullable enable_discover cannot be null');
        }
        $this->container['enable_discover'] = $enable_discover;

        return $this;
    }

    /**
     * Gets enable_new_submission_details
     *
     * @return bool|null
     */
    public function getEnableNewSubmissionDetails()
    {
        return $this->container['enable_new_submission_details'];
    }

    /**
     * Sets enable_new_submission_details
     *
     * @param bool|null $enable_new_submission_details enable_new_submission_details
     *
     * @return self
     */
    public function setEnableNewSubmissionDetails($enable_new_submission_details)
    {
        if (is_null($enable_new_submission_details)) {
            throw new \InvalidArgumentException('non-nullable enable_new_submission_details cannot be null');
        }
        $this->container['enable_new_submission_details'] = $enable_new_submission_details;

        return $this;
    }

    /**
     * Gets enable_new_additional_forms
     *
     * @return bool|null
     */
    public function getEnableNewAdditionalForms()
    {
        return $this->container['enable_new_additional_forms'];
    }

    /**
     * Sets enable_new_additional_forms
     *
     * @param bool|null $enable_new_additional_forms enable_new_additional_forms
     *
     * @return self
     */
    public function setEnableNewAdditionalForms($enable_new_additional_forms)
    {
        if (is_null($enable_new_additional_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_new_additional_forms cannot be null');
        }
        $this->container['enable_new_additional_forms'] = $enable_new_additional_forms;

        return $this;
    }

    /**
     * Gets enable_new_submission_actions
     *
     * @return bool|null
     */
    public function getEnableNewSubmissionActions()
    {
        return $this->container['enable_new_submission_actions'];
    }

    /**
     * Sets enable_new_submission_actions
     *
     * @param bool|null $enable_new_submission_actions enable_new_submission_actions
     *
     * @return self
     */
    public function setEnableNewSubmissionActions($enable_new_submission_actions)
    {
        if (is_null($enable_new_submission_actions)) {
            throw new \InvalidArgumentException('non-nullable enable_new_submission_actions cannot be null');
        }
        $this->container['enable_new_submission_actions'] = $enable_new_submission_actions;

        return $this;
    }

    /**
     * Gets enable_submitter_notes
     *
     * @return bool|null
     */
    public function getEnableSubmitterNotes()
    {
        return $this->container['enable_submitter_notes'];
    }

    /**
     * Sets enable_submitter_notes
     *
     * @param bool|null $enable_submitter_notes enable_submitter_notes
     *
     * @return self
     */
    public function setEnableSubmitterNotes($enable_submitter_notes)
    {
        if (is_null($enable_submitter_notes)) {
            throw new \InvalidArgumentException('non-nullable enable_submitter_notes cannot be null');
        }
        $this->container['enable_submitter_notes'] = $enable_submitter_notes;

        return $this;
    }

    /**
     * Gets allow_request_edit
     *
     * @return bool|null
     */
    public function getAllowRequestEdit()
    {
        return $this->container['allow_request_edit'];
    }

    /**
     * Sets allow_request_edit
     *
     * @param bool|null $allow_request_edit allow_request_edit
     *
     * @return self
     */
    public function setAllowRequestEdit($allow_request_edit)
    {
        if (is_null($allow_request_edit)) {
            throw new \InvalidArgumentException('non-nullable allow_request_edit cannot be null');
        }
        $this->container['allow_request_edit'] = $allow_request_edit;

        return $this;
    }

    /**
     * Gets enable_new_initial_forms
     *
     * @return bool|null
     */
    public function getEnableNewInitialForms()
    {
        return $this->container['enable_new_initial_forms'];
    }

    /**
     * Sets enable_new_initial_forms
     *
     * @param bool|null $enable_new_initial_forms enable_new_initial_forms
     *
     * @return self
     */
    public function setEnableNewInitialForms($enable_new_initial_forms)
    {
        if (is_null($enable_new_initial_forms)) {
            throw new \InvalidArgumentException('non-nullable enable_new_initial_forms cannot be null');
        }
        $this->container['enable_new_initial_forms'] = $enable_new_initial_forms;

        return $this;
    }

    /**
     * Gets enable_self_service_submission_limits
     *
     * @return bool|null
     */
    public function getEnableSelfServiceSubmissionLimits()
    {
        return $this->container['enable_self_service_submission_limits'];
    }

    /**
     * Sets enable_self_service_submission_limits
     *
     * @param bool|null $enable_self_service_submission_limits enable_self_service_submission_limits
     *
     * @return self
     */
    public function setEnableSelfServiceSubmissionLimits($enable_self_service_submission_limits)
    {
        if (is_null($enable_self_service_submission_limits)) {
            throw new \InvalidArgumentException('non-nullable enable_self_service_submission_limits cannot be null');
        }
        $this->container['enable_self_service_submission_limits'] = $enable_self_service_submission_limits;

        return $this;
    }

    /**
     * Gets should_track_submissions_monthly
     *
     * @return bool|null
     */
    public function getShouldTrackSubmissionsMonthly()
    {
        return $this->container['should_track_submissions_monthly'];
    }

    /**
     * Sets should_track_submissions_monthly
     *
     * @param bool|null $should_track_submissions_monthly should_track_submissions_monthly
     *
     * @return self
     */
    public function setShouldTrackSubmissionsMonthly($should_track_submissions_monthly)
    {
        if (is_null($should_track_submissions_monthly)) {
            throw new \InvalidArgumentException('non-nullable should_track_submissions_monthly cannot be null');
        }
        $this->container['should_track_submissions_monthly'] = $should_track_submissions_monthly;

        return $this;
    }

    /**
     * Gets enable_foreign_currency
     *
     * @return bool|null
     */
    public function getEnableForeignCurrency()
    {
        return $this->container['enable_foreign_currency'];
    }

    /**
     * Sets enable_foreign_currency
     *
     * @param bool|null $enable_foreign_currency enable_foreign_currency
     *
     * @return self
     */
    public function setEnableForeignCurrency($enable_foreign_currency)
    {
        if (is_null($enable_foreign_currency)) {
            throw new \InvalidArgumentException('non-nullable enable_foreign_currency cannot be null');
        }
        $this->container['enable_foreign_currency'] = $enable_foreign_currency;

        return $this;
    }

    /**
     * Gets stripe_enabled
     *
     * @return bool|null
     */
    public function getStripeEnabled()
    {
        return $this->container['stripe_enabled'];
    }

    /**
     * Sets stripe_enabled
     *
     * @param bool|null $stripe_enabled stripe_enabled
     *
     * @return self
     */
    public function setStripeEnabled($stripe_enabled)
    {
        if (is_null($stripe_enabled)) {
            throw new \InvalidArgumentException('non-nullable stripe_enabled cannot be null');
        }
        $this->container['stripe_enabled'] = $stripe_enabled;

        return $this;
    }

    /**
     * Gets enable_document_import
     *
     * @return bool|null
     */
    public function getEnableDocumentImport()
    {
        return $this->container['enable_document_import'];
    }

    /**
     * Sets enable_document_import
     *
     * @param bool|null $enable_document_import enable_document_import
     *
     * @return self
     */
    public function setEnableDocumentImport($enable_document_import)
    {
        if (is_null($enable_document_import)) {
            throw new \InvalidArgumentException('non-nullable enable_document_import cannot be null');
        }
        $this->container['enable_document_import'] = $enable_document_import;

        return $this;
    }

    /**
     * Gets enable_ai_assistant
     *
     * @return bool|null
     */
    public function getEnableAiAssistant()
    {
        return $this->container['enable_ai_assistant'];
    }

    /**
     * Sets enable_ai_assistant
     *
     * @param bool|null $enable_ai_assistant enable_ai_assistant
     *
     * @return self
     */
    public function setEnableAiAssistant($enable_ai_assistant)
    {
        if (is_null($enable_ai_assistant)) {
            throw new \InvalidArgumentException('non-nullable enable_ai_assistant cannot be null');
        }
        $this->container['enable_ai_assistant'] = $enable_ai_assistant;

        return $this;
    }

    /**
     * Gets disable_us_form_fields
     *
     * @return bool|null
     */
    public function getDisableUsFormFields()
    {
        return $this->container['disable_us_form_fields'];
    }

    /**
     * Sets disable_us_form_fields
     *
     * @param bool|null $disable_us_form_fields disable_us_form_fields
     *
     * @return self
     */
    public function setDisableUsFormFields($disable_us_form_fields)
    {
        if (is_null($disable_us_form_fields)) {
            throw new \InvalidArgumentException('non-nullable disable_us_form_fields cannot be null');
        }
        $this->container['disable_us_form_fields'] = $disable_us_form_fields;

        return $this;
    }

    /**
     * Gets is_hipaa
     *
     * @return bool|null
     */
    public function getIsHipaa()
    {
        return $this->container['is_hipaa'];
    }

    /**
     * Sets is_hipaa
     *
     * @param bool|null $is_hipaa is_hipaa
     *
     * @return self
     */
    public function setIsHipaa($is_hipaa)
    {
        if (is_null($is_hipaa)) {
            throw new \InvalidArgumentException('non-nullable is_hipaa cannot be null');
        }
        $this->container['is_hipaa'] = $is_hipaa;

        return $this;
    }

    /**
     * Gets enable_budget_tracking
     *
     * @return bool|null
     */
    public function getEnableBudgetTracking()
    {
        return $this->container['enable_budget_tracking'];
    }

    /**
     * Sets enable_budget_tracking
     *
     * @param bool|null $enable_budget_tracking enable_budget_tracking
     *
     * @return self
     */
    public function setEnableBudgetTracking($enable_budget_tracking)
    {
        if (is_null($enable_budget_tracking)) {
            throw new \InvalidArgumentException('non-nullable enable_budget_tracking cannot be null');
        }
        $this->container['enable_budget_tracking'] = $enable_budget_tracking;

        return $this;
    }

    /**
     * Gets enable_funds_distribution
     *
     * @return bool|null
     */
    public function getEnableFundsDistribution()
    {
        return $this->container['enable_funds_distribution'];
    }

    /**
     * Sets enable_funds_distribution
     *
     * @param bool|null $enable_funds_distribution enable_funds_distribution
     *
     * @return self
     */
    public function setEnableFundsDistribution($enable_funds_distribution)
    {
        if (is_null($enable_funds_distribution)) {
            throw new \InvalidArgumentException('non-nullable enable_funds_distribution cannot be null');
        }
        $this->container['enable_funds_distribution'] = $enable_funds_distribution;

        return $this;
    }

    /**
     * Gets enable_us_bank_payment_blocks
     *
     * @return bool|null
     */
    public function getEnableUsBankPaymentBlocks()
    {
        return $this->container['enable_us_bank_payment_blocks'];
    }

    /**
     * Sets enable_us_bank_payment_blocks
     *
     * @param bool|null $enable_us_bank_payment_blocks enable_us_bank_payment_blocks
     *
     * @return self
     */
    public function setEnableUsBankPaymentBlocks($enable_us_bank_payment_blocks)
    {
        if (is_null($enable_us_bank_payment_blocks)) {
            throw new \InvalidArgumentException('non-nullable enable_us_bank_payment_blocks cannot be null');
        }
        $this->container['enable_us_bank_payment_blocks'] = $enable_us_bank_payment_blocks;

        return $this;
    }

    /**
     * Gets enable_financial_oversight
     *
     * @return bool|null
     */
    public function getEnableFinancialOversight()
    {
        return $this->container['enable_financial_oversight'];
    }

    /**
     * Sets enable_financial_oversight
     *
     * @param bool|null $enable_financial_oversight enable_financial_oversight
     *
     * @return self
     */
    public function setEnableFinancialOversight($enable_financial_oversight)
    {
        if (is_null($enable_financial_oversight)) {
            throw new \InvalidArgumentException('non-nullable enable_financial_oversight cannot be null');
        }
        $this->container['enable_financial_oversight'] = $enable_financial_oversight;

        return $this;
    }

    /**
     * Gets enable_financial_oversight_premium
     *
     * @return bool|null
     */
    public function getEnableFinancialOversightPremium()
    {
        return $this->container['enable_financial_oversight_premium'];
    }

    /**
     * Sets enable_financial_oversight_premium
     *
     * @param bool|null $enable_financial_oversight_premium enable_financial_oversight_premium
     *
     * @return self
     */
    public function setEnableFinancialOversightPremium($enable_financial_oversight_premium)
    {
        if (is_null($enable_financial_oversight_premium)) {
            throw new \InvalidArgumentException('non-nullable enable_financial_oversight_premium cannot be null');
        }
        $this->container['enable_financial_oversight_premium'] = $enable_financial_oversight_premium;

        return $this;
    }

    /**
     * Gets enable_reimbursements
     *
     * @return bool|null
     */
    public function getEnableReimbursements()
    {
        return $this->container['enable_reimbursements'];
    }

    /**
     * Sets enable_reimbursements
     *
     * @param bool|null $enable_reimbursements enable_reimbursements
     *
     * @return self
     */
    public function setEnableReimbursements($enable_reimbursements)
    {
        if (is_null($enable_reimbursements)) {
            throw new \InvalidArgumentException('non-nullable enable_reimbursements cannot be null');
        }
        $this->container['enable_reimbursements'] = $enable_reimbursements;

        return $this;
    }

    /**
     * Gets enable_auto_labels
     *
     * @return bool|null
     */
    public function getEnableAutoLabels()
    {
        return $this->container['enable_auto_labels'];
    }

    /**
     * Sets enable_auto_labels
     *
     * @param bool|null $enable_auto_labels enable_auto_labels
     *
     * @return self
     */
    public function setEnableAutoLabels($enable_auto_labels)
    {
        if (is_null($enable_auto_labels)) {
            throw new \InvalidArgumentException('non-nullable enable_auto_labels cannot be null');
        }
        $this->container['enable_auto_labels'] = $enable_auto_labels;

        return $this;
    }

    /**
     * Gets enable_reviews
     *
     * @return bool|null
     */
    public function getEnableReviews()
    {
        return $this->container['enable_reviews'];
    }

    /**
     * Sets enable_reviews
     *
     * @param bool|null $enable_reviews enable_reviews
     *
     * @return self
     */
    public function setEnableReviews($enable_reviews)
    {
        if (is_null($enable_reviews)) {
            throw new \InvalidArgumentException('non-nullable enable_reviews cannot be null');
        }
        $this->container['enable_reviews'] = $enable_reviews;

        return $this;
    }

    /**
     * Gets enable_single_round_review
     *
     * @return bool|null
     */
    public function getEnableSingleRoundReview()
    {
        return $this->container['enable_single_round_review'];
    }

    /**
     * Sets enable_single_round_review
     *
     * @param bool|null $enable_single_round_review enable_single_round_review
     *
     * @return self
     */
    public function setEnableSingleRoundReview($enable_single_round_review)
    {
        if (is_null($enable_single_round_review)) {
            throw new \InvalidArgumentException('non-nullable enable_single_round_review cannot be null');
        }
        $this->container['enable_single_round_review'] = $enable_single_round_review;

        return $this;
    }

    /**
     * Gets enable_multi_round_review
     *
     * @return bool|null
     */
    public function getEnableMultiRoundReview()
    {
        return $this->container['enable_multi_round_review'];
    }

    /**
     * Sets enable_multi_round_review
     *
     * @param bool|null $enable_multi_round_review enable_multi_round_review
     *
     * @return self
     */
    public function setEnableMultiRoundReview($enable_multi_round_review)
    {
        if (is_null($enable_multi_round_review)) {
            throw new \InvalidArgumentException('non-nullable enable_multi_round_review cannot be null');
        }
        $this->container['enable_multi_round_review'] = $enable_multi_round_review;

        return $this;
    }

    /**
     * Gets enable_random_assignment
     *
     * @return bool|null
     */
    public function getEnableRandomAssignment()
    {
        return $this->container['enable_random_assignment'];
    }

    /**
     * Sets enable_random_assignment
     *
     * @param bool|null $enable_random_assignment enable_random_assignment
     *
     * @return self
     */
    public function setEnableRandomAssignment($enable_random_assignment)
    {
        if (is_null($enable_random_assignment)) {
            throw new \InvalidArgumentException('non-nullable enable_random_assignment cannot be null');
        }
        $this->container['enable_random_assignment'] = $enable_random_assignment;

        return $this;
    }

    /**
     * Gets enable_group_assignment
     *
     * @return bool|null
     */
    public function getEnableGroupAssignment()
    {
        return $this->container['enable_group_assignment'];
    }

    /**
     * Sets enable_group_assignment
     *
     * @param bool|null $enable_group_assignment enable_group_assignment
     *
     * @return self
     */
    public function setEnableGroupAssignment($enable_group_assignment)
    {
        if (is_null($enable_group_assignment)) {
            throw new \InvalidArgumentException('non-nullable enable_group_assignment cannot be null');
        }
        $this->container['enable_group_assignment'] = $enable_group_assignment;

        return $this;
    }

    /**
     * Gets enable_automated_review
     *
     * @return bool|null
     */
    public function getEnableAutomatedReview()
    {
        return $this->container['enable_automated_review'];
    }

    /**
     * Sets enable_automated_review
     *
     * @param bool|null $enable_automated_review enable_automated_review
     *
     * @return self
     */
    public function setEnableAutomatedReview($enable_automated_review)
    {
        if (is_null($enable_automated_review)) {
            throw new \InvalidArgumentException('non-nullable enable_automated_review cannot be null');
        }
        $this->container['enable_automated_review'] = $enable_automated_review;

        return $this;
    }

    /**
     * Gets enable_feedback_sharing
     *
     * @return bool|null
     */
    public function getEnableFeedbackSharing()
    {
        return $this->container['enable_feedback_sharing'];
    }

    /**
     * Sets enable_feedback_sharing
     *
     * @param bool|null $enable_feedback_sharing enable_feedback_sharing
     *
     * @return self
     */
    public function setEnableFeedbackSharing($enable_feedback_sharing)
    {
        if (is_null($enable_feedback_sharing)) {
            throw new \InvalidArgumentException('non-nullable enable_feedback_sharing cannot be null');
        }
        $this->container['enable_feedback_sharing'] = $enable_feedback_sharing;

        return $this;
    }

    /**
     * Gets enable_reports_link
     *
     * @return bool|null
     */
    public function getEnableReportsLink()
    {
        return $this->container['enable_reports_link'];
    }

    /**
     * Sets enable_reports_link
     *
     * @param bool|null $enable_reports_link enable_reports_link
     *
     * @return self
     */
    public function setEnableReportsLink($enable_reports_link)
    {
        if (is_null($enable_reports_link)) {
            throw new \InvalidArgumentException('non-nullable enable_reports_link cannot be null');
        }
        $this->container['enable_reports_link'] = $enable_reports_link;

        return $this;
    }

    /**
     * Gets enable_advanced_reporting
     *
     * @return bool|null
     */
    public function getEnableAdvancedReporting()
    {
        return $this->container['enable_advanced_reporting'];
    }

    /**
     * Sets enable_advanced_reporting
     *
     * @param bool|null $enable_advanced_reporting enable_advanced_reporting
     *
     * @return self
     */
    public function setEnableAdvancedReporting($enable_advanced_reporting)
    {
        if (is_null($enable_advanced_reporting)) {
            throw new \InvalidArgumentException('non-nullable enable_advanced_reporting cannot be null');
        }
        $this->container['enable_advanced_reporting'] = $enable_advanced_reporting;

        return $this;
    }

    /**
     * Gets enable_aggregate_statistics
     *
     * @return bool|null
     */
    public function getEnableAggregateStatistics()
    {
        return $this->container['enable_aggregate_statistics'];
    }

    /**
     * Sets enable_aggregate_statistics
     *
     * @param bool|null $enable_aggregate_statistics enable_aggregate_statistics
     *
     * @return self
     */
    public function setEnableAggregateStatistics($enable_aggregate_statistics)
    {
        if (is_null($enable_aggregate_statistics)) {
            throw new \InvalidArgumentException('non-nullable enable_aggregate_statistics cannot be null');
        }
        $this->container['enable_aggregate_statistics'] = $enable_aggregate_statistics;

        return $this;
    }

    /**
     * Gets enable_pdf_export
     *
     * @return bool|null
     */
    public function getEnablePdfExport()
    {
        return $this->container['enable_pdf_export'];
    }

    /**
     * Sets enable_pdf_export
     *
     * @param bool|null $enable_pdf_export enable_pdf_export
     *
     * @return self
     */
    public function setEnablePdfExport($enable_pdf_export)
    {
        if (is_null($enable_pdf_export)) {
            throw new \InvalidArgumentException('non-nullable enable_pdf_export cannot be null');
        }
        $this->container['enable_pdf_export'] = $enable_pdf_export;

        return $this;
    }

    /**
     * Gets enable_visitor_report
     *
     * @return bool|null
     */
    public function getEnableVisitorReport()
    {
        return $this->container['enable_visitor_report'];
    }

    /**
     * Sets enable_visitor_report
     *
     * @param bool|null $enable_visitor_report enable_visitor_report
     *
     * @return self
     */
    public function setEnableVisitorReport($enable_visitor_report)
    {
        if (is_null($enable_visitor_report)) {
            throw new \InvalidArgumentException('non-nullable enable_visitor_report cannot be null');
        }
        $this->container['enable_visitor_report'] = $enable_visitor_report;

        return $this;
    }

    /**
     * Gets enable_dashboard
     *
     * @return bool|null
     */
    public function getEnableDashboard()
    {
        return $this->container['enable_dashboard'];
    }

    /**
     * Sets enable_dashboard
     *
     * @param bool|null $enable_dashboard enable_dashboard
     *
     * @return self
     */
    public function setEnableDashboard($enable_dashboard)
    {
        if (is_null($enable_dashboard)) {
            throw new \InvalidArgumentException('non-nullable enable_dashboard cannot be null');
        }
        $this->container['enable_dashboard'] = $enable_dashboard;

        return $this;
    }

    /**
     * Gets enable_api
     *
     * @return bool|null
     */
    public function getEnableApi()
    {
        return $this->container['enable_api'];
    }

    /**
     * Sets enable_api
     *
     * @param bool|null $enable_api enable_api
     *
     * @return self
     */
    public function setEnableApi($enable_api)
    {
        if (is_null($enable_api)) {
            throw new \InvalidArgumentException('non-nullable enable_api cannot be null');
        }
        $this->container['enable_api'] = $enable_api;

        return $this;
    }

    /**
     * Gets allow_api
     *
     * @return bool|null
     */
    public function getAllowApi()
    {
        return $this->container['allow_api'];
    }

    /**
     * Sets allow_api
     *
     * @param bool|null $allow_api allow_api
     *
     * @return self
     */
    public function setAllowApi($allow_api)
    {
        if (is_null($allow_api)) {
            throw new \InvalidArgumentException('non-nullable allow_api cannot be null');
        }
        $this->container['allow_api'] = $allow_api;

        return $this;
    }

    /**
     * Gets enable_read_write_api
     *
     * @return bool|null
     */
    public function getEnableReadWriteApi()
    {
        return $this->container['enable_read_write_api'];
    }

    /**
     * Sets enable_read_write_api
     *
     * @param bool|null $enable_read_write_api enable_read_write_api
     *
     * @return self
     */
    public function setEnableReadWriteApi($enable_read_write_api)
    {
        if (is_null($enable_read_write_api)) {
            throw new \InvalidArgumentException('non-nullable enable_read_write_api cannot be null');
        }
        $this->container['enable_read_write_api'] = $enable_read_write_api;

        return $this;
    }

    /**
     * Gets enable_zapier_integration
     *
     * @return bool|null
     */
    public function getEnableZapierIntegration()
    {
        return $this->container['enable_zapier_integration'];
    }

    /**
     * Sets enable_zapier_integration
     *
     * @param bool|null $enable_zapier_integration enable_zapier_integration
     *
     * @return self
     */
    public function setEnableZapierIntegration($enable_zapier_integration)
    {
        if (is_null($enable_zapier_integration)) {
            throw new \InvalidArgumentException('non-nullable enable_zapier_integration cannot be null');
        }
        $this->container['enable_zapier_integration'] = $enable_zapier_integration;

        return $this;
    }

    /**
     * Gets enable_google_sign_in
     *
     * @return bool|null
     */
    public function getEnableGoogleSignIn()
    {
        return $this->container['enable_google_sign_in'];
    }

    /**
     * Sets enable_google_sign_in
     *
     * @param bool|null $enable_google_sign_in enable_google_sign_in
     *
     * @return self
     */
    public function setEnableGoogleSignIn($enable_google_sign_in)
    {
        if (is_null($enable_google_sign_in)) {
            throw new \InvalidArgumentException('non-nullable enable_google_sign_in cannot be null');
        }
        $this->container['enable_google_sign_in'] = $enable_google_sign_in;

        return $this;
    }

    /**
     * Gets enable_facebook_sign_in
     *
     * @return bool|null
     */
    public function getEnableFacebookSignIn()
    {
        return $this->container['enable_facebook_sign_in'];
    }

    /**
     * Sets enable_facebook_sign_in
     *
     * @param bool|null $enable_facebook_sign_in enable_facebook_sign_in
     *
     * @return self
     */
    public function setEnableFacebookSignIn($enable_facebook_sign_in)
    {
        if (is_null($enable_facebook_sign_in)) {
            throw new \InvalidArgumentException('non-nullable enable_facebook_sign_in cannot be null');
        }
        $this->container['enable_facebook_sign_in'] = $enable_facebook_sign_in;

        return $this;
    }

    /**
     * Gets enable_social_media_buttons
     *
     * @return bool|null
     */
    public function getEnableSocialMediaButtons()
    {
        return $this->container['enable_social_media_buttons'];
    }

    /**
     * Sets enable_social_media_buttons
     *
     * @param bool|null $enable_social_media_buttons enable_social_media_buttons
     *
     * @return self
     */
    public function setEnableSocialMediaButtons($enable_social_media_buttons)
    {
        if (is_null($enable_social_media_buttons)) {
            throw new \InvalidArgumentException('non-nullable enable_social_media_buttons cannot be null');
        }
        $this->container['enable_social_media_buttons'] = $enable_social_media_buttons;

        return $this;
    }

    /**
     * Gets disable_submission_emails
     *
     * @return bool|null
     */
    public function getDisableSubmissionEmails()
    {
        return $this->container['disable_submission_emails'];
    }

    /**
     * Sets disable_submission_emails
     *
     * @param bool|null $disable_submission_emails disable_submission_emails
     *
     * @return self
     */
    public function setDisableSubmissionEmails($disable_submission_emails)
    {
        if (is_null($disable_submission_emails)) {
            throw new \InvalidArgumentException('non-nullable disable_submission_emails cannot be null');
        }
        $this->container['disable_submission_emails'] = $disable_submission_emails;

        return $this;
    }

    /**
     * Gets disable_create_account_emails
     *
     * @return bool|null
     */
    public function getDisableCreateAccountEmails()
    {
        return $this->container['disable_create_account_emails'];
    }

    /**
     * Sets disable_create_account_emails
     *
     * @param bool|null $disable_create_account_emails disable_create_account_emails
     *
     * @return self
     */
    public function setDisableCreateAccountEmails($disable_create_account_emails)
    {
        if (is_null($disable_create_account_emails)) {
            throw new \InvalidArgumentException('non-nullable disable_create_account_emails cannot be null');
        }
        $this->container['disable_create_account_emails'] = $disable_create_account_emails;

        return $this;
    }

    /**
     * Gets enable_us_bank_check_payment
     *
     * @return bool|null
     */
    public function getEnableUsBankCheckPayment()
    {
        return $this->container['enable_us_bank_check_payment'];
    }

    /**
     * Sets enable_us_bank_check_payment
     *
     * @param bool|null $enable_us_bank_check_payment enable_us_bank_check_payment
     *
     * @return self
     */
    public function setEnableUsBankCheckPayment($enable_us_bank_check_payment)
    {
        if (is_null($enable_us_bank_check_payment)) {
            throw new \InvalidArgumentException('non-nullable enable_us_bank_check_payment cannot be null');
        }
        $this->container['enable_us_bank_check_payment'] = $enable_us_bank_check_payment;

        return $this;
    }

    /**
     * Gets enable_us_bank_ach_payment
     *
     * @return bool|null
     */
    public function getEnableUsBankAchPayment()
    {
        return $this->container['enable_us_bank_ach_payment'];
    }

    /**
     * Sets enable_us_bank_ach_payment
     *
     * @param bool|null $enable_us_bank_ach_payment enable_us_bank_ach_payment
     *
     * @return self
     */
    public function setEnableUsBankAchPayment($enable_us_bank_ach_payment)
    {
        if (is_null($enable_us_bank_ach_payment)) {
            throw new \InvalidArgumentException('non-nullable enable_us_bank_ach_payment cannot be null');
        }
        $this->container['enable_us_bank_ach_payment'] = $enable_us_bank_ach_payment;

        return $this;
    }

    /**
     * Gets enable_us_bank_prepaid_card_payment
     *
     * @return bool|null
     */
    public function getEnableUsBankPrepaidCardPayment()
    {
        return $this->container['enable_us_bank_prepaid_card_payment'];
    }

    /**
     * Sets enable_us_bank_prepaid_card_payment
     *
     * @param bool|null $enable_us_bank_prepaid_card_payment enable_us_bank_prepaid_card_payment
     *
     * @return self
     */
    public function setEnableUsBankPrepaidCardPayment($enable_us_bank_prepaid_card_payment)
    {
        if (is_null($enable_us_bank_prepaid_card_payment)) {
            throw new \InvalidArgumentException('non-nullable enable_us_bank_prepaid_card_payment cannot be null');
        }
        $this->container['enable_us_bank_prepaid_card_payment'] = $enable_us_bank_prepaid_card_payment;

        return $this;
    }

    /**
     * Gets is_azure
     *
     * @return bool|null
     */
    public function getIsAzure()
    {
        return $this->container['is_azure'];
    }

    /**
     * Sets is_azure
     *
     * @param bool|null $is_azure is_azure
     *
     * @return self
     */
    public function setIsAzure($is_azure)
    {
        if (is_null($is_azure)) {
            throw new \InvalidArgumentException('non-nullable is_azure cannot be null');
        }
        $this->container['is_azure'] = $is_azure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


