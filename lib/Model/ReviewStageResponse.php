<?php
/**
 * ReviewStageResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReviewStageResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReviewStageResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReviewStageResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'review_stage_id' => 'string',
        'stage_name' => 'string',
        'stage_order' => 'int',
        'type' => 'string',
        'form_id' => 'string',
        'reviewer_user_ids' => 'string[]',
        'has_completed_reviews' => 'bool',
        'is_deleted' => 'bool',
        'random_assignment_count' => 'int',
        'next_stage_on_completed_reviews' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'review_stage_id' => null,
        'stage_name' => null,
        'stage_order' => 'int32',
        'type' => null,
        'form_id' => 'uuid',
        'reviewer_user_ids' => 'uuid',
        'has_completed_reviews' => null,
        'is_deleted' => null,
        'random_assignment_count' => 'int32',
        'next_stage_on_completed_reviews' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'review_stage_id' => true,
        'stage_name' => true,
        'stage_order' => false,
        'type' => true,
        'form_id' => true,
        'reviewer_user_ids' => true,
        'has_completed_reviews' => false,
        'is_deleted' => false,
        'random_assignment_count' => true,
        'next_stage_on_completed_reviews' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'review_stage_id' => 'reviewStageId',
        'stage_name' => 'stageName',
        'stage_order' => 'stageOrder',
        'type' => 'type',
        'form_id' => 'formId',
        'reviewer_user_ids' => 'reviewerUserIds',
        'has_completed_reviews' => 'hasCompletedReviews',
        'is_deleted' => 'isDeleted',
        'random_assignment_count' => 'randomAssignmentCount',
        'next_stage_on_completed_reviews' => 'nextStageOnCompletedReviews'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'review_stage_id' => 'setReviewStageId',
        'stage_name' => 'setStageName',
        'stage_order' => 'setStageOrder',
        'type' => 'setType',
        'form_id' => 'setFormId',
        'reviewer_user_ids' => 'setReviewerUserIds',
        'has_completed_reviews' => 'setHasCompletedReviews',
        'is_deleted' => 'setIsDeleted',
        'random_assignment_count' => 'setRandomAssignmentCount',
        'next_stage_on_completed_reviews' => 'setNextStageOnCompletedReviews'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'review_stage_id' => 'getReviewStageId',
        'stage_name' => 'getStageName',
        'stage_order' => 'getStageOrder',
        'type' => 'getType',
        'form_id' => 'getFormId',
        'reviewer_user_ids' => 'getReviewerUserIds',
        'has_completed_reviews' => 'getHasCompletedReviews',
        'is_deleted' => 'getIsDeleted',
        'random_assignment_count' => 'getRandomAssignmentCount',
        'next_stage_on_completed_reviews' => 'getNextStageOnCompletedReviews'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_NO_REVIEW = 'no_review';
    public const TYPE_YES_NO_MAYBE = 'yes_no_maybe';
    public const TYPE_CUSTOM_REVIEW = 'custom_review';
    public const TYPE_AUTOMATED_REVIEW = 'automated_review';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NO_REVIEW,
            self::TYPE_YES_NO_MAYBE,
            self::TYPE_CUSTOM_REVIEW,
            self::TYPE_AUTOMATED_REVIEW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('review_stage_id', $data ?? [], null);
        $this->setIfExists('stage_name', $data ?? [], null);
        $this->setIfExists('stage_order', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('reviewer_user_ids', $data ?? [], null);
        $this->setIfExists('has_completed_reviews', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('random_assignment_count', $data ?? [], null);
        $this->setIfExists('next_stage_on_completed_reviews', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets review_stage_id
     *
     * @return string|null
     */
    public function getReviewStageId()
    {
        return $this->container['review_stage_id'];
    }

    /**
     * Sets review_stage_id
     *
     * @param string|null $review_stage_id review_stage_id
     *
     * @return self
     */
    public function setReviewStageId($review_stage_id)
    {
        if (is_null($review_stage_id)) {
            array_push($this->openAPINullablesSetToNull, 'review_stage_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_stage_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['review_stage_id'] = $review_stage_id;

        return $this;
    }

    /**
     * Gets stage_name
     *
     * @return string|null
     */
    public function getStageName()
    {
        return $this->container['stage_name'];
    }

    /**
     * Sets stage_name
     *
     * @param string|null $stage_name stage_name
     *
     * @return self
     */
    public function setStageName($stage_name)
    {
        if (is_null($stage_name)) {
            array_push($this->openAPINullablesSetToNull, 'stage_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stage_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stage_name'] = $stage_name;

        return $this;
    }

    /**
     * Gets stage_order
     *
     * @return int|null
     */
    public function getStageOrder()
    {
        return $this->container['stage_order'];
    }

    /**
     * Sets stage_order
     *
     * @param int|null $stage_order stage_order
     *
     * @return self
     */
    public function setStageOrder($stage_order)
    {
        if (is_null($stage_order)) {
            throw new \InvalidArgumentException('non-nullable stage_order cannot be null');
        }
        $this->container['stage_order'] = $stage_order;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return string|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param string|null $form_id form_id
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        if (is_null($form_id)) {
            array_push($this->openAPINullablesSetToNull, 'form_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets reviewer_user_ids
     *
     * @return string[]|null
     */
    public function getReviewerUserIds()
    {
        return $this->container['reviewer_user_ids'];
    }

    /**
     * Sets reviewer_user_ids
     *
     * @param string[]|null $reviewer_user_ids reviewer_user_ids
     *
     * @return self
     */
    public function setReviewerUserIds($reviewer_user_ids)
    {
        if (is_null($reviewer_user_ids)) {
            array_push($this->openAPINullablesSetToNull, 'reviewer_user_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reviewer_user_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reviewer_user_ids'] = $reviewer_user_ids;

        return $this;
    }

    /**
     * Gets has_completed_reviews
     *
     * @return bool|null
     */
    public function getHasCompletedReviews()
    {
        return $this->container['has_completed_reviews'];
    }

    /**
     * Sets has_completed_reviews
     *
     * @param bool|null $has_completed_reviews has_completed_reviews
     *
     * @return self
     */
    public function setHasCompletedReviews($has_completed_reviews)
    {
        if (is_null($has_completed_reviews)) {
            throw new \InvalidArgumentException('non-nullable has_completed_reviews cannot be null');
        }
        $this->container['has_completed_reviews'] = $has_completed_reviews;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets random_assignment_count
     *
     * @return int|null
     */
    public function getRandomAssignmentCount()
    {
        return $this->container['random_assignment_count'];
    }

    /**
     * Sets random_assignment_count
     *
     * @param int|null $random_assignment_count random_assignment_count
     *
     * @return self
     */
    public function setRandomAssignmentCount($random_assignment_count)
    {
        if (is_null($random_assignment_count)) {
            array_push($this->openAPINullablesSetToNull, 'random_assignment_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('random_assignment_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['random_assignment_count'] = $random_assignment_count;

        return $this;
    }

    /**
     * Gets next_stage_on_completed_reviews
     *
     * @return string|null
     */
    public function getNextStageOnCompletedReviews()
    {
        return $this->container['next_stage_on_completed_reviews'];
    }

    /**
     * Sets next_stage_on_completed_reviews
     *
     * @param string|null $next_stage_on_completed_reviews next_stage_on_completed_reviews
     *
     * @return self
     */
    public function setNextStageOnCompletedReviews($next_stage_on_completed_reviews)
    {
        if (is_null($next_stage_on_completed_reviews)) {
            array_push($this->openAPINullablesSetToNull, 'next_stage_on_completed_reviews');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_stage_on_completed_reviews', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['next_stage_on_completed_reviews'] = $next_stage_on_completed_reviews;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


