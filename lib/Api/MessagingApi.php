<?php
/**
 * MessagingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MessagingApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessagingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v4MessagesMessageIdAttachmentsGet' => [
            'application/json',
        ],
        'v4MessagesPlaceholdersFormsFormIdGet' => [
            'application/json',
        ],
        'v4MessagesPlaceholdersGet' => [
            'application/json',
        ],
        'v4MessagesPlaceholdersPlaceholderIdGet' => [
            'application/json',
        ],
        'v4MessagesPlaceholdersPlaceholderIdPut' => [
            'application/json',
        ],
        'v4MessagesPlaceholdersPost' => [
            'application/json',
        ],
        'v4MessagesResponsesTemplatesPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v4MessagesMessageIdAttachmentsGet
     *
     * Get the file attachments associated with a messageId
     *
     * @param  string $message_id message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesMessageIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessageAttachmentResponse
     */
    public function v4MessagesMessageIdAttachmentsGet($message_id, string $contentType = self::contentTypes['v4MessagesMessageIdAttachmentsGet'][0])
    {
        list($response) = $this->v4MessagesMessageIdAttachmentsGetWithHttpInfo($message_id, $contentType);
        return $response;
    }

    /**
     * Operation v4MessagesMessageIdAttachmentsGetWithHttpInfo
     *
     * Get the file attachments associated with a messageId
     *
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesMessageIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessageAttachmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MessagesMessageIdAttachmentsGetWithHttpInfo($message_id, string $contentType = self::contentTypes['v4MessagesMessageIdAttachmentsGet'][0])
    {
        $request = $this->v4MessagesMessageIdAttachmentsGetRequest($message_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessageAttachmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessageAttachmentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessageAttachmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\MessageAttachmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessageAttachmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MessagesMessageIdAttachmentsGetAsync
     *
     * Get the file attachments associated with a messageId
     *
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesMessageIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesMessageIdAttachmentsGetAsync($message_id, string $contentType = self::contentTypes['v4MessagesMessageIdAttachmentsGet'][0])
    {
        return $this->v4MessagesMessageIdAttachmentsGetAsyncWithHttpInfo($message_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MessagesMessageIdAttachmentsGetAsyncWithHttpInfo
     *
     * Get the file attachments associated with a messageId
     *
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesMessageIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesMessageIdAttachmentsGetAsyncWithHttpInfo($message_id, string $contentType = self::contentTypes['v4MessagesMessageIdAttachmentsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessageAttachmentResponse';
        $request = $this->v4MessagesMessageIdAttachmentsGetRequest($message_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MessagesMessageIdAttachmentsGet'
     *
     * @param  string $message_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesMessageIdAttachmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MessagesMessageIdAttachmentsGetRequest($message_id, string $contentType = self::contentTypes['v4MessagesMessageIdAttachmentsGet'][0])
    {

        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling v4MessagesMessageIdAttachmentsGet'
            );
        }


        $resourcePath = '/v4/messages/{messageId}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageId' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4MessagesPlaceholdersFormsFormIdGet
     *
     * Get a placeholder by id
     *
     * @param  string $form_id form_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaceholderResponse[]
     */
    public function v4MessagesPlaceholdersFormsFormIdGet($form_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'][0])
    {
        list($response) = $this->v4MessagesPlaceholdersFormsFormIdGetWithHttpInfo($form_id, $contentType);
        return $response;
    }

    /**
     * Operation v4MessagesPlaceholdersFormsFormIdGetWithHttpInfo
     *
     * Get a placeholder by id
     *
     * @param  string $form_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaceholderResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MessagesPlaceholdersFormsFormIdGetWithHttpInfo($form_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'][0])
    {
        $request = $this->v4MessagesPlaceholdersFormsFormIdGetRequest($form_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaceholderResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaceholderResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaceholderResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PlaceholderResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaceholderResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MessagesPlaceholdersFormsFormIdGetAsync
     *
     * Get a placeholder by id
     *
     * @param  string $form_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersFormsFormIdGetAsync($form_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'][0])
    {
        return $this->v4MessagesPlaceholdersFormsFormIdGetAsyncWithHttpInfo($form_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MessagesPlaceholdersFormsFormIdGetAsyncWithHttpInfo
     *
     * Get a placeholder by id
     *
     * @param  string $form_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersFormsFormIdGetAsyncWithHttpInfo($form_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlaceholderResponse[]';
        $request = $this->v4MessagesPlaceholdersFormsFormIdGetRequest($form_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MessagesPlaceholdersFormsFormIdGet'
     *
     * @param  string $form_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MessagesPlaceholdersFormsFormIdGetRequest($form_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersFormsFormIdGet'][0])
    {

        // verify the required parameter 'form_id' is set
        if ($form_id === null || (is_array($form_id) && count($form_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $form_id when calling v4MessagesPlaceholdersFormsFormIdGet'
            );
        }


        $resourcePath = '/v4/messages/placeholders/forms/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($form_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4MessagesPlaceholdersGet
     *
     * Get a list of placeholders
     *
     * @param  string|null $continuation_token continuation_token (optional)
     * @param  int|null $size size (optional, default to 20)
     * @param  string|null $search search (optional)
     * @param  bool|null $include_disabled include_disabled (optional)
     * @param  bool|null $include_standard include_standard (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortField|null $sort_by_field sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortOrder|null $sort_by_order sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse
     */
    public function v4MessagesPlaceholdersGet($continuation_token = null, $size = 20, $search = null, $include_disabled = null, $include_standard = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersGet'][0])
    {
        list($response) = $this->v4MessagesPlaceholdersGetWithHttpInfo($continuation_token, $size, $search, $include_disabled, $include_standard, $sort_by_field, $sort_by_order, $contentType);
        return $response;
    }

    /**
     * Operation v4MessagesPlaceholdersGetWithHttpInfo
     *
     * Get a list of placeholders
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  bool|null $include_disabled (optional)
     * @param  bool|null $include_standard (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MessagesPlaceholdersGetWithHttpInfo($continuation_token = null, $size = 20, $search = null, $include_disabled = null, $include_standard = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersGet'][0])
    {
        $request = $this->v4MessagesPlaceholdersGetRequest($continuation_token, $size, $search, $include_disabled, $include_standard, $sort_by_field, $sort_by_order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MessagesPlaceholdersGetAsync
     *
     * Get a list of placeholders
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  bool|null $include_disabled (optional)
     * @param  bool|null $include_standard (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersGetAsync($continuation_token = null, $size = 20, $search = null, $include_disabled = null, $include_standard = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersGet'][0])
    {
        return $this->v4MessagesPlaceholdersGetAsyncWithHttpInfo($continuation_token, $size, $search, $include_disabled, $include_standard, $sort_by_field, $sort_by_order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MessagesPlaceholdersGetAsyncWithHttpInfo
     *
     * Get a list of placeholders
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  bool|null $include_disabled (optional)
     * @param  bool|null $include_standard (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersGetAsyncWithHttpInfo($continuation_token = null, $size = 20, $search = null, $include_disabled = null, $include_standard = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContinuationTokenResponsePlaceholderResponse';
        $request = $this->v4MessagesPlaceholdersGetRequest($continuation_token, $size, $search, $include_disabled, $include_standard, $sort_by_field, $sort_by_order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MessagesPlaceholdersGet'
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  bool|null $include_disabled (optional)
     * @param  bool|null $include_standard (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\PlaceholderSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MessagesPlaceholdersGetRequest($continuation_token = null, $size = 20, $search = null, $include_disabled = null, $include_standard = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersGet'][0])
    {


        if ($size !== null && $size > 500) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling MessagingApi.v4MessagesPlaceholdersGet, must be smaller than or equal to 500.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling MessagingApi.v4MessagesPlaceholdersGet, must be bigger than or equal to 1.');
        }
        






        $resourcePath = '/v4/messages/placeholders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'Search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_disabled,
            'IncludeDisabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_standard,
            'IncludeStandard', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by_field,
            'SortBy.Field', // param base name
            'PlaceholderSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by_order,
            'SortBy.Order', // param base name
            'PlaceholderSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdGet
     *
     * Get a placeholder by id
     *
     * @param  string $placeholder_id placeholder_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaceholderResponse
     */
    public function v4MessagesPlaceholdersPlaceholderIdGet($placeholder_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'][0])
    {
        list($response) = $this->v4MessagesPlaceholdersPlaceholderIdGetWithHttpInfo($placeholder_id, $contentType);
        return $response;
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdGetWithHttpInfo
     *
     * Get a placeholder by id
     *
     * @param  string $placeholder_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaceholderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MessagesPlaceholdersPlaceholderIdGetWithHttpInfo($placeholder_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'][0])
    {
        $request = $this->v4MessagesPlaceholdersPlaceholderIdGetRequest($placeholder_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaceholderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaceholderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaceholderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PlaceholderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaceholderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdGetAsync
     *
     * Get a placeholder by id
     *
     * @param  string $placeholder_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersPlaceholderIdGetAsync($placeholder_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'][0])
    {
        return $this->v4MessagesPlaceholdersPlaceholderIdGetAsyncWithHttpInfo($placeholder_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdGetAsyncWithHttpInfo
     *
     * Get a placeholder by id
     *
     * @param  string $placeholder_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersPlaceholderIdGetAsyncWithHttpInfo($placeholder_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlaceholderResponse';
        $request = $this->v4MessagesPlaceholdersPlaceholderIdGetRequest($placeholder_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MessagesPlaceholdersPlaceholderIdGet'
     *
     * @param  string $placeholder_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MessagesPlaceholdersPlaceholderIdGetRequest($placeholder_id, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdGet'][0])
    {

        // verify the required parameter 'placeholder_id' is set
        if ($placeholder_id === null || (is_array($placeholder_id) && count($placeholder_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $placeholder_id when calling v4MessagesPlaceholdersPlaceholderIdGet'
            );
        }


        $resourcePath = '/v4/messages/placeholders/{placeholderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($placeholder_id !== null) {
            $resourcePath = str_replace(
                '{' . 'placeholderId' . '}',
                ObjectSerializer::toPathValue($placeholder_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdPut
     *
     * Update a custom placeholder and any of its mappings
     *
     * @param  string $placeholder_id placeholder_id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomPlaceholderRequest|null $update_custom_placeholder_request update_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaceholderResponse|\OpenAPI\Client\Model\BadRequestResponse
     */
    public function v4MessagesPlaceholdersPlaceholderIdPut($placeholder_id, $update_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'][0])
    {
        list($response) = $this->v4MessagesPlaceholdersPlaceholderIdPutWithHttpInfo($placeholder_id, $update_custom_placeholder_request, $contentType);
        return $response;
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdPutWithHttpInfo
     *
     * Update a custom placeholder and any of its mappings
     *
     * @param  string $placeholder_id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomPlaceholderRequest|null $update_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaceholderResponse|\OpenAPI\Client\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MessagesPlaceholdersPlaceholderIdPutWithHttpInfo($placeholder_id, $update_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'][0])
    {
        $request = $this->v4MessagesPlaceholdersPlaceholderIdPutRequest($placeholder_id, $update_custom_placeholder_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PlaceholderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaceholderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaceholderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PlaceholderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaceholderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdPutAsync
     *
     * Update a custom placeholder and any of its mappings
     *
     * @param  string $placeholder_id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomPlaceholderRequest|null $update_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersPlaceholderIdPutAsync($placeholder_id, $update_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'][0])
    {
        return $this->v4MessagesPlaceholdersPlaceholderIdPutAsyncWithHttpInfo($placeholder_id, $update_custom_placeholder_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MessagesPlaceholdersPlaceholderIdPutAsyncWithHttpInfo
     *
     * Update a custom placeholder and any of its mappings
     *
     * @param  string $placeholder_id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomPlaceholderRequest|null $update_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersPlaceholderIdPutAsyncWithHttpInfo($placeholder_id, $update_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlaceholderResponse';
        $request = $this->v4MessagesPlaceholdersPlaceholderIdPutRequest($placeholder_id, $update_custom_placeholder_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MessagesPlaceholdersPlaceholderIdPut'
     *
     * @param  string $placeholder_id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomPlaceholderRequest|null $update_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MessagesPlaceholdersPlaceholderIdPutRequest($placeholder_id, $update_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPlaceholderIdPut'][0])
    {

        // verify the required parameter 'placeholder_id' is set
        if ($placeholder_id === null || (is_array($placeholder_id) && count($placeholder_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $placeholder_id when calling v4MessagesPlaceholdersPlaceholderIdPut'
            );
        }



        $resourcePath = '/v4/messages/placeholders/{placeholderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($placeholder_id !== null) {
            $resourcePath = str_replace(
                '{' . 'placeholderId' . '}',
                ObjectSerializer::toPathValue($placeholder_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_custom_placeholder_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_custom_placeholder_request));
            } else {
                $httpBody = $update_custom_placeholder_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4MessagesPlaceholdersPost
     *
     * Create a new Custom Placeholder
     *
     * @param  \OpenAPI\Client\Model\CreateCustomPlaceholderRequest|null $create_custom_placeholder_request create_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PlaceholderResponse
     */
    public function v4MessagesPlaceholdersPost($create_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPost'][0])
    {
        list($response) = $this->v4MessagesPlaceholdersPostWithHttpInfo($create_custom_placeholder_request, $contentType);
        return $response;
    }

    /**
     * Operation v4MessagesPlaceholdersPostWithHttpInfo
     *
     * Create a new Custom Placeholder
     *
     * @param  \OpenAPI\Client\Model\CreateCustomPlaceholderRequest|null $create_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PlaceholderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MessagesPlaceholdersPostWithHttpInfo($create_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPost'][0])
    {
        $request = $this->v4MessagesPlaceholdersPostRequest($create_custom_placeholder_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PlaceholderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PlaceholderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PlaceholderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PlaceholderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PlaceholderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MessagesPlaceholdersPostAsync
     *
     * Create a new Custom Placeholder
     *
     * @param  \OpenAPI\Client\Model\CreateCustomPlaceholderRequest|null $create_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersPostAsync($create_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPost'][0])
    {
        return $this->v4MessagesPlaceholdersPostAsyncWithHttpInfo($create_custom_placeholder_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MessagesPlaceholdersPostAsyncWithHttpInfo
     *
     * Create a new Custom Placeholder
     *
     * @param  \OpenAPI\Client\Model\CreateCustomPlaceholderRequest|null $create_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesPlaceholdersPostAsyncWithHttpInfo($create_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PlaceholderResponse';
        $request = $this->v4MessagesPlaceholdersPostRequest($create_custom_placeholder_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MessagesPlaceholdersPost'
     *
     * @param  \OpenAPI\Client\Model\CreateCustomPlaceholderRequest|null $create_custom_placeholder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesPlaceholdersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MessagesPlaceholdersPostRequest($create_custom_placeholder_request = null, string $contentType = self::contentTypes['v4MessagesPlaceholdersPost'][0])
    {



        $resourcePath = '/v4/messages/placeholders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_custom_placeholder_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_custom_placeholder_request));
            } else {
                $httpBody = $create_custom_placeholder_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4MessagesResponsesTemplatesPost
     *
     * Create or update a response template
     *
     * @param  \OpenAPI\Client\Model\CreateResponseTemplateRequest|null $create_response_template_request create_response_template_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesResponsesTemplatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CreateResponseTemplateResponse
     */
    public function v4MessagesResponsesTemplatesPost($create_response_template_request = null, string $contentType = self::contentTypes['v4MessagesResponsesTemplatesPost'][0])
    {
        list($response) = $this->v4MessagesResponsesTemplatesPostWithHttpInfo($create_response_template_request, $contentType);
        return $response;
    }

    /**
     * Operation v4MessagesResponsesTemplatesPostWithHttpInfo
     *
     * Create or update a response template
     *
     * @param  \OpenAPI\Client\Model\CreateResponseTemplateRequest|null $create_response_template_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesResponsesTemplatesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CreateResponseTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MessagesResponsesTemplatesPostWithHttpInfo($create_response_template_request = null, string $contentType = self::contentTypes['v4MessagesResponsesTemplatesPost'][0])
    {
        $request = $this->v4MessagesResponsesTemplatesPostRequest($create_response_template_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\CreateResponseTemplateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CreateResponseTemplateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CreateResponseTemplateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\CreateResponseTemplateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CreateResponseTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MessagesResponsesTemplatesPostAsync
     *
     * Create or update a response template
     *
     * @param  \OpenAPI\Client\Model\CreateResponseTemplateRequest|null $create_response_template_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesResponsesTemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesResponsesTemplatesPostAsync($create_response_template_request = null, string $contentType = self::contentTypes['v4MessagesResponsesTemplatesPost'][0])
    {
        return $this->v4MessagesResponsesTemplatesPostAsyncWithHttpInfo($create_response_template_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MessagesResponsesTemplatesPostAsyncWithHttpInfo
     *
     * Create or update a response template
     *
     * @param  \OpenAPI\Client\Model\CreateResponseTemplateRequest|null $create_response_template_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesResponsesTemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MessagesResponsesTemplatesPostAsyncWithHttpInfo($create_response_template_request = null, string $contentType = self::contentTypes['v4MessagesResponsesTemplatesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CreateResponseTemplateResponse';
        $request = $this->v4MessagesResponsesTemplatesPostRequest($create_response_template_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MessagesResponsesTemplatesPost'
     *
     * @param  \OpenAPI\Client\Model\CreateResponseTemplateRequest|null $create_response_template_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MessagesResponsesTemplatesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MessagesResponsesTemplatesPostRequest($create_response_template_request = null, string $contentType = self::contentTypes['v4MessagesResponsesTemplatesPost'][0])
    {



        $resourcePath = '/v4/messages/responses/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_response_template_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_response_template_request));
            } else {
                $httpBody = $create_response_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
