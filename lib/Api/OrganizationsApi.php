<?php
/**
 * OrganizationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Submittable\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Submittable\ApiException;
use Submittable\Configuration;
use Submittable\HeaderSelector;
use Submittable\ObjectSerializer;

/**
 * OrganizationsApi Class Doc Comment
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrganizationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getOrganizationFeatures' => [
            'application/json',
        ],
        'v4OrganizationsBillingGet' => [
            'application/json',
        ],
        'v4OrganizationsBillingPost' => [
            'application/json',
        ],
        'v4OrganizationsBillingPut' => [
            'application/json',
        ],
        'v4OrganizationsCustomdataCustomDataRecordIdPatch' => [
            'application/json',
        ],
        'v4OrganizationsCustomdataLabelsGet' => [
            'application/json',
        ],
        'v4OrganizationsCustomdataPost' => [
            'application/json',
        ],
        'v4OrganizationsCustomdataPublicOrgIdGet' => [
            'application/json',
        ],
        'v4OrganizationsGet' => [
            'application/json',
        ],
        'v4OrganizationsGuidGet' => [
            'application/json',
        ],
        'v4OrganizationsStaffGroupsListGet' => [
            'application/json',
        ],
        'v4OrganizationsStaffGroupsPost' => [
            'application/json',
        ],
        'v4OrganizationsStaffGroupsStaffGroupIdDelete' => [
            'application/json',
        ],
        'v4OrganizationsStaffGroupsStaffGroupIdPut' => [
            'application/json',
        ],
        'v4OrganizationsTeamDelete' => [
            'application/json',
        ],
        'v4OrganizationsTeamGet' => [
            'application/json',
        ],
        'v4OrganizationsTeamInvitesDeletePost' => [
            'application/json',
        ],
        'v4OrganizationsTeamInvitesGet' => [
            'application/json',
        ],
        'v4OrganizationsTeamInvitesResendPost' => [
            'application/json',
        ],
        'v4OrganizationsTeamListPost' => [
            'application/json',
        ],
        'v4OrganizationsTeamPatch' => [
            'application/json',
        ],
        'v4OrganizationsTeamPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getOrganizationFeatures
     *
     * Get organization&#39;s features
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\OrganizationFeatures
     */
    public function getOrganizationFeatures(string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        list($response) = $this->getOrganizationFeaturesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getOrganizationFeaturesWithHttpInfo
     *
     * Get organization&#39;s features
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\OrganizationFeatures, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationFeaturesWithHttpInfo(string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        $request = $this->getOrganizationFeaturesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\OrganizationFeatures' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\OrganizationFeatures' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\OrganizationFeatures', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\OrganizationFeatures';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\OrganizationFeatures',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationFeaturesAsync
     *
     * Get organization&#39;s features
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFeaturesAsync(string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        return $this->getOrganizationFeaturesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationFeaturesAsyncWithHttpInfo
     *
     * Get organization&#39;s features
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFeaturesAsyncWithHttpInfo(string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        $returnType = '\Submittable\Model\OrganizationFeatures';
        $request = $this->getOrganizationFeaturesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationFeatures'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationFeaturesRequest(string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {


        $resourcePath = '/v4/organizations/features';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsBillingGet
     *
     * Get billing information for organization
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\GetOrganizationBillingInfoResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsBillingGet(string $contentType = self::contentTypes['v4OrganizationsBillingGet'][0])
    {
        list($response) = $this->v4OrganizationsBillingGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsBillingGetWithHttpInfo
     *
     * Get billing information for organization
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\GetOrganizationBillingInfoResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsBillingGetWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsBillingGet'][0])
    {
        $request = $this->v4OrganizationsBillingGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\GetOrganizationBillingInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\GetOrganizationBillingInfoResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\GetOrganizationBillingInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\GetOrganizationBillingInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\GetOrganizationBillingInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsBillingGetAsync
     *
     * Get billing information for organization
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsBillingGetAsync(string $contentType = self::contentTypes['v4OrganizationsBillingGet'][0])
    {
        return $this->v4OrganizationsBillingGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsBillingGetAsyncWithHttpInfo
     *
     * Get billing information for organization
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsBillingGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsBillingGet'][0])
    {
        $returnType = '\Submittable\Model\GetOrganizationBillingInfoResponse';
        $request = $this->v4OrganizationsBillingGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsBillingGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsBillingGetRequest(string $contentType = self::contentTypes['v4OrganizationsBillingGet'][0])
    {


        $resourcePath = '/v4/organizations/billing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsBillingPost
     *
     * Create billing information for organization
     *
     * @param  \Submittable\Model\CreateOrganizationBillingInfoRequest|null $create_organization_billing_info_request create_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\OrganizationBillingInfoResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsBillingPost($create_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPost'][0])
    {
        list($response) = $this->v4OrganizationsBillingPostWithHttpInfo($create_organization_billing_info_request, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsBillingPostWithHttpInfo
     *
     * Create billing information for organization
     *
     * @param  \Submittable\Model\CreateOrganizationBillingInfoRequest|null $create_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\OrganizationBillingInfoResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsBillingPostWithHttpInfo($create_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPost'][0])
    {
        $request = $this->v4OrganizationsBillingPostRequest($create_organization_billing_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Submittable\Model\OrganizationBillingInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\OrganizationBillingInfoResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\OrganizationBillingInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\OrganizationBillingInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\OrganizationBillingInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsBillingPostAsync
     *
     * Create billing information for organization
     *
     * @param  \Submittable\Model\CreateOrganizationBillingInfoRequest|null $create_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsBillingPostAsync($create_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPost'][0])
    {
        return $this->v4OrganizationsBillingPostAsyncWithHttpInfo($create_organization_billing_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsBillingPostAsyncWithHttpInfo
     *
     * Create billing information for organization
     *
     * @param  \Submittable\Model\CreateOrganizationBillingInfoRequest|null $create_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsBillingPostAsyncWithHttpInfo($create_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPost'][0])
    {
        $returnType = '\Submittable\Model\OrganizationBillingInfoResponse';
        $request = $this->v4OrganizationsBillingPostRequest($create_organization_billing_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsBillingPost'
     *
     * @param  \Submittable\Model\CreateOrganizationBillingInfoRequest|null $create_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsBillingPostRequest($create_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPost'][0])
    {



        $resourcePath = '/v4/organizations/billing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_organization_billing_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_organization_billing_info_request));
            } else {
                $httpBody = $create_organization_billing_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsBillingPut
     *
     * Update billing information for organization
     *
     * @param  \Submittable\Model\UpdateOrganizationBillingInfoRequest|null $update_organization_billing_info_request update_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\OrganizationBillingInfoResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsBillingPut($update_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPut'][0])
    {
        list($response) = $this->v4OrganizationsBillingPutWithHttpInfo($update_organization_billing_info_request, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsBillingPutWithHttpInfo
     *
     * Update billing information for organization
     *
     * @param  \Submittable\Model\UpdateOrganizationBillingInfoRequest|null $update_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\OrganizationBillingInfoResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsBillingPutWithHttpInfo($update_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPut'][0])
    {
        $request = $this->v4OrganizationsBillingPutRequest($update_organization_billing_info_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\OrganizationBillingInfoResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\OrganizationBillingInfoResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\OrganizationBillingInfoResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\OrganizationBillingInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\OrganizationBillingInfoResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsBillingPutAsync
     *
     * Update billing information for organization
     *
     * @param  \Submittable\Model\UpdateOrganizationBillingInfoRequest|null $update_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsBillingPutAsync($update_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPut'][0])
    {
        return $this->v4OrganizationsBillingPutAsyncWithHttpInfo($update_organization_billing_info_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsBillingPutAsyncWithHttpInfo
     *
     * Update billing information for organization
     *
     * @param  \Submittable\Model\UpdateOrganizationBillingInfoRequest|null $update_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsBillingPutAsyncWithHttpInfo($update_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPut'][0])
    {
        $returnType = '\Submittable\Model\OrganizationBillingInfoResponse';
        $request = $this->v4OrganizationsBillingPutRequest($update_organization_billing_info_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsBillingPut'
     *
     * @param  \Submittable\Model\UpdateOrganizationBillingInfoRequest|null $update_organization_billing_info_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsBillingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsBillingPutRequest($update_organization_billing_info_request = null, string $contentType = self::contentTypes['v4OrganizationsBillingPut'][0])
    {



        $resourcePath = '/v4/organizations/billing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_organization_billing_info_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_organization_billing_info_request));
            } else {
                $httpBody = $update_organization_billing_info_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsCustomdataCustomDataRecordIdPatch
     *
     * Update a Organization&#39;s Public Organization Custom Data Record
     *
     * @param  string $custom_data_record_id custom_data_record_id (required)
     * @param  \Submittable\Model\CustomDataRecordRequest|null $custom_data_record_request custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\PublicOrganizationCustomData
     */
    public function v4OrganizationsCustomdataCustomDataRecordIdPatch($custom_data_record_id, $custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'][0])
    {
        list($response) = $this->v4OrganizationsCustomdataCustomDataRecordIdPatchWithHttpInfo($custom_data_record_id, $custom_data_record_request, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsCustomdataCustomDataRecordIdPatchWithHttpInfo
     *
     * Update a Organization&#39;s Public Organization Custom Data Record
     *
     * @param  string $custom_data_record_id (required)
     * @param  \Submittable\Model\CustomDataRecordRequest|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\PublicOrganizationCustomData, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsCustomdataCustomDataRecordIdPatchWithHttpInfo($custom_data_record_id, $custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'][0])
    {
        $request = $this->v4OrganizationsCustomdataCustomDataRecordIdPatchRequest($custom_data_record_id, $custom_data_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\PublicOrganizationCustomData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\PublicOrganizationCustomData' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\PublicOrganizationCustomData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\PublicOrganizationCustomData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\PublicOrganizationCustomData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsCustomdataCustomDataRecordIdPatchAsync
     *
     * Update a Organization&#39;s Public Organization Custom Data Record
     *
     * @param  string $custom_data_record_id (required)
     * @param  \Submittable\Model\CustomDataRecordRequest|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataCustomDataRecordIdPatchAsync($custom_data_record_id, $custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'][0])
    {
        return $this->v4OrganizationsCustomdataCustomDataRecordIdPatchAsyncWithHttpInfo($custom_data_record_id, $custom_data_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsCustomdataCustomDataRecordIdPatchAsyncWithHttpInfo
     *
     * Update a Organization&#39;s Public Organization Custom Data Record
     *
     * @param  string $custom_data_record_id (required)
     * @param  \Submittable\Model\CustomDataRecordRequest|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataCustomDataRecordIdPatchAsyncWithHttpInfo($custom_data_record_id, $custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'][0])
    {
        $returnType = '\Submittable\Model\PublicOrganizationCustomData';
        $request = $this->v4OrganizationsCustomdataCustomDataRecordIdPatchRequest($custom_data_record_id, $custom_data_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsCustomdataCustomDataRecordIdPatch'
     *
     * @param  string $custom_data_record_id (required)
     * @param  \Submittable\Model\CustomDataRecordRequest|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsCustomdataCustomDataRecordIdPatchRequest($custom_data_record_id, $custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataCustomDataRecordIdPatch'][0])
    {

        // verify the required parameter 'custom_data_record_id' is set
        if ($custom_data_record_id === null || (is_array($custom_data_record_id) && count($custom_data_record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_data_record_id when calling v4OrganizationsCustomdataCustomDataRecordIdPatch'
            );
        }



        $resourcePath = '/v4/organizations/customdata/{customDataRecordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($custom_data_record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customDataRecordId' . '}',
                ObjectSerializer::toPathValue($custom_data_record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($custom_data_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($custom_data_record_request));
            } else {
                $httpBody = $custom_data_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsCustomdataLabelsGet
     *
     * Get a list of Custom Data Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataLabelsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\CustomDataLabelsResponse
     */
    public function v4OrganizationsCustomdataLabelsGet(string $contentType = self::contentTypes['v4OrganizationsCustomdataLabelsGet'][0])
    {
        list($response) = $this->v4OrganizationsCustomdataLabelsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsCustomdataLabelsGetWithHttpInfo
     *
     * Get a list of Custom Data Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataLabelsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\CustomDataLabelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsCustomdataLabelsGetWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsCustomdataLabelsGet'][0])
    {
        $request = $this->v4OrganizationsCustomdataLabelsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\CustomDataLabelsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\CustomDataLabelsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\CustomDataLabelsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\CustomDataLabelsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\CustomDataLabelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsCustomdataLabelsGetAsync
     *
     * Get a list of Custom Data Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataLabelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataLabelsGetAsync(string $contentType = self::contentTypes['v4OrganizationsCustomdataLabelsGet'][0])
    {
        return $this->v4OrganizationsCustomdataLabelsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsCustomdataLabelsGetAsyncWithHttpInfo
     *
     * Get a list of Custom Data Labels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataLabelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataLabelsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsCustomdataLabelsGet'][0])
    {
        $returnType = '\Submittable\Model\CustomDataLabelsResponse';
        $request = $this->v4OrganizationsCustomdataLabelsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsCustomdataLabelsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataLabelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsCustomdataLabelsGetRequest(string $contentType = self::contentTypes['v4OrganizationsCustomdataLabelsGet'][0])
    {


        $resourcePath = '/v4/organizations/customdata/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsCustomdataPost
     *
     * Bulk Create an organization&#39;s Public Organizations custom data
     *
     * @param  \Submittable\Model\CustomDataRecordRequest[]|null $custom_data_record_request custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\OrganizationCustomDataBulk
     */
    public function v4OrganizationsCustomdataPost($custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataPost'][0])
    {
        list($response) = $this->v4OrganizationsCustomdataPostWithHttpInfo($custom_data_record_request, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsCustomdataPostWithHttpInfo
     *
     * Bulk Create an organization&#39;s Public Organizations custom data
     *
     * @param  \Submittable\Model\CustomDataRecordRequest[]|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\OrganizationCustomDataBulk, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsCustomdataPostWithHttpInfo($custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataPost'][0])
    {
        $request = $this->v4OrganizationsCustomdataPostRequest($custom_data_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Submittable\Model\OrganizationCustomDataBulk' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\OrganizationCustomDataBulk' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\OrganizationCustomDataBulk', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\OrganizationCustomDataBulk';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\OrganizationCustomDataBulk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsCustomdataPostAsync
     *
     * Bulk Create an organization&#39;s Public Organizations custom data
     *
     * @param  \Submittable\Model\CustomDataRecordRequest[]|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataPostAsync($custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataPost'][0])
    {
        return $this->v4OrganizationsCustomdataPostAsyncWithHttpInfo($custom_data_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsCustomdataPostAsyncWithHttpInfo
     *
     * Bulk Create an organization&#39;s Public Organizations custom data
     *
     * @param  \Submittable\Model\CustomDataRecordRequest[]|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataPostAsyncWithHttpInfo($custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataPost'][0])
    {
        $returnType = '\Submittable\Model\OrganizationCustomDataBulk';
        $request = $this->v4OrganizationsCustomdataPostRequest($custom_data_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsCustomdataPost'
     *
     * @param  \Submittable\Model\CustomDataRecordRequest[]|null $custom_data_record_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsCustomdataPostRequest($custom_data_record_request = null, string $contentType = self::contentTypes['v4OrganizationsCustomdataPost'][0])
    {

        if ($custom_data_record_request !== null && count($custom_data_record_request) > 100) {
            throw new \InvalidArgumentException('invalid value for "$custom_data_record_request" when calling OrganizationsApi.v4OrganizationsCustomdataPost, number of items must be less than or equal to 100.');
        }
        if ($custom_data_record_request !== null && count($custom_data_record_request) < 1) {
            throw new \InvalidArgumentException('invalid value for "$custom_data_record_request" when calling OrganizationsApi.v4OrganizationsCustomdataPost, number of items must be greater than or equal to 1.');
        }
        

        $resourcePath = '/v4/organizations/customdata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($custom_data_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($custom_data_record_request));
            } else {
                $httpBody = $custom_data_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsCustomdataPublicOrgIdGet
     *
     * Get a Public Organization&#39;s Custom Data Record
     *
     * @param  string $public_org_id public_org_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\PublicOrganizationCustomData
     */
    public function v4OrganizationsCustomdataPublicOrgIdGet($public_org_id, string $contentType = self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'][0])
    {
        list($response) = $this->v4OrganizationsCustomdataPublicOrgIdGetWithHttpInfo($public_org_id, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsCustomdataPublicOrgIdGetWithHttpInfo
     *
     * Get a Public Organization&#39;s Custom Data Record
     *
     * @param  string $public_org_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\PublicOrganizationCustomData, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsCustomdataPublicOrgIdGetWithHttpInfo($public_org_id, string $contentType = self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'][0])
    {
        $request = $this->v4OrganizationsCustomdataPublicOrgIdGetRequest($public_org_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\PublicOrganizationCustomData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\PublicOrganizationCustomData' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\PublicOrganizationCustomData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\PublicOrganizationCustomData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\PublicOrganizationCustomData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsCustomdataPublicOrgIdGetAsync
     *
     * Get a Public Organization&#39;s Custom Data Record
     *
     * @param  string $public_org_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataPublicOrgIdGetAsync($public_org_id, string $contentType = self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'][0])
    {
        return $this->v4OrganizationsCustomdataPublicOrgIdGetAsyncWithHttpInfo($public_org_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsCustomdataPublicOrgIdGetAsyncWithHttpInfo
     *
     * Get a Public Organization&#39;s Custom Data Record
     *
     * @param  string $public_org_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsCustomdataPublicOrgIdGetAsyncWithHttpInfo($public_org_id, string $contentType = self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'][0])
    {
        $returnType = '\Submittable\Model\PublicOrganizationCustomData';
        $request = $this->v4OrganizationsCustomdataPublicOrgIdGetRequest($public_org_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsCustomdataPublicOrgIdGet'
     *
     * @param  string $public_org_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsCustomdataPublicOrgIdGetRequest($public_org_id, string $contentType = self::contentTypes['v4OrganizationsCustomdataPublicOrgIdGet'][0])
    {

        // verify the required parameter 'public_org_id' is set
        if ($public_org_id === null || (is_array($public_org_id) && count($public_org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_org_id when calling v4OrganizationsCustomdataPublicOrgIdGet'
            );
        }


        $resourcePath = '/v4/organizations/customdata/{publicOrgId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($public_org_id !== null) {
            $resourcePath = str_replace(
                '{' . 'publicOrgId' . '}',
                ObjectSerializer::toPathValue($public_org_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsGet
     *
     * Get organization info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\OrganizationResponse
     */
    public function v4OrganizationsGet(string $contentType = self::contentTypes['v4OrganizationsGet'][0])
    {
        list($response) = $this->v4OrganizationsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsGetWithHttpInfo
     *
     * Get organization info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\OrganizationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsGetWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsGet'][0])
    {
        $request = $this->v4OrganizationsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\OrganizationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\OrganizationResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\OrganizationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\OrganizationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\OrganizationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsGetAsync
     *
     * Get organization info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsGetAsync(string $contentType = self::contentTypes['v4OrganizationsGet'][0])
    {
        return $this->v4OrganizationsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsGetAsyncWithHttpInfo
     *
     * Get organization info
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsGet'][0])
    {
        $returnType = '\Submittable\Model\OrganizationResponse';
        $request = $this->v4OrganizationsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsGetRequest(string $contentType = self::contentTypes['v4OrganizationsGet'][0])
    {


        $resourcePath = '/v4/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsGuidGet
     *
     * Get the organization guid
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGuidGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsGuidGet(string $contentType = self::contentTypes['v4OrganizationsGuidGet'][0])
    {
        list($response) = $this->v4OrganizationsGuidGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsGuidGetWithHttpInfo
     *
     * Get the organization guid
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGuidGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsGuidGetWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsGuidGet'][0])
    {
        $request = $this->v4OrganizationsGuidGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsGuidGetAsync
     *
     * Get the organization guid
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsGuidGetAsync(string $contentType = self::contentTypes['v4OrganizationsGuidGet'][0])
    {
        return $this->v4OrganizationsGuidGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsGuidGetAsyncWithHttpInfo
     *
     * Get the organization guid
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsGuidGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsGuidGet'][0])
    {
        $returnType = 'string';
        $request = $this->v4OrganizationsGuidGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsGuidGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsGuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsGuidGetRequest(string $contentType = self::contentTypes['v4OrganizationsGuidGet'][0])
    {


        $resourcePath = '/v4/organizations/guid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsStaffGroupsListGet
     *
     * List staff groups
     *
     * @param  string|null $continuation_token continuation_token (optional)
     * @param  int|null $size size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsListGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\ContinuationTokenResponseStaffGroupResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsStaffGroupsListGet($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsListGet'][0])
    {
        list($response) = $this->v4OrganizationsStaffGroupsListGetWithHttpInfo($continuation_token, $size, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsStaffGroupsListGetWithHttpInfo
     *
     * List staff groups
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsListGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\ContinuationTokenResponseStaffGroupResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsStaffGroupsListGetWithHttpInfo($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsListGet'][0])
    {
        $request = $this->v4OrganizationsStaffGroupsListGetRequest($continuation_token, $size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\ContinuationTokenResponseStaffGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\ContinuationTokenResponseStaffGroupResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\ContinuationTokenResponseStaffGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\ContinuationTokenResponseStaffGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\ContinuationTokenResponseStaffGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsStaffGroupsListGetAsync
     *
     * List staff groups
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsListGetAsync($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsListGet'][0])
    {
        return $this->v4OrganizationsStaffGroupsListGetAsyncWithHttpInfo($continuation_token, $size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsStaffGroupsListGetAsyncWithHttpInfo
     *
     * List staff groups
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsListGetAsyncWithHttpInfo($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsListGet'][0])
    {
        $returnType = '\Submittable\Model\ContinuationTokenResponseStaffGroupResponse';
        $request = $this->v4OrganizationsStaffGroupsListGetRequest($continuation_token, $size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsStaffGroupsListGet'
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsStaffGroupsListGetRequest($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsListGet'][0])
    {


        if ($size !== null && $size > 500) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling OrganizationsApi.v4OrganizationsStaffGroupsListGet, must be smaller than or equal to 500.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling OrganizationsApi.v4OrganizationsStaffGroupsListGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v4/organizations/staffGroups/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsStaffGroupsPost
     *
     * Create staff group
     *
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\StaffGroupResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsStaffGroupsPost($staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsPost'][0])
    {
        list($response) = $this->v4OrganizationsStaffGroupsPostWithHttpInfo($staff_group_request, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsStaffGroupsPostWithHttpInfo
     *
     * Create staff group
     *
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\StaffGroupResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsStaffGroupsPostWithHttpInfo($staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsPost'][0])
    {
        $request = $this->v4OrganizationsStaffGroupsPostRequest($staff_group_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Submittable\Model\StaffGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\StaffGroupResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\StaffGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\StaffGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\StaffGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsStaffGroupsPostAsync
     *
     * Create staff group
     *
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsPostAsync($staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsPost'][0])
    {
        return $this->v4OrganizationsStaffGroupsPostAsyncWithHttpInfo($staff_group_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsStaffGroupsPostAsyncWithHttpInfo
     *
     * Create staff group
     *
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsPostAsyncWithHttpInfo($staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsPost'][0])
    {
        $returnType = '\Submittable\Model\StaffGroupResponse';
        $request = $this->v4OrganizationsStaffGroupsPostRequest($staff_group_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsStaffGroupsPost'
     *
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsStaffGroupsPostRequest($staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsPost'][0])
    {



        $resourcePath = '/v4/organizations/staffGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($staff_group_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($staff_group_request));
            } else {
                $httpBody = $staff_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdDelete
     *
     * Delete staff group
     *
     * @param  string $staff_group_id staff_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdDelete($staff_group_id, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'][0])
    {
        $this->v4OrganizationsStaffGroupsStaffGroupIdDeleteWithHttpInfo($staff_group_id, $contentType);
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdDeleteWithHttpInfo
     *
     * Delete staff group
     *
     * @param  string $staff_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdDeleteWithHttpInfo($staff_group_id, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'][0])
    {
        $request = $this->v4OrganizationsStaffGroupsStaffGroupIdDeleteRequest($staff_group_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdDeleteAsync
     *
     * Delete staff group
     *
     * @param  string $staff_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdDeleteAsync($staff_group_id, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'][0])
    {
        return $this->v4OrganizationsStaffGroupsStaffGroupIdDeleteAsyncWithHttpInfo($staff_group_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdDeleteAsyncWithHttpInfo
     *
     * Delete staff group
     *
     * @param  string $staff_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdDeleteAsyncWithHttpInfo($staff_group_id, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v4OrganizationsStaffGroupsStaffGroupIdDeleteRequest($staff_group_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsStaffGroupsStaffGroupIdDelete'
     *
     * @param  string $staff_group_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdDeleteRequest($staff_group_id, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdDelete'][0])
    {

        // verify the required parameter 'staff_group_id' is set
        if ($staff_group_id === null || (is_array($staff_group_id) && count($staff_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff_group_id when calling v4OrganizationsStaffGroupsStaffGroupIdDelete'
            );
        }


        $resourcePath = '/v4/organizations/staffGroups/{staffGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($staff_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staffGroupId' . '}',
                ObjectSerializer::toPathValue($staff_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdPut
     *
     * Update staff group
     *
     * @param  string $staff_group_id staff_group_id (required)
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\StaffGroupResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdPut($staff_group_id, $staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'][0])
    {
        list($response) = $this->v4OrganizationsStaffGroupsStaffGroupIdPutWithHttpInfo($staff_group_id, $staff_group_request, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdPutWithHttpInfo
     *
     * Update staff group
     *
     * @param  string $staff_group_id (required)
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\StaffGroupResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdPutWithHttpInfo($staff_group_id, $staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'][0])
    {
        $request = $this->v4OrganizationsStaffGroupsStaffGroupIdPutRequest($staff_group_id, $staff_group_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Submittable\Model\StaffGroupResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\StaffGroupResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\StaffGroupResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\StaffGroupResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\StaffGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdPutAsync
     *
     * Update staff group
     *
     * @param  string $staff_group_id (required)
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdPutAsync($staff_group_id, $staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'][0])
    {
        return $this->v4OrganizationsStaffGroupsStaffGroupIdPutAsyncWithHttpInfo($staff_group_id, $staff_group_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsStaffGroupsStaffGroupIdPutAsyncWithHttpInfo
     *
     * Update staff group
     *
     * @param  string $staff_group_id (required)
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdPutAsyncWithHttpInfo($staff_group_id, $staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'][0])
    {
        $returnType = '\Submittable\Model\StaffGroupResponse';
        $request = $this->v4OrganizationsStaffGroupsStaffGroupIdPutRequest($staff_group_id, $staff_group_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsStaffGroupsStaffGroupIdPut'
     *
     * @param  string $staff_group_id (required)
     * @param  \Submittable\Model\StaffGroupRequest|null $staff_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsStaffGroupsStaffGroupIdPutRequest($staff_group_id, $staff_group_request = null, string $contentType = self::contentTypes['v4OrganizationsStaffGroupsStaffGroupIdPut'][0])
    {

        // verify the required parameter 'staff_group_id' is set
        if ($staff_group_id === null || (is_array($staff_group_id) && count($staff_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $staff_group_id when calling v4OrganizationsStaffGroupsStaffGroupIdPut'
            );
        }



        $resourcePath = '/v4/organizations/staffGroups/{staffGroupId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($staff_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'staffGroupId' . '}',
                ObjectSerializer::toPathValue($staff_group_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($staff_group_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($staff_group_request));
            } else {
                $httpBody = $staff_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamDelete
     *
     * Remove Team Members from an Organization
     *
     * @param  string[]|null $user_id user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4OrganizationsTeamDelete($user_id = null, string $contentType = self::contentTypes['v4OrganizationsTeamDelete'][0])
    {
        $this->v4OrganizationsTeamDeleteWithHttpInfo($user_id, $contentType);
    }

    /**
     * Operation v4OrganizationsTeamDeleteWithHttpInfo
     *
     * Remove Team Members from an Organization
     *
     * @param  string[]|null $user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamDeleteWithHttpInfo($user_id = null, string $contentType = self::contentTypes['v4OrganizationsTeamDelete'][0])
    {
        $request = $this->v4OrganizationsTeamDeleteRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamDeleteAsync
     *
     * Remove Team Members from an Organization
     *
     * @param  string[]|null $user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamDeleteAsync($user_id = null, string $contentType = self::contentTypes['v4OrganizationsTeamDelete'][0])
    {
        return $this->v4OrganizationsTeamDeleteAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamDeleteAsyncWithHttpInfo
     *
     * Remove Team Members from an Organization
     *
     * @param  string[]|null $user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamDeleteAsyncWithHttpInfo($user_id = null, string $contentType = self::contentTypes['v4OrganizationsTeamDelete'][0])
    {
        $returnType = '';
        $request = $this->v4OrganizationsTeamDeleteRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamDelete'
     *
     * @param  string[]|null $user_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamDeleteRequest($user_id = null, string $contentType = self::contentTypes['v4OrganizationsTeamDelete'][0])
    {

        if ($user_id !== null && count($user_id) > 500) {
            throw new \InvalidArgumentException('invalid value for "$user_id" when calling OrganizationsApi.v4OrganizationsTeamDelete, number of items must be less than or equal to 500.');
        }
        if ($user_id !== null && count($user_id) < 1) {
            throw new \InvalidArgumentException('invalid value for "$user_id" when calling OrganizationsApi.v4OrganizationsTeamDelete, number of items must be greater than or equal to 1.');
        }
        

        $resourcePath = '/v4/organizations/team';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamGet
     *
     * Get team members
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\GetTeamMembersResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsTeamGet(string $contentType = self::contentTypes['v4OrganizationsTeamGet'][0])
    {
        list($response) = $this->v4OrganizationsTeamGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsTeamGetWithHttpInfo
     *
     * Get team members
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\GetTeamMembersResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamGetWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsTeamGet'][0])
    {
        $request = $this->v4OrganizationsTeamGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\GetTeamMembersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\GetTeamMembersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\GetTeamMembersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\GetTeamMembersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\GetTeamMembersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamGetAsync
     *
     * Get team members
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamGetAsync(string $contentType = self::contentTypes['v4OrganizationsTeamGet'][0])
    {
        return $this->v4OrganizationsTeamGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamGetAsyncWithHttpInfo
     *
     * Get team members
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsTeamGet'][0])
    {
        $returnType = '\Submittable\Model\GetTeamMembersResponse';
        $request = $this->v4OrganizationsTeamGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamGetRequest(string $contentType = self::contentTypes['v4OrganizationsTeamGet'][0])
    {


        $resourcePath = '/v4/organizations/team';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamInvitesDeletePost
     *
     * Remove any unaccepted staff invites for the given emails
     *
     * @param  \Submittable\Model\RemoveStaffInviteRequest|null $remove_staff_invite_request remove_staff_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesDeletePost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4OrganizationsTeamInvitesDeletePost($remove_staff_invite_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesDeletePost'][0])
    {
        $this->v4OrganizationsTeamInvitesDeletePostWithHttpInfo($remove_staff_invite_request, $contentType);
    }

    /**
     * Operation v4OrganizationsTeamInvitesDeletePostWithHttpInfo
     *
     * Remove any unaccepted staff invites for the given emails
     *
     * @param  \Submittable\Model\RemoveStaffInviteRequest|null $remove_staff_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesDeletePost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamInvitesDeletePostWithHttpInfo($remove_staff_invite_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesDeletePost'][0])
    {
        $request = $this->v4OrganizationsTeamInvitesDeletePostRequest($remove_staff_invite_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamInvitesDeletePostAsync
     *
     * Remove any unaccepted staff invites for the given emails
     *
     * @param  \Submittable\Model\RemoveStaffInviteRequest|null $remove_staff_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamInvitesDeletePostAsync($remove_staff_invite_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesDeletePost'][0])
    {
        return $this->v4OrganizationsTeamInvitesDeletePostAsyncWithHttpInfo($remove_staff_invite_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamInvitesDeletePostAsyncWithHttpInfo
     *
     * Remove any unaccepted staff invites for the given emails
     *
     * @param  \Submittable\Model\RemoveStaffInviteRequest|null $remove_staff_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamInvitesDeletePostAsyncWithHttpInfo($remove_staff_invite_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesDeletePost'][0])
    {
        $returnType = '';
        $request = $this->v4OrganizationsTeamInvitesDeletePostRequest($remove_staff_invite_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamInvitesDeletePost'
     *
     * @param  \Submittable\Model\RemoveStaffInviteRequest|null $remove_staff_invite_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamInvitesDeletePostRequest($remove_staff_invite_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesDeletePost'][0])
    {



        $resourcePath = '/v4/organizations/team/invites/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remove_staff_invite_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remove_staff_invite_request));
            } else {
                $httpBody = $remove_staff_invite_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamInvitesGet
     *
     * Get list of team invites
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\TeamInviteResponse[]|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsTeamInvitesGet(string $contentType = self::contentTypes['v4OrganizationsTeamInvitesGet'][0])
    {
        list($response) = $this->v4OrganizationsTeamInvitesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsTeamInvitesGetWithHttpInfo
     *
     * Get list of team invites
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\TeamInviteResponse[]|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamInvitesGetWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsTeamInvitesGet'][0])
    {
        $request = $this->v4OrganizationsTeamInvitesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\TeamInviteResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\TeamInviteResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\TeamInviteResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\TeamInviteResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\TeamInviteResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamInvitesGetAsync
     *
     * Get list of team invites
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamInvitesGetAsync(string $contentType = self::contentTypes['v4OrganizationsTeamInvitesGet'][0])
    {
        return $this->v4OrganizationsTeamInvitesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamInvitesGetAsyncWithHttpInfo
     *
     * Get list of team invites
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamInvitesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v4OrganizationsTeamInvitesGet'][0])
    {
        $returnType = '\Submittable\Model\TeamInviteResponse[]';
        $request = $this->v4OrganizationsTeamInvitesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamInvitesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamInvitesGetRequest(string $contentType = self::contentTypes['v4OrganizationsTeamInvitesGet'][0])
    {


        $resourcePath = '/v4/organizations/team/invites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamInvitesResendPost
     *
     * Resend any unaccepted staff invites for the ids
     *
     * @param  \Submittable\Model\ResendStaffInvitesRequest|null $resend_staff_invites_request resend_staff_invites_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesResendPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4OrganizationsTeamInvitesResendPost($resend_staff_invites_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesResendPost'][0])
    {
        $this->v4OrganizationsTeamInvitesResendPostWithHttpInfo($resend_staff_invites_request, $contentType);
    }

    /**
     * Operation v4OrganizationsTeamInvitesResendPostWithHttpInfo
     *
     * Resend any unaccepted staff invites for the ids
     *
     * @param  \Submittable\Model\ResendStaffInvitesRequest|null $resend_staff_invites_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesResendPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamInvitesResendPostWithHttpInfo($resend_staff_invites_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesResendPost'][0])
    {
        $request = $this->v4OrganizationsTeamInvitesResendPostRequest($resend_staff_invites_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamInvitesResendPostAsync
     *
     * Resend any unaccepted staff invites for the ids
     *
     * @param  \Submittable\Model\ResendStaffInvitesRequest|null $resend_staff_invites_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesResendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamInvitesResendPostAsync($resend_staff_invites_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesResendPost'][0])
    {
        return $this->v4OrganizationsTeamInvitesResendPostAsyncWithHttpInfo($resend_staff_invites_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamInvitesResendPostAsyncWithHttpInfo
     *
     * Resend any unaccepted staff invites for the ids
     *
     * @param  \Submittable\Model\ResendStaffInvitesRequest|null $resend_staff_invites_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesResendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamInvitesResendPostAsyncWithHttpInfo($resend_staff_invites_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesResendPost'][0])
    {
        $returnType = '';
        $request = $this->v4OrganizationsTeamInvitesResendPostRequest($resend_staff_invites_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamInvitesResendPost'
     *
     * @param  \Submittable\Model\ResendStaffInvitesRequest|null $resend_staff_invites_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamInvitesResendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamInvitesResendPostRequest($resend_staff_invites_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamInvitesResendPost'][0])
    {



        $resourcePath = '/v4/organizations/team/invites/resend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resend_staff_invites_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resend_staff_invites_request));
            } else {
                $httpBody = $resend_staff_invites_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamListPost
     *
     * Get a list of team members
     *
     * @param  \Submittable\Model\GetTeamMembersRequest|null $get_team_members_request get_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamListPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\TeamMemberResponse[]|\Submittable\Model\BadRequestResponse
     */
    public function v4OrganizationsTeamListPost($get_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamListPost'][0])
    {
        list($response) = $this->v4OrganizationsTeamListPostWithHttpInfo($get_team_members_request, $contentType);
        return $response;
    }

    /**
     * Operation v4OrganizationsTeamListPostWithHttpInfo
     *
     * Get a list of team members
     *
     * @param  \Submittable\Model\GetTeamMembersRequest|null $get_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamListPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\TeamMemberResponse[]|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamListPostWithHttpInfo($get_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamListPost'][0])
    {
        $request = $this->v4OrganizationsTeamListPostRequest($get_team_members_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\TeamMemberResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\TeamMemberResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\TeamMemberResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\TeamMemberResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\TeamMemberResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamListPostAsync
     *
     * Get a list of team members
     *
     * @param  \Submittable\Model\GetTeamMembersRequest|null $get_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamListPostAsync($get_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamListPost'][0])
    {
        return $this->v4OrganizationsTeamListPostAsyncWithHttpInfo($get_team_members_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamListPostAsyncWithHttpInfo
     *
     * Get a list of team members
     *
     * @param  \Submittable\Model\GetTeamMembersRequest|null $get_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamListPostAsyncWithHttpInfo($get_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamListPost'][0])
    {
        $returnType = '\Submittable\Model\TeamMemberResponse[]';
        $request = $this->v4OrganizationsTeamListPostRequest($get_team_members_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamListPost'
     *
     * @param  \Submittable\Model\GetTeamMembersRequest|null $get_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamListPostRequest($get_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamListPost'][0])
    {



        $resourcePath = '/v4/organizations/team/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_team_members_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_team_members_request));
            } else {
                $httpBody = $get_team_members_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamPatch
     *
     * Updates Team Members
     *
     * @param  \Submittable\Model\UpdateTeamMembersRequest|null $update_team_members_request update_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPatch'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4OrganizationsTeamPatch($update_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPatch'][0])
    {
        $this->v4OrganizationsTeamPatchWithHttpInfo($update_team_members_request, $contentType);
    }

    /**
     * Operation v4OrganizationsTeamPatchWithHttpInfo
     *
     * Updates Team Members
     *
     * @param  \Submittable\Model\UpdateTeamMembersRequest|null $update_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPatch'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamPatchWithHttpInfo($update_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPatch'][0])
    {
        $request = $this->v4OrganizationsTeamPatchRequest($update_team_members_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamPatchAsync
     *
     * Updates Team Members
     *
     * @param  \Submittable\Model\UpdateTeamMembersRequest|null $update_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamPatchAsync($update_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPatch'][0])
    {
        return $this->v4OrganizationsTeamPatchAsyncWithHttpInfo($update_team_members_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamPatchAsyncWithHttpInfo
     *
     * Updates Team Members
     *
     * @param  \Submittable\Model\UpdateTeamMembersRequest|null $update_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamPatchAsyncWithHttpInfo($update_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPatch'][0])
    {
        $returnType = '';
        $request = $this->v4OrganizationsTeamPatchRequest($update_team_members_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamPatch'
     *
     * @param  \Submittable\Model\UpdateTeamMembersRequest|null $update_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamPatchRequest($update_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPatch'][0])
    {



        $resourcePath = '/v4/organizations/team';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_team_members_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_team_members_request));
            } else {
                $httpBody = $update_team_members_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4OrganizationsTeamPost
     *
     * Add Team Members to Organization
     *
     * @param  \Submittable\Model\AddTeamMembersRequest|null $add_team_members_request add_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4OrganizationsTeamPost($add_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPost'][0])
    {
        $this->v4OrganizationsTeamPostWithHttpInfo($add_team_members_request, $contentType);
    }

    /**
     * Operation v4OrganizationsTeamPostWithHttpInfo
     *
     * Add Team Members to Organization
     *
     * @param  \Submittable\Model\AddTeamMembersRequest|null $add_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4OrganizationsTeamPostWithHttpInfo($add_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPost'][0])
    {
        $request = $this->v4OrganizationsTeamPostRequest($add_team_members_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4OrganizationsTeamPostAsync
     *
     * Add Team Members to Organization
     *
     * @param  \Submittable\Model\AddTeamMembersRequest|null $add_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamPostAsync($add_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPost'][0])
    {
        return $this->v4OrganizationsTeamPostAsyncWithHttpInfo($add_team_members_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4OrganizationsTeamPostAsyncWithHttpInfo
     *
     * Add Team Members to Organization
     *
     * @param  \Submittable\Model\AddTeamMembersRequest|null $add_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4OrganizationsTeamPostAsyncWithHttpInfo($add_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPost'][0])
    {
        $returnType = '';
        $request = $this->v4OrganizationsTeamPostRequest($add_team_members_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4OrganizationsTeamPost'
     *
     * @param  \Submittable\Model\AddTeamMembersRequest|null $add_team_members_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4OrganizationsTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4OrganizationsTeamPostRequest($add_team_members_request = null, string $contentType = self::contentTypes['v4OrganizationsTeamPost'][0])
    {



        $resourcePath = '/v4/organizations/team';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_team_members_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_team_members_request));
            } else {
                $httpBody = $add_team_members_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
