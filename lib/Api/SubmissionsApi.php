<?php
/**
 * SubmissionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SubmissionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubmissionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getSubmission' => [
            'application/json',
        ],
        'getSubmissions' => [
            'application/json',
        ],
        'v4MySubmissionsExternalPost' => [
            'application/json',
        ],
        'v4SubmissionsAssignmentsListPost' => [
            'application/json',
        ],
        'v4SubmissionsAssignmentsPut' => [
            'application/json',
        ],
        'v4SubmissionsAssignmentsRandomPost' => [
            'application/json',
        ],
        'v4SubmissionsBulkPost' => [
            'application/json',
        ],
        'v4SubmissionsEditingClosePut' => [
            'application/json',
        ],
        'v4SubmissionsEditingOpenPut' => [
            'application/json',
        ],
        'v4SubmissionsGet' => [
            'application/json',
        ],
        'v4SubmissionsHistoryGet' => [
            'application/json',
        ],
        'v4SubmissionsIdConvertIntsPost' => [
            'application/json',
        ],
        'v4SubmissionsIdConvertSubmissionIdGet' => [
            'application/json',
        ],
        'v4SubmissionsLabelsPut' => [
            'application/json',
        ],
        'v4SubmissionsMessagePost' => [
            'application/json',
        ],
        'v4SubmissionsPost' => [
            'application/json',
        ],
        'v4SubmissionsPublicOrganizationPost' => [
            'application/json',
        ],
        'v4SubmissionsReviewStagePut' => [
            'application/json',
        ],
        'v4SubmissionsStatusPut' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdArchivePut' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdAssignmentsPut' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdDelete' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdLabelsLabelIdDelete' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdLabelsLabelIdPut' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdNotesAttachmentsPost' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdNotesPost' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdStageStageIdPut' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdStatusPut' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdTransferPost' => [
            'application/json',
        ],
        'v4SubmissionsSubmissionIdUnarchivePut' => [
            'application/json',
        ],
        'v4SubmissionsTeamAssignmentsGet' => [
            'application/json',
        ],
        'v4SubmissionsTransfersPost' => [
            'application/json',
        ],
        'v4SubmissionsTransfersTransferIdCancelPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getSubmission
     *
     * Get a submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionResponse
     */
    public function getSubmission($submission_id, string $contentType = self::contentTypes['getSubmission'][0])
    {
        list($response) = $this->getSubmissionWithHttpInfo($submission_id, $contentType);
        return $response;
    }

    /**
     * Operation getSubmissionWithHttpInfo
     *
     * Get a submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmission'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubmissionWithHttpInfo($submission_id, string $contentType = self::contentTypes['getSubmission'][0])
    {
        $request = $this->getSubmissionRequest($submission_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubmissionAsync
     *
     * Get a submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubmissionAsync($submission_id, string $contentType = self::contentTypes['getSubmission'][0])
    {
        return $this->getSubmissionAsyncWithHttpInfo($submission_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubmissionAsyncWithHttpInfo
     *
     * Get a submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubmissionAsyncWithHttpInfo($submission_id, string $contentType = self::contentTypes['getSubmission'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionResponse';
        $request = $this->getSubmissionRequest($submission_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubmission'
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubmissionRequest($submission_id, string $contentType = self::contentTypes['getSubmission'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling getSubmission'
            );
        }


        $resourcePath = '/v4/submissions/{submissionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubmissions
     *
     * Get submissions
     *
     * @param  \OpenAPI\Client\Model\GetSubmissionsRequest|null $get_submissions_request get_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmissions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionResponse[]
     */
    public function getSubmissions($get_submissions_request = null, string $contentType = self::contentTypes['getSubmissions'][0])
    {
        list($response) = $this->getSubmissionsWithHttpInfo($get_submissions_request, $contentType);
        return $response;
    }

    /**
     * Operation getSubmissionsWithHttpInfo
     *
     * Get submissions
     *
     * @param  \OpenAPI\Client\Model\GetSubmissionsRequest|null $get_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmissions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubmissionsWithHttpInfo($get_submissions_request = null, string $contentType = self::contentTypes['getSubmissions'][0])
    {
        $request = $this->getSubmissionsRequest($get_submissions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubmissionsAsync
     *
     * Get submissions
     *
     * @param  \OpenAPI\Client\Model\GetSubmissionsRequest|null $get_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubmissionsAsync($get_submissions_request = null, string $contentType = self::contentTypes['getSubmissions'][0])
    {
        return $this->getSubmissionsAsyncWithHttpInfo($get_submissions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubmissionsAsyncWithHttpInfo
     *
     * Get submissions
     *
     * @param  \OpenAPI\Client\Model\GetSubmissionsRequest|null $get_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubmissionsAsyncWithHttpInfo($get_submissions_request = null, string $contentType = self::contentTypes['getSubmissions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionResponse[]';
        $request = $this->getSubmissionsRequest($get_submissions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubmissions'
     *
     * @param  \OpenAPI\Client\Model\GetSubmissionsRequest|null $get_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubmissionsRequest($get_submissions_request = null, string $contentType = self::contentTypes['getSubmissions'][0])
    {



        $resourcePath = '/v4/submissions/ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_submissions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_submissions_request));
            } else {
                $httpBody = $get_submissions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4MySubmissionsExternalPost
     *
     * Create external submission
     *
     * @param  \OpenAPI\Client\Model\ExternalSubmissionRequest|null $external_submission_request external_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MySubmissionsExternalPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ExternalSubmissionResponse|\OpenAPI\Client\Model\BadRequestResponse
     */
    public function v4MySubmissionsExternalPost($external_submission_request = null, string $contentType = self::contentTypes['v4MySubmissionsExternalPost'][0])
    {
        list($response) = $this->v4MySubmissionsExternalPostWithHttpInfo($external_submission_request, $contentType);
        return $response;
    }

    /**
     * Operation v4MySubmissionsExternalPostWithHttpInfo
     *
     * Create external submission
     *
     * @param  \OpenAPI\Client\Model\ExternalSubmissionRequest|null $external_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MySubmissionsExternalPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ExternalSubmissionResponse|\OpenAPI\Client\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4MySubmissionsExternalPostWithHttpInfo($external_submission_request = null, string $contentType = self::contentTypes['v4MySubmissionsExternalPost'][0])
    {
        $request = $this->v4MySubmissionsExternalPostRequest($external_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ExternalSubmissionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ExternalSubmissionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ExternalSubmissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ExternalSubmissionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExternalSubmissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4MySubmissionsExternalPostAsync
     *
     * Create external submission
     *
     * @param  \OpenAPI\Client\Model\ExternalSubmissionRequest|null $external_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MySubmissionsExternalPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MySubmissionsExternalPostAsync($external_submission_request = null, string $contentType = self::contentTypes['v4MySubmissionsExternalPost'][0])
    {
        return $this->v4MySubmissionsExternalPostAsyncWithHttpInfo($external_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4MySubmissionsExternalPostAsyncWithHttpInfo
     *
     * Create external submission
     *
     * @param  \OpenAPI\Client\Model\ExternalSubmissionRequest|null $external_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MySubmissionsExternalPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4MySubmissionsExternalPostAsyncWithHttpInfo($external_submission_request = null, string $contentType = self::contentTypes['v4MySubmissionsExternalPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ExternalSubmissionResponse';
        $request = $this->v4MySubmissionsExternalPostRequest($external_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4MySubmissionsExternalPost'
     *
     * @param  \OpenAPI\Client\Model\ExternalSubmissionRequest|null $external_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4MySubmissionsExternalPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4MySubmissionsExternalPostRequest($external_submission_request = null, string $contentType = self::contentTypes['v4MySubmissionsExternalPost'][0])
    {



        $resourcePath = '/v4/my/submissions/external';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($external_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($external_submission_request));
            } else {
                $httpBody = $external_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsAssignmentsListPost
     *
     * Get submission assignments organized by userId
     *
     * @param  \OpenAPI\Client\Model\SubmissionGuidsBaseRequest|null $submission_guids_base_request submission_guids_base_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsListPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListSubmissionAssignmentsResponse
     */
    public function v4SubmissionsAssignmentsListPost($submission_guids_base_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsListPost'][0])
    {
        list($response) = $this->v4SubmissionsAssignmentsListPostWithHttpInfo($submission_guids_base_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsAssignmentsListPostWithHttpInfo
     *
     * Get submission assignments organized by userId
     *
     * @param  \OpenAPI\Client\Model\SubmissionGuidsBaseRequest|null $submission_guids_base_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsListPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListSubmissionAssignmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsAssignmentsListPostWithHttpInfo($submission_guids_base_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsListPost'][0])
    {
        $request = $this->v4SubmissionsAssignmentsListPostRequest($submission_guids_base_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListSubmissionAssignmentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListSubmissionAssignmentsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListSubmissionAssignmentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ListSubmissionAssignmentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListSubmissionAssignmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsAssignmentsListPostAsync
     *
     * Get submission assignments organized by userId
     *
     * @param  \OpenAPI\Client\Model\SubmissionGuidsBaseRequest|null $submission_guids_base_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsAssignmentsListPostAsync($submission_guids_base_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsListPost'][0])
    {
        return $this->v4SubmissionsAssignmentsListPostAsyncWithHttpInfo($submission_guids_base_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsAssignmentsListPostAsyncWithHttpInfo
     *
     * Get submission assignments organized by userId
     *
     * @param  \OpenAPI\Client\Model\SubmissionGuidsBaseRequest|null $submission_guids_base_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsAssignmentsListPostAsyncWithHttpInfo($submission_guids_base_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsListPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListSubmissionAssignmentsResponse';
        $request = $this->v4SubmissionsAssignmentsListPostRequest($submission_guids_base_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsAssignmentsListPost'
     *
     * @param  \OpenAPI\Client\Model\SubmissionGuidsBaseRequest|null $submission_guids_base_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsAssignmentsListPostRequest($submission_guids_base_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsListPost'][0])
    {



        $resourcePath = '/v4/submissions/assignments/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($submission_guids_base_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($submission_guids_base_request));
            } else {
                $httpBody = $submission_guids_base_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsAssignmentsPut
     *
     * Update assignments on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsAssignmentsRequest|null $update_submissions_assignments_request update_submissions_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse
     */
    public function v4SubmissionsAssignmentsPut($update_submissions_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsPut'][0])
    {
        list($response) = $this->v4SubmissionsAssignmentsPutWithHttpInfo($update_submissions_assignments_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsAssignmentsPutWithHttpInfo
     *
     * Update assignments on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsAssignmentsRequest|null $update_submissions_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsAssignmentsPutWithHttpInfo($update_submissions_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsPut'][0])
    {
        $request = $this->v4SubmissionsAssignmentsPutRequest($update_submissions_assignments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsAssignmentsPutAsync
     *
     * Update assignments on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsAssignmentsRequest|null $update_submissions_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsAssignmentsPutAsync($update_submissions_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsPut'][0])
    {
        return $this->v4SubmissionsAssignmentsPutAsyncWithHttpInfo($update_submissions_assignments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsAssignmentsPutAsyncWithHttpInfo
     *
     * Update assignments on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsAssignmentsRequest|null $update_submissions_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsAssignmentsPutAsyncWithHttpInfo($update_submissions_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse';
        $request = $this->v4SubmissionsAssignmentsPutRequest($update_submissions_assignments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsAssignmentsPut'
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsAssignmentsRequest|null $update_submissions_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsAssignmentsPutRequest($update_submissions_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsPut'][0])
    {



        $resourcePath = '/v4/submissions/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submissions_assignments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_submissions_assignments_request));
            } else {
                $httpBody = $update_submissions_assignments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsAssignmentsRandomPost
     *
     * Add random assignments to submissions
     *
     * @param  \OpenAPI\Client\Model\RandomSubmissionAssignmentsRequest|null $random_submission_assignments_request random_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsRandomPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse
     */
    public function v4SubmissionsAssignmentsRandomPost($random_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsRandomPost'][0])
    {
        list($response) = $this->v4SubmissionsAssignmentsRandomPostWithHttpInfo($random_submission_assignments_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsAssignmentsRandomPostWithHttpInfo
     *
     * Add random assignments to submissions
     *
     * @param  \OpenAPI\Client\Model\RandomSubmissionAssignmentsRequest|null $random_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsRandomPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsAssignmentsRandomPostWithHttpInfo($random_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsRandomPost'][0])
    {
        $request = $this->v4SubmissionsAssignmentsRandomPostRequest($random_submission_assignments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsAssignmentsRandomPostAsync
     *
     * Add random assignments to submissions
     *
     * @param  \OpenAPI\Client\Model\RandomSubmissionAssignmentsRequest|null $random_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsRandomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsAssignmentsRandomPostAsync($random_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsRandomPost'][0])
    {
        return $this->v4SubmissionsAssignmentsRandomPostAsyncWithHttpInfo($random_submission_assignments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsAssignmentsRandomPostAsyncWithHttpInfo
     *
     * Add random assignments to submissions
     *
     * @param  \OpenAPI\Client\Model\RandomSubmissionAssignmentsRequest|null $random_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsRandomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsAssignmentsRandomPostAsyncWithHttpInfo($random_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsRandomPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsApiResponse';
        $request = $this->v4SubmissionsAssignmentsRandomPostRequest($random_submission_assignments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsAssignmentsRandomPost'
     *
     * @param  \OpenAPI\Client\Model\RandomSubmissionAssignmentsRequest|null $random_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsAssignmentsRandomPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsAssignmentsRandomPostRequest($random_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsAssignmentsRandomPost'][0])
    {



        $resourcePath = '/v4/submissions/assignments/random';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($random_submission_assignments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($random_submission_assignments_request));
            } else {
                $httpBody = $random_submission_assignments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsBulkPost
     *
     * Bulk import submissions
     *
     * @param  \OpenAPI\Client\Model\BulkImportSubmissionsRequest|null $bulk_import_submissions_request bulk_import_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsBulkPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\BulkImportSubmissionsResponse
     */
    public function v4SubmissionsBulkPost($bulk_import_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsBulkPost'][0])
    {
        list($response) = $this->v4SubmissionsBulkPostWithHttpInfo($bulk_import_submissions_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsBulkPostWithHttpInfo
     *
     * Bulk import submissions
     *
     * @param  \OpenAPI\Client\Model\BulkImportSubmissionsRequest|null $bulk_import_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsBulkPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\BulkImportSubmissionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsBulkPostWithHttpInfo($bulk_import_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsBulkPost'][0])
    {
        $request = $this->v4SubmissionsBulkPostRequest($bulk_import_submissions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\BulkImportSubmissionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BulkImportSubmissionsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BulkImportSubmissionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\BulkImportSubmissionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BulkImportSubmissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsBulkPostAsync
     *
     * Bulk import submissions
     *
     * @param  \OpenAPI\Client\Model\BulkImportSubmissionsRequest|null $bulk_import_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsBulkPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsBulkPostAsync($bulk_import_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsBulkPost'][0])
    {
        return $this->v4SubmissionsBulkPostAsyncWithHttpInfo($bulk_import_submissions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsBulkPostAsyncWithHttpInfo
     *
     * Bulk import submissions
     *
     * @param  \OpenAPI\Client\Model\BulkImportSubmissionsRequest|null $bulk_import_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsBulkPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsBulkPostAsyncWithHttpInfo($bulk_import_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsBulkPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BulkImportSubmissionsResponse';
        $request = $this->v4SubmissionsBulkPostRequest($bulk_import_submissions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsBulkPost'
     *
     * @param  \OpenAPI\Client\Model\BulkImportSubmissionsRequest|null $bulk_import_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsBulkPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsBulkPostRequest($bulk_import_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsBulkPost'][0])
    {



        $resourcePath = '/v4/submissions/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_import_submissions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_import_submissions_request));
            } else {
                $httpBody = $bulk_import_submissions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsEditingClosePut
     *
     * Close submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingClosePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SubmissionActionResponse
     */
    public function v4SubmissionsEditingClosePut($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingClosePut'][0])
    {
        list($response) = $this->v4SubmissionsEditingClosePutWithHttpInfo($update_submissions_is_open_for_editing_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsEditingClosePutWithHttpInfo
     *
     * Close submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingClosePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SubmissionActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsEditingClosePutWithHttpInfo($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingClosePut'][0])
    {
        $request = $this->v4SubmissionsEditingClosePutRequest($update_submissions_is_open_for_editing_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionActionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsEditingClosePutAsync
     *
     * Close submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingClosePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsEditingClosePutAsync($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingClosePut'][0])
    {
        return $this->v4SubmissionsEditingClosePutAsyncWithHttpInfo($update_submissions_is_open_for_editing_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsEditingClosePutAsyncWithHttpInfo
     *
     * Close submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingClosePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsEditingClosePutAsyncWithHttpInfo($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingClosePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
        $request = $this->v4SubmissionsEditingClosePutRequest($update_submissions_is_open_for_editing_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsEditingClosePut'
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingClosePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsEditingClosePutRequest($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingClosePut'][0])
    {



        $resourcePath = '/v4/submissions/editing/close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submissions_is_open_for_editing_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_submissions_is_open_for_editing_request));
            } else {
                $httpBody = $update_submissions_is_open_for_editing_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsEditingOpenPut
     *
     * Open submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingOpenPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SubmissionActionResponse
     */
    public function v4SubmissionsEditingOpenPut($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingOpenPut'][0])
    {
        list($response) = $this->v4SubmissionsEditingOpenPutWithHttpInfo($update_submissions_is_open_for_editing_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsEditingOpenPutWithHttpInfo
     *
     * Open submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingOpenPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SubmissionActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsEditingOpenPutWithHttpInfo($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingOpenPut'][0])
    {
        $request = $this->v4SubmissionsEditingOpenPutRequest($update_submissions_is_open_for_editing_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionActionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsEditingOpenPutAsync
     *
     * Open submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingOpenPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsEditingOpenPutAsync($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingOpenPut'][0])
    {
        return $this->v4SubmissionsEditingOpenPutAsyncWithHttpInfo($update_submissions_is_open_for_editing_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsEditingOpenPutAsyncWithHttpInfo
     *
     * Open submissions for editing
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingOpenPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsEditingOpenPutAsyncWithHttpInfo($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingOpenPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
        $request = $this->v4SubmissionsEditingOpenPutRequest($update_submissions_is_open_for_editing_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsEditingOpenPut'
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsIsOpenForEditingRequest|null $update_submissions_is_open_for_editing_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsEditingOpenPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsEditingOpenPutRequest($update_submissions_is_open_for_editing_request = null, string $contentType = self::contentTypes['v4SubmissionsEditingOpenPut'][0])
    {



        $resourcePath = '/v4/submissions/editing/open';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submissions_is_open_for_editing_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_submissions_is_open_for_editing_request));
            } else {
                $httpBody = $update_submissions_is_open_for_editing_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsGet
     *
     * Get a page of submissions
     *
     * @param  string|null $continuation_token continuation_token (optional)
     * @param  int|null $size size (optional, default to 20)
     * @param  string|null $search search (optional)
     * @param  string[]|null $public_organization_ids_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $public_organization_ids_exclude Exclude matching ids (optional)
     * @param  string[]|null $projects_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $projects_exclude Exclude matching ids (optional)
     * @param  string[]|null $statuses_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $statuses_exclude Exclude matching ids (optional)
     * @param  string[]|null $reviewers reviewers (optional)
     * @param  \OpenAPI\Client\Model\ArchivedStatus|null $archived_status archived_status (optional)
     * @param  string[]|null $labels_include_any labels_include_any (optional)
     * @param  string[]|null $labels_include_all labels_include_all (optional)
     * @param  bool|null $labels_include_unlabeled labels_include_unlabeled (optional)
     * @param  string[]|null $labels_exclude_any labels_exclude_any (optional)
     * @param  string[]|null $labels_exclude_all labels_exclude_all (optional)
     * @param  bool|null $labels_exclude_unlabeled labels_exclude_unlabeled (optional)
     * @param  \DateTime|null $date_from date_from (optional)
     * @param  \DateTime|null $date_to date_to (optional)
     * @param  \OpenAPI\Client\Model\AdditionalFormsStatus[]|null $additional_form_statuses additional_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\RequestFormsStatus[]|null $request_form_statuses request_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $review_status review_status (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $reviewer_progress reviewer_progress (optional)
     * @param  string[]|null $review_stages_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $review_stages_exclude Exclude matching ids (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortField|null $sort_by_field sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortOrder|null $sort_by_order sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse|\OpenAPI\Client\Model\BadRequestResponse
     */
    public function v4SubmissionsGet($continuation_token = null, $size = 20, $search = null, $public_organization_ids_include = null, $public_organization_ids_exclude = null, $projects_include = null, $projects_exclude = null, $statuses_include = null, $statuses_exclude = null, $reviewers = null, $archived_status = null, $labels_include_any = null, $labels_include_all = null, $labels_include_unlabeled = null, $labels_exclude_any = null, $labels_exclude_all = null, $labels_exclude_unlabeled = null, $date_from = null, $date_to = null, $additional_form_statuses = null, $request_form_statuses = null, $review_status = null, $reviewer_progress = null, $review_stages_include = null, $review_stages_exclude = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4SubmissionsGet'][0])
    {
        list($response) = $this->v4SubmissionsGetWithHttpInfo($continuation_token, $size, $search, $public_organization_ids_include, $public_organization_ids_exclude, $projects_include, $projects_exclude, $statuses_include, $statuses_exclude, $reviewers, $archived_status, $labels_include_any, $labels_include_all, $labels_include_unlabeled, $labels_exclude_any, $labels_exclude_all, $labels_exclude_unlabeled, $date_from, $date_to, $additional_form_statuses, $request_form_statuses, $review_status, $reviewer_progress, $review_stages_include, $review_stages_exclude, $sort_by_field, $sort_by_order, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsGetWithHttpInfo
     *
     * Get a page of submissions
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  string[]|null $public_organization_ids_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $public_organization_ids_exclude Exclude matching ids (optional)
     * @param  string[]|null $projects_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $projects_exclude Exclude matching ids (optional)
     * @param  string[]|null $statuses_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $statuses_exclude Exclude matching ids (optional)
     * @param  string[]|null $reviewers (optional)
     * @param  \OpenAPI\Client\Model\ArchivedStatus|null $archived_status (optional)
     * @param  string[]|null $labels_include_any (optional)
     * @param  string[]|null $labels_include_all (optional)
     * @param  bool|null $labels_include_unlabeled (optional)
     * @param  string[]|null $labels_exclude_any (optional)
     * @param  string[]|null $labels_exclude_all (optional)
     * @param  bool|null $labels_exclude_unlabeled (optional)
     * @param  \DateTime|null $date_from (optional)
     * @param  \DateTime|null $date_to (optional)
     * @param  \OpenAPI\Client\Model\AdditionalFormsStatus[]|null $additional_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\RequestFormsStatus[]|null $request_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $review_status (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $reviewer_progress (optional)
     * @param  string[]|null $review_stages_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $review_stages_exclude Exclude matching ids (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse|\OpenAPI\Client\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsGetWithHttpInfo($continuation_token = null, $size = 20, $search = null, $public_organization_ids_include = null, $public_organization_ids_exclude = null, $projects_include = null, $projects_exclude = null, $statuses_include = null, $statuses_exclude = null, $reviewers = null, $archived_status = null, $labels_include_any = null, $labels_include_all = null, $labels_include_unlabeled = null, $labels_exclude_any = null, $labels_exclude_all = null, $labels_exclude_unlabeled = null, $date_from = null, $date_to = null, $additional_form_statuses = null, $request_form_statuses = null, $review_status = null, $reviewer_progress = null, $review_stages_include = null, $review_stages_exclude = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4SubmissionsGet'][0])
    {
        $request = $this->v4SubmissionsGetRequest($continuation_token, $size, $search, $public_organization_ids_include, $public_organization_ids_exclude, $projects_include, $projects_exclude, $statuses_include, $statuses_exclude, $reviewers, $archived_status, $labels_include_any, $labels_include_all, $labels_include_unlabeled, $labels_exclude_any, $labels_exclude_all, $labels_exclude_unlabeled, $date_from, $date_to, $additional_form_statuses, $request_form_statuses, $review_status, $reviewer_progress, $review_stages_include, $review_stages_exclude, $sort_by_field, $sort_by_order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsGetAsync
     *
     * Get a page of submissions
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  string[]|null $public_organization_ids_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $public_organization_ids_exclude Exclude matching ids (optional)
     * @param  string[]|null $projects_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $projects_exclude Exclude matching ids (optional)
     * @param  string[]|null $statuses_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $statuses_exclude Exclude matching ids (optional)
     * @param  string[]|null $reviewers (optional)
     * @param  \OpenAPI\Client\Model\ArchivedStatus|null $archived_status (optional)
     * @param  string[]|null $labels_include_any (optional)
     * @param  string[]|null $labels_include_all (optional)
     * @param  bool|null $labels_include_unlabeled (optional)
     * @param  string[]|null $labels_exclude_any (optional)
     * @param  string[]|null $labels_exclude_all (optional)
     * @param  bool|null $labels_exclude_unlabeled (optional)
     * @param  \DateTime|null $date_from (optional)
     * @param  \DateTime|null $date_to (optional)
     * @param  \OpenAPI\Client\Model\AdditionalFormsStatus[]|null $additional_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\RequestFormsStatus[]|null $request_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $review_status (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $reviewer_progress (optional)
     * @param  string[]|null $review_stages_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $review_stages_exclude Exclude matching ids (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsGetAsync($continuation_token = null, $size = 20, $search = null, $public_organization_ids_include = null, $public_organization_ids_exclude = null, $projects_include = null, $projects_exclude = null, $statuses_include = null, $statuses_exclude = null, $reviewers = null, $archived_status = null, $labels_include_any = null, $labels_include_all = null, $labels_include_unlabeled = null, $labels_exclude_any = null, $labels_exclude_all = null, $labels_exclude_unlabeled = null, $date_from = null, $date_to = null, $additional_form_statuses = null, $request_form_statuses = null, $review_status = null, $reviewer_progress = null, $review_stages_include = null, $review_stages_exclude = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4SubmissionsGet'][0])
    {
        return $this->v4SubmissionsGetAsyncWithHttpInfo($continuation_token, $size, $search, $public_organization_ids_include, $public_organization_ids_exclude, $projects_include, $projects_exclude, $statuses_include, $statuses_exclude, $reviewers, $archived_status, $labels_include_any, $labels_include_all, $labels_include_unlabeled, $labels_exclude_any, $labels_exclude_all, $labels_exclude_unlabeled, $date_from, $date_to, $additional_form_statuses, $request_form_statuses, $review_status, $reviewer_progress, $review_stages_include, $review_stages_exclude, $sort_by_field, $sort_by_order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsGetAsyncWithHttpInfo
     *
     * Get a page of submissions
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  string[]|null $public_organization_ids_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $public_organization_ids_exclude Exclude matching ids (optional)
     * @param  string[]|null $projects_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $projects_exclude Exclude matching ids (optional)
     * @param  string[]|null $statuses_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $statuses_exclude Exclude matching ids (optional)
     * @param  string[]|null $reviewers (optional)
     * @param  \OpenAPI\Client\Model\ArchivedStatus|null $archived_status (optional)
     * @param  string[]|null $labels_include_any (optional)
     * @param  string[]|null $labels_include_all (optional)
     * @param  bool|null $labels_include_unlabeled (optional)
     * @param  string[]|null $labels_exclude_any (optional)
     * @param  string[]|null $labels_exclude_all (optional)
     * @param  bool|null $labels_exclude_unlabeled (optional)
     * @param  \DateTime|null $date_from (optional)
     * @param  \DateTime|null $date_to (optional)
     * @param  \OpenAPI\Client\Model\AdditionalFormsStatus[]|null $additional_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\RequestFormsStatus[]|null $request_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $review_status (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $reviewer_progress (optional)
     * @param  string[]|null $review_stages_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $review_stages_exclude Exclude matching ids (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsGetAsyncWithHttpInfo($continuation_token = null, $size = 20, $search = null, $public_organization_ids_include = null, $public_organization_ids_exclude = null, $projects_include = null, $projects_exclude = null, $statuses_include = null, $statuses_exclude = null, $reviewers = null, $archived_status = null, $labels_include_any = null, $labels_include_all = null, $labels_include_unlabeled = null, $labels_exclude_any = null, $labels_exclude_all = null, $labels_exclude_unlabeled = null, $date_from = null, $date_to = null, $additional_form_statuses = null, $request_form_statuses = null, $review_status = null, $reviewer_progress = null, $review_stages_include = null, $review_stages_exclude = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4SubmissionsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionListResponse';
        $request = $this->v4SubmissionsGetRequest($continuation_token, $size, $search, $public_organization_ids_include, $public_organization_ids_exclude, $projects_include, $projects_exclude, $statuses_include, $statuses_exclude, $reviewers, $archived_status, $labels_include_any, $labels_include_all, $labels_include_unlabeled, $labels_exclude_any, $labels_exclude_all, $labels_exclude_unlabeled, $date_from, $date_to, $additional_form_statuses, $request_form_statuses, $review_status, $reviewer_progress, $review_stages_include, $review_stages_exclude, $sort_by_field, $sort_by_order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsGet'
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $search (optional)
     * @param  string[]|null $public_organization_ids_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $public_organization_ids_exclude Exclude matching ids (optional)
     * @param  string[]|null $projects_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $projects_exclude Exclude matching ids (optional)
     * @param  string[]|null $statuses_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $statuses_exclude Exclude matching ids (optional)
     * @param  string[]|null $reviewers (optional)
     * @param  \OpenAPI\Client\Model\ArchivedStatus|null $archived_status (optional)
     * @param  string[]|null $labels_include_any (optional)
     * @param  string[]|null $labels_include_all (optional)
     * @param  bool|null $labels_include_unlabeled (optional)
     * @param  string[]|null $labels_exclude_any (optional)
     * @param  string[]|null $labels_exclude_all (optional)
     * @param  bool|null $labels_exclude_unlabeled (optional)
     * @param  \DateTime|null $date_from (optional)
     * @param  \DateTime|null $date_to (optional)
     * @param  \OpenAPI\Client\Model\AdditionalFormsStatus[]|null $additional_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\RequestFormsStatus[]|null $request_form_statuses (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $review_status (optional)
     * @param  \OpenAPI\Client\Model\ReviewStatus|null $reviewer_progress (optional)
     * @param  string[]|null $review_stages_include Include matching ids.  Value is dropped if also included in Exclude. (optional)
     * @param  string[]|null $review_stages_exclude Exclude matching ids (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortField|null $sort_by_field (optional)
     * @param  \OpenAPI\Client\Model\SubmissionSortOrder|null $sort_by_order (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsGetRequest($continuation_token = null, $size = 20, $search = null, $public_organization_ids_include = null, $public_organization_ids_exclude = null, $projects_include = null, $projects_exclude = null, $statuses_include = null, $statuses_exclude = null, $reviewers = null, $archived_status = null, $labels_include_any = null, $labels_include_all = null, $labels_include_unlabeled = null, $labels_exclude_any = null, $labels_exclude_all = null, $labels_exclude_unlabeled = null, $date_from = null, $date_to = null, $additional_form_statuses = null, $request_form_statuses = null, $review_status = null, $reviewer_progress = null, $review_stages_include = null, $review_stages_exclude = null, $sort_by_field = null, $sort_by_order = null, string $contentType = self::contentTypes['v4SubmissionsGet'][0])
    {


        if ($size !== null && $size > 500) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling SubmissionsApi.v4SubmissionsGet, must be smaller than or equal to 500.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling SubmissionsApi.v4SubmissionsGet, must be bigger than or equal to 1.');
        }
        


























        $resourcePath = '/v4/submissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'Search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $public_organization_ids_include,
            'PublicOrganizationIds.Include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $public_organization_ids_exclude,
            'PublicOrganizationIds.Exclude', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $projects_include,
            'Projects.Include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $projects_exclude,
            'Projects.Exclude', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses_include,
            'Statuses.Include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses_exclude,
            'Statuses.Exclude', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reviewers,
            'Reviewers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $archived_status,
            'ArchivedStatus', // param base name
            'ArchivedStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labels_include_any,
            'Labels.IncludeAny', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labels_include_all,
            'Labels.IncludeAll', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labels_include_unlabeled,
            'Labels.IncludeUnlabeled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labels_exclude_any,
            'Labels.ExcludeAny', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labels_exclude_all,
            'Labels.ExcludeAll', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labels_exclude_unlabeled,
            'Labels.ExcludeUnlabeled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from,
            'DateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_to,
            'DateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_form_statuses,
            'AdditionalFormStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $request_form_statuses,
            'RequestFormStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $review_status,
            'ReviewStatus', // param base name
            'ReviewStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reviewer_progress,
            'ReviewerProgress', // param base name
            'ReviewStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $review_stages_include,
            'ReviewStages.Include', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $review_stages_exclude,
            'ReviewStages.Exclude', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by_field,
            'SortBy.Field', // param base name
            'SubmissionSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by_order,
            'SortBy.Order', // param base name
            'SubmissionSortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsHistoryGet
     *
     * Get a page of submission history items
     *
     * @param  string[]|null $submission_id submission_id (optional)
     * @param  string[]|null $user_id user_id (optional)
     * @param  int[]|null $history_type_id history_type_id (optional)
     * @param  string|null $bulk_action_task_id bulk_action_task_id (optional)
     * @param  string|null $continuation_token continuation_token (optional)
     * @param  int|null $size size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse|\OpenAPI\Client\Model\BadRequestResponse
     */
    public function v4SubmissionsHistoryGet($submission_id = null, $user_id = null, $history_type_id = null, $bulk_action_task_id = null, $continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4SubmissionsHistoryGet'][0])
    {
        list($response) = $this->v4SubmissionsHistoryGetWithHttpInfo($submission_id, $user_id, $history_type_id, $bulk_action_task_id, $continuation_token, $size, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsHistoryGetWithHttpInfo
     *
     * Get a page of submission history items
     *
     * @param  string[]|null $submission_id (optional)
     * @param  string[]|null $user_id (optional)
     * @param  int[]|null $history_type_id (optional)
     * @param  string|null $bulk_action_task_id (optional)
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsHistoryGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse|\OpenAPI\Client\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsHistoryGetWithHttpInfo($submission_id = null, $user_id = null, $history_type_id = null, $bulk_action_task_id = null, $continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4SubmissionsHistoryGet'][0])
    {
        $request = $this->v4SubmissionsHistoryGetRequest($submission_id, $user_id, $history_type_id, $bulk_action_task_id, $continuation_token, $size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsHistoryGetAsync
     *
     * Get a page of submission history items
     *
     * @param  string[]|null $submission_id (optional)
     * @param  string[]|null $user_id (optional)
     * @param  int[]|null $history_type_id (optional)
     * @param  string|null $bulk_action_task_id (optional)
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsHistoryGetAsync($submission_id = null, $user_id = null, $history_type_id = null, $bulk_action_task_id = null, $continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4SubmissionsHistoryGet'][0])
    {
        return $this->v4SubmissionsHistoryGetAsyncWithHttpInfo($submission_id, $user_id, $history_type_id, $bulk_action_task_id, $continuation_token, $size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsHistoryGetAsyncWithHttpInfo
     *
     * Get a page of submission history items
     *
     * @param  string[]|null $submission_id (optional)
     * @param  string[]|null $user_id (optional)
     * @param  int[]|null $history_type_id (optional)
     * @param  string|null $bulk_action_task_id (optional)
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsHistoryGetAsyncWithHttpInfo($submission_id = null, $user_id = null, $history_type_id = null, $bulk_action_task_id = null, $continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4SubmissionsHistoryGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContinuationTokenResponseSubmissionHistoryResponse';
        $request = $this->v4SubmissionsHistoryGetRequest($submission_id, $user_id, $history_type_id, $bulk_action_task_id, $continuation_token, $size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsHistoryGet'
     *
     * @param  string[]|null $submission_id (optional)
     * @param  string[]|null $user_id (optional)
     * @param  int[]|null $history_type_id (optional)
     * @param  string|null $bulk_action_task_id (optional)
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsHistoryGetRequest($submission_id = null, $user_id = null, $history_type_id = null, $bulk_action_task_id = null, $continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4SubmissionsHistoryGet'][0])
    {

        if ($submission_id !== null && count($submission_id) > 50) {
            throw new \InvalidArgumentException('invalid value for "$submission_id" when calling SubmissionsApi.v4SubmissionsHistoryGet, number of items must be less than or equal to 50.');
        }
        




        if ($size !== null && $size > 500) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling SubmissionsApi.v4SubmissionsHistoryGet, must be smaller than or equal to 500.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling SubmissionsApi.v4SubmissionsHistoryGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v4/submissions/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $submission_id,
            'submissionId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_id,
            'userId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $history_type_id,
            'historyTypeId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bulk_action_task_id,
            'bulkActionTaskId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsIdConvertIntsPost
     *
     * Convert list of int submission ids to guid submission ids
     *
     * @param  int[]|null $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertIntsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>
     */
    public function v4SubmissionsIdConvertIntsPost($request_body = null, string $contentType = self::contentTypes['v4SubmissionsIdConvertIntsPost'][0])
    {
        list($response) = $this->v4SubmissionsIdConvertIntsPostWithHttpInfo($request_body, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsIdConvertIntsPostWithHttpInfo
     *
     * Convert list of int submission ids to guid submission ids
     *
     * @param  int[]|null $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertIntsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsIdConvertIntsPostWithHttpInfo($request_body = null, string $contentType = self::contentTypes['v4SubmissionsIdConvertIntsPost'][0])
    {
        $request = $this->v4SubmissionsIdConvertIntsPostRequest($request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'array<string,string>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsIdConvertIntsPostAsync
     *
     * Convert list of int submission ids to guid submission ids
     *
     * @param  int[]|null $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertIntsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsIdConvertIntsPostAsync($request_body = null, string $contentType = self::contentTypes['v4SubmissionsIdConvertIntsPost'][0])
    {
        return $this->v4SubmissionsIdConvertIntsPostAsyncWithHttpInfo($request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsIdConvertIntsPostAsyncWithHttpInfo
     *
     * Convert list of int submission ids to guid submission ids
     *
     * @param  int[]|null $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertIntsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsIdConvertIntsPostAsyncWithHttpInfo($request_body = null, string $contentType = self::contentTypes['v4SubmissionsIdConvertIntsPost'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->v4SubmissionsIdConvertIntsPostRequest($request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsIdConvertIntsPost'
     *
     * @param  int[]|null $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertIntsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsIdConvertIntsPostRequest($request_body = null, string $contentType = self::contentTypes['v4SubmissionsIdConvertIntsPost'][0])
    {

        if ($request_body !== null && count($request_body) > 500) {
            throw new \InvalidArgumentException('invalid value for "$request_body" when calling SubmissionsApi.v4SubmissionsIdConvertIntsPost, number of items must be less than or equal to 500.');
        }
        

        $resourcePath = '/v4/submissions/id/convert/ints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsIdConvertSubmissionIdGet
     *
     * Convert integer Submission Id to guid Submission Id
     *
     * @param  int $submission_id submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function v4SubmissionsIdConvertSubmissionIdGet($submission_id, string $contentType = self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'][0])
    {
        list($response) = $this->v4SubmissionsIdConvertSubmissionIdGetWithHttpInfo($submission_id, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsIdConvertSubmissionIdGetWithHttpInfo
     *
     * Convert integer Submission Id to guid Submission Id
     *
     * @param  int $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsIdConvertSubmissionIdGetWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'][0])
    {
        $request = $this->v4SubmissionsIdConvertSubmissionIdGetRequest($submission_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsIdConvertSubmissionIdGetAsync
     *
     * Convert integer Submission Id to guid Submission Id
     *
     * @param  int $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsIdConvertSubmissionIdGetAsync($submission_id, string $contentType = self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'][0])
    {
        return $this->v4SubmissionsIdConvertSubmissionIdGetAsyncWithHttpInfo($submission_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsIdConvertSubmissionIdGetAsyncWithHttpInfo
     *
     * Convert integer Submission Id to guid Submission Id
     *
     * @param  int $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsIdConvertSubmissionIdGetAsyncWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'][0])
    {
        $returnType = 'string';
        $request = $this->v4SubmissionsIdConvertSubmissionIdGetRequest($submission_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsIdConvertSubmissionIdGet'
     *
     * @param  int $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsIdConvertSubmissionIdGetRequest($submission_id, string $contentType = self::contentTypes['v4SubmissionsIdConvertSubmissionIdGet'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsIdConvertSubmissionIdGet'
            );
        }


        $resourcePath = '/v4/submissions/id/convert/{submissionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsLabelsPut
     *
     * Add labels to submissions
     *
     * @param  \OpenAPI\Client\Model\ApplyLabelToSubmissionsRequest|null $apply_label_to_submissions_request apply_label_to_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsLabelsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SubmissionActionResponse
     */
    public function v4SubmissionsLabelsPut($apply_label_to_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsLabelsPut'][0])
    {
        list($response) = $this->v4SubmissionsLabelsPutWithHttpInfo($apply_label_to_submissions_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsLabelsPutWithHttpInfo
     *
     * Add labels to submissions
     *
     * @param  \OpenAPI\Client\Model\ApplyLabelToSubmissionsRequest|null $apply_label_to_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsLabelsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SubmissionActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsLabelsPutWithHttpInfo($apply_label_to_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsLabelsPut'][0])
    {
        $request = $this->v4SubmissionsLabelsPutRequest($apply_label_to_submissions_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionActionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsLabelsPutAsync
     *
     * Add labels to submissions
     *
     * @param  \OpenAPI\Client\Model\ApplyLabelToSubmissionsRequest|null $apply_label_to_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsLabelsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsLabelsPutAsync($apply_label_to_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsLabelsPut'][0])
    {
        return $this->v4SubmissionsLabelsPutAsyncWithHttpInfo($apply_label_to_submissions_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsLabelsPutAsyncWithHttpInfo
     *
     * Add labels to submissions
     *
     * @param  \OpenAPI\Client\Model\ApplyLabelToSubmissionsRequest|null $apply_label_to_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsLabelsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsLabelsPutAsyncWithHttpInfo($apply_label_to_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsLabelsPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
        $request = $this->v4SubmissionsLabelsPutRequest($apply_label_to_submissions_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsLabelsPut'
     *
     * @param  \OpenAPI\Client\Model\ApplyLabelToSubmissionsRequest|null $apply_label_to_submissions_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsLabelsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsLabelsPutRequest($apply_label_to_submissions_request = null, string $contentType = self::contentTypes['v4SubmissionsLabelsPut'][0])
    {



        $resourcePath = '/v4/submissions/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apply_label_to_submissions_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($apply_label_to_submissions_request));
            } else {
                $httpBody = $apply_label_to_submissions_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsMessagePost
     *
     * Send submitter a message
     *
     * @param  \OpenAPI\Client\Model\CreateSubmissionMessageBySubmissionIdsRequest|null $create_submission_message_by_submission_ids_request create_submission_message_by_submission_ids_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SubmissionActionResponse
     */
    public function v4SubmissionsMessagePost($create_submission_message_by_submission_ids_request = null, string $contentType = self::contentTypes['v4SubmissionsMessagePost'][0])
    {
        list($response) = $this->v4SubmissionsMessagePostWithHttpInfo($create_submission_message_by_submission_ids_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsMessagePostWithHttpInfo
     *
     * Send submitter a message
     *
     * @param  \OpenAPI\Client\Model\CreateSubmissionMessageBySubmissionIdsRequest|null $create_submission_message_by_submission_ids_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsMessagePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SubmissionActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsMessagePostWithHttpInfo($create_submission_message_by_submission_ids_request = null, string $contentType = self::contentTypes['v4SubmissionsMessagePost'][0])
    {
        $request = $this->v4SubmissionsMessagePostRequest($create_submission_message_by_submission_ids_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionActionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsMessagePostAsync
     *
     * Send submitter a message
     *
     * @param  \OpenAPI\Client\Model\CreateSubmissionMessageBySubmissionIdsRequest|null $create_submission_message_by_submission_ids_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsMessagePostAsync($create_submission_message_by_submission_ids_request = null, string $contentType = self::contentTypes['v4SubmissionsMessagePost'][0])
    {
        return $this->v4SubmissionsMessagePostAsyncWithHttpInfo($create_submission_message_by_submission_ids_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsMessagePostAsyncWithHttpInfo
     *
     * Send submitter a message
     *
     * @param  \OpenAPI\Client\Model\CreateSubmissionMessageBySubmissionIdsRequest|null $create_submission_message_by_submission_ids_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsMessagePostAsyncWithHttpInfo($create_submission_message_by_submission_ids_request = null, string $contentType = self::contentTypes['v4SubmissionsMessagePost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
        $request = $this->v4SubmissionsMessagePostRequest($create_submission_message_by_submission_ids_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsMessagePost'
     *
     * @param  \OpenAPI\Client\Model\CreateSubmissionMessageBySubmissionIdsRequest|null $create_submission_message_by_submission_ids_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsMessagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsMessagePostRequest($create_submission_message_by_submission_ids_request = null, string $contentType = self::contentTypes['v4SubmissionsMessagePost'][0])
    {



        $resourcePath = '/v4/submissions/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_submission_message_by_submission_ids_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_submission_message_by_submission_ids_request));
            } else {
                $httpBody = $create_submission_message_by_submission_ids_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsPost
     *
     * Import a submission
     *
     * @param  \OpenAPI\Client\Model\V4SubmissionsPostRequest|null $v4_submissions_post_request v4_submissions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionResponse
     */
    public function v4SubmissionsPost($v4_submissions_post_request = null, string $contentType = self::contentTypes['v4SubmissionsPost'][0])
    {
        list($response) = $this->v4SubmissionsPostWithHttpInfo($v4_submissions_post_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsPostWithHttpInfo
     *
     * Import a submission
     *
     * @param  \OpenAPI\Client\Model\V4SubmissionsPostRequest|null $v4_submissions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsPostWithHttpInfo($v4_submissions_post_request = null, string $contentType = self::contentTypes['v4SubmissionsPost'][0])
    {
        $request = $this->v4SubmissionsPostRequest($v4_submissions_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\SubmissionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsPostAsync
     *
     * Import a submission
     *
     * @param  \OpenAPI\Client\Model\V4SubmissionsPostRequest|null $v4_submissions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsPostAsync($v4_submissions_post_request = null, string $contentType = self::contentTypes['v4SubmissionsPost'][0])
    {
        return $this->v4SubmissionsPostAsyncWithHttpInfo($v4_submissions_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsPostAsyncWithHttpInfo
     *
     * Import a submission
     *
     * @param  \OpenAPI\Client\Model\V4SubmissionsPostRequest|null $v4_submissions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsPostAsyncWithHttpInfo($v4_submissions_post_request = null, string $contentType = self::contentTypes['v4SubmissionsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionResponse';
        $request = $this->v4SubmissionsPostRequest($v4_submissions_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsPost'
     *
     * @param  \OpenAPI\Client\Model\V4SubmissionsPostRequest|null $v4_submissions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsPostRequest($v4_submissions_post_request = null, string $contentType = self::contentTypes['v4SubmissionsPost'][0])
    {



        $resourcePath = '/v4/submissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v4_submissions_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v4_submissions_post_request));
            } else {
                $httpBody = $v4_submissions_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsPublicOrganizationPost
     *
     * Update a public organization id associated with a submission
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionPublicOrganizationRequest|null $update_submission_public_organization_request update_submission_public_organization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPublicOrganizationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsPublicOrganizationPost($update_submission_public_organization_request = null, string $contentType = self::contentTypes['v4SubmissionsPublicOrganizationPost'][0])
    {
        $this->v4SubmissionsPublicOrganizationPostWithHttpInfo($update_submission_public_organization_request, $contentType);
    }

    /**
     * Operation v4SubmissionsPublicOrganizationPostWithHttpInfo
     *
     * Update a public organization id associated with a submission
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionPublicOrganizationRequest|null $update_submission_public_organization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPublicOrganizationPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsPublicOrganizationPostWithHttpInfo($update_submission_public_organization_request = null, string $contentType = self::contentTypes['v4SubmissionsPublicOrganizationPost'][0])
    {
        $request = $this->v4SubmissionsPublicOrganizationPostRequest($update_submission_public_organization_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsPublicOrganizationPostAsync
     *
     * Update a public organization id associated with a submission
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionPublicOrganizationRequest|null $update_submission_public_organization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPublicOrganizationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsPublicOrganizationPostAsync($update_submission_public_organization_request = null, string $contentType = self::contentTypes['v4SubmissionsPublicOrganizationPost'][0])
    {
        return $this->v4SubmissionsPublicOrganizationPostAsyncWithHttpInfo($update_submission_public_organization_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsPublicOrganizationPostAsyncWithHttpInfo
     *
     * Update a public organization id associated with a submission
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionPublicOrganizationRequest|null $update_submission_public_organization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPublicOrganizationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsPublicOrganizationPostAsyncWithHttpInfo($update_submission_public_organization_request = null, string $contentType = self::contentTypes['v4SubmissionsPublicOrganizationPost'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsPublicOrganizationPostRequest($update_submission_public_organization_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsPublicOrganizationPost'
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionPublicOrganizationRequest|null $update_submission_public_organization_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsPublicOrganizationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsPublicOrganizationPostRequest($update_submission_public_organization_request = null, string $contentType = self::contentTypes['v4SubmissionsPublicOrganizationPost'][0])
    {



        $resourcePath = '/v4/submissions/public-organization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submission_public_organization_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_submission_public_organization_request));
            } else {
                $httpBody = $update_submission_public_organization_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsReviewStagePut
     *
     * Update review stage on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsReviewStageRequest|null $update_submissions_review_stage_request update_submissions_review_stage_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsReviewStagePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SubmissionActionResponse
     */
    public function v4SubmissionsReviewStagePut($update_submissions_review_stage_request = null, string $contentType = self::contentTypes['v4SubmissionsReviewStagePut'][0])
    {
        list($response) = $this->v4SubmissionsReviewStagePutWithHttpInfo($update_submissions_review_stage_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsReviewStagePutWithHttpInfo
     *
     * Update review stage on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsReviewStageRequest|null $update_submissions_review_stage_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsReviewStagePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SubmissionActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsReviewStagePutWithHttpInfo($update_submissions_review_stage_request = null, string $contentType = self::contentTypes['v4SubmissionsReviewStagePut'][0])
    {
        $request = $this->v4SubmissionsReviewStagePutRequest($update_submissions_review_stage_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionActionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsReviewStagePutAsync
     *
     * Update review stage on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsReviewStageRequest|null $update_submissions_review_stage_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsReviewStagePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsReviewStagePutAsync($update_submissions_review_stage_request = null, string $contentType = self::contentTypes['v4SubmissionsReviewStagePut'][0])
    {
        return $this->v4SubmissionsReviewStagePutAsyncWithHttpInfo($update_submissions_review_stage_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsReviewStagePutAsyncWithHttpInfo
     *
     * Update review stage on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsReviewStageRequest|null $update_submissions_review_stage_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsReviewStagePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsReviewStagePutAsyncWithHttpInfo($update_submissions_review_stage_request = null, string $contentType = self::contentTypes['v4SubmissionsReviewStagePut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
        $request = $this->v4SubmissionsReviewStagePutRequest($update_submissions_review_stage_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsReviewStagePut'
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsReviewStageRequest|null $update_submissions_review_stage_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsReviewStagePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsReviewStagePutRequest($update_submissions_review_stage_request = null, string $contentType = self::contentTypes['v4SubmissionsReviewStagePut'][0])
    {



        $resourcePath = '/v4/submissions/review_stage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submissions_review_stage_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_submissions_review_stage_request));
            } else {
                $httpBody = $update_submissions_review_stage_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsStatusPut
     *
     * Update status on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsStatusRequest|null $update_submissions_status_request update_submissions_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsStatusPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SubmissionActionResponse
     */
    public function v4SubmissionsStatusPut($update_submissions_status_request = null, string $contentType = self::contentTypes['v4SubmissionsStatusPut'][0])
    {
        list($response) = $this->v4SubmissionsStatusPutWithHttpInfo($update_submissions_status_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsStatusPutWithHttpInfo
     *
     * Update status on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsStatusRequest|null $update_submissions_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsStatusPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SubmissionActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsStatusPutWithHttpInfo($update_submissions_status_request = null, string $contentType = self::contentTypes['v4SubmissionsStatusPut'][0])
    {
        $request = $this->v4SubmissionsStatusPutRequest($update_submissions_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionActionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionActionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionActionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsStatusPutAsync
     *
     * Update status on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsStatusRequest|null $update_submissions_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsStatusPutAsync($update_submissions_status_request = null, string $contentType = self::contentTypes['v4SubmissionsStatusPut'][0])
    {
        return $this->v4SubmissionsStatusPutAsyncWithHttpInfo($update_submissions_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsStatusPutAsyncWithHttpInfo
     *
     * Update status on submissions
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsStatusRequest|null $update_submissions_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsStatusPutAsyncWithHttpInfo($update_submissions_status_request = null, string $contentType = self::contentTypes['v4SubmissionsStatusPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionActionResponse';
        $request = $this->v4SubmissionsStatusPutRequest($update_submissions_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsStatusPut'
     *
     * @param  \OpenAPI\Client\Model\UpdateSubmissionsStatusRequest|null $update_submissions_status_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsStatusPutRequest($update_submissions_status_request = null, string $contentType = self::contentTypes['v4SubmissionsStatusPut'][0])
    {



        $resourcePath = '/v4/submissions/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submissions_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_submissions_status_request));
            } else {
                $httpBody = $update_submissions_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdArchivePut
     *
     * Archive submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdArchivePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsSubmissionIdArchivePut($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdArchivePut'][0])
    {
        $this->v4SubmissionsSubmissionIdArchivePutWithHttpInfo($submission_id, $contentType);
    }

    /**
     * Operation v4SubmissionsSubmissionIdArchivePutWithHttpInfo
     *
     * Archive submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdArchivePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdArchivePutWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdArchivePut'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdArchivePutRequest($submission_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdArchivePutAsync
     *
     * Archive submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdArchivePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdArchivePutAsync($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdArchivePut'][0])
    {
        return $this->v4SubmissionsSubmissionIdArchivePutAsyncWithHttpInfo($submission_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdArchivePutAsyncWithHttpInfo
     *
     * Archive submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdArchivePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdArchivePutAsyncWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdArchivePut'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsSubmissionIdArchivePutRequest($submission_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdArchivePut'
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdArchivePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdArchivePutRequest($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdArchivePut'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdArchivePut'
            );
        }


        $resourcePath = '/v4/submissions/{submissionId}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdAssignmentsPut
     *
     * Update assignments for submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  \OpenAPI\Client\Model\UpdateSubmissionAssignmentsRequest|null $update_submission_assignments_request update_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse|\OpenAPI\Client\Model\BadRequestResponse
     */
    public function v4SubmissionsSubmissionIdAssignmentsPut($submission_id, $update_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'][0])
    {
        list($response) = $this->v4SubmissionsSubmissionIdAssignmentsPutWithHttpInfo($submission_id, $update_submission_assignments_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsSubmissionIdAssignmentsPutWithHttpInfo
     *
     * Update assignments for submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UpdateSubmissionAssignmentsRequest|null $update_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse|\OpenAPI\Client\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdAssignmentsPutWithHttpInfo($submission_id, $update_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdAssignmentsPutRequest($submission_id, $update_submission_assignments_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdAssignmentsPutAsync
     *
     * Update assignments for submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UpdateSubmissionAssignmentsRequest|null $update_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdAssignmentsPutAsync($submission_id, $update_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'][0])
    {
        return $this->v4SubmissionsSubmissionIdAssignmentsPutAsyncWithHttpInfo($submission_id, $update_submission_assignments_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdAssignmentsPutAsyncWithHttpInfo
     *
     * Update assignments for submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UpdateSubmissionAssignmentsRequest|null $update_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdAssignmentsPutAsyncWithHttpInfo($submission_id, $update_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UpdateSubmissionAssignmentsResponse';
        $request = $this->v4SubmissionsSubmissionIdAssignmentsPutRequest($submission_id, $update_submission_assignments_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdAssignmentsPut'
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UpdateSubmissionAssignmentsRequest|null $update_submission_assignments_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdAssignmentsPutRequest($submission_id, $update_submission_assignments_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdAssignmentsPut'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdAssignmentsPut'
            );
        }



        $resourcePath = '/v4/submissions/{submissionId}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_submission_assignments_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_submission_assignments_request));
            } else {
                $httpBody = $update_submission_assignments_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdDelete
     *
     * Delete a submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsSubmissionIdDelete($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdDelete'][0])
    {
        $this->v4SubmissionsSubmissionIdDeleteWithHttpInfo($submission_id, $contentType);
    }

    /**
     * Operation v4SubmissionsSubmissionIdDeleteWithHttpInfo
     *
     * Delete a submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdDeleteWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdDelete'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdDeleteRequest($submission_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdDeleteAsync
     *
     * Delete a submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdDeleteAsync($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdDelete'][0])
    {
        return $this->v4SubmissionsSubmissionIdDeleteAsyncWithHttpInfo($submission_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdDeleteAsyncWithHttpInfo
     *
     * Delete a submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdDeleteAsyncWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsSubmissionIdDeleteRequest($submission_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdDelete'
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdDeleteRequest($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdDelete'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdDelete'
            );
        }


        $resourcePath = '/v4/submissions/{submissionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdDelete
     *
     * Remove a label from a submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  string $label_id label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdDelete($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'][0])
    {
        $this->v4SubmissionsSubmissionIdLabelsLabelIdDeleteWithHttpInfo($submission_id, $label_id, $contentType);
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdDeleteWithHttpInfo
     *
     * Remove a label from a submission
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdDeleteWithHttpInfo($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdLabelsLabelIdDeleteRequest($submission_id, $label_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdDeleteAsync
     *
     * Remove a label from a submission
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdDeleteAsync($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'][0])
    {
        return $this->v4SubmissionsSubmissionIdLabelsLabelIdDeleteAsyncWithHttpInfo($submission_id, $label_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdDeleteAsyncWithHttpInfo
     *
     * Remove a label from a submission
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdDeleteAsyncWithHttpInfo($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsSubmissionIdLabelsLabelIdDeleteRequest($submission_id, $label_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdLabelsLabelIdDelete'
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdDeleteRequest($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdDelete'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdLabelsLabelIdDelete'
            );
        }

        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling v4SubmissionsSubmissionIdLabelsLabelIdDelete'
            );
        }


        $resourcePath = '/v4/submissions/{submissionId}/labels/{labelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }
        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'labelId' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdPut
     *
     * Apply a label to a submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  string $label_id label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdPut($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'][0])
    {
        $this->v4SubmissionsSubmissionIdLabelsLabelIdPutWithHttpInfo($submission_id, $label_id, $contentType);
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdPutWithHttpInfo
     *
     * Apply a label to a submission
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdPutWithHttpInfo($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdLabelsLabelIdPutRequest($submission_id, $label_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdPutAsync
     *
     * Apply a label to a submission
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdPutAsync($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'][0])
    {
        return $this->v4SubmissionsSubmissionIdLabelsLabelIdPutAsyncWithHttpInfo($submission_id, $label_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdLabelsLabelIdPutAsyncWithHttpInfo
     *
     * Apply a label to a submission
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdPutAsyncWithHttpInfo($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsSubmissionIdLabelsLabelIdPutRequest($submission_id, $label_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdLabelsLabelIdPut'
     *
     * @param  string $submission_id (required)
     * @param  string $label_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdLabelsLabelIdPutRequest($submission_id, $label_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdLabelsLabelIdPut'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdLabelsLabelIdPut'
            );
        }

        // verify the required parameter 'label_id' is set
        if ($label_id === null || (is_array($label_id) && count($label_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $label_id when calling v4SubmissionsSubmissionIdLabelsLabelIdPut'
            );
        }


        $resourcePath = '/v4/submissions/{submissionId}/labels/{labelId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }
        // path params
        if ($label_id !== null) {
            $resourcePath = str_replace(
                '{' . 'labelId' . '}',
                ObjectSerializer::toPathValue($label_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesAttachmentsPost
     *
     * Upload a note file attachment
     *
     * @param  string $submission_id submission_id (required)
     * @param  \OpenAPI\Client\Model\UploadNoteFileAttachmentRequest|null $upload_note_file_attachment_request upload_note_file_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\PostFileDataResponse
     */
    public function v4SubmissionsSubmissionIdNotesAttachmentsPost($submission_id, $upload_note_file_attachment_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'][0])
    {
        list($response) = $this->v4SubmissionsSubmissionIdNotesAttachmentsPostWithHttpInfo($submission_id, $upload_note_file_attachment_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesAttachmentsPostWithHttpInfo
     *
     * Upload a note file attachment
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UploadNoteFileAttachmentRequest|null $upload_note_file_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\PostFileDataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdNotesAttachmentsPostWithHttpInfo($submission_id, $upload_note_file_attachment_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdNotesAttachmentsPostRequest($submission_id, $upload_note_file_attachment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\PostFileDataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PostFileDataResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PostFileDataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PostFileDataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PostFileDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesAttachmentsPostAsync
     *
     * Upload a note file attachment
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UploadNoteFileAttachmentRequest|null $upload_note_file_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdNotesAttachmentsPostAsync($submission_id, $upload_note_file_attachment_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'][0])
    {
        return $this->v4SubmissionsSubmissionIdNotesAttachmentsPostAsyncWithHttpInfo($submission_id, $upload_note_file_attachment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesAttachmentsPostAsyncWithHttpInfo
     *
     * Upload a note file attachment
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UploadNoteFileAttachmentRequest|null $upload_note_file_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdNotesAttachmentsPostAsyncWithHttpInfo($submission_id, $upload_note_file_attachment_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PostFileDataResponse';
        $request = $this->v4SubmissionsSubmissionIdNotesAttachmentsPostRequest($submission_id, $upload_note_file_attachment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdNotesAttachmentsPost'
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\UploadNoteFileAttachmentRequest|null $upload_note_file_attachment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdNotesAttachmentsPostRequest($submission_id, $upload_note_file_attachment_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesAttachmentsPost'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdNotesAttachmentsPost'
            );
        }



        $resourcePath = '/v4/submissions/{submissionId}/notes/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upload_note_file_attachment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upload_note_file_attachment_request));
            } else {
                $httpBody = $upload_note_file_attachment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesPost
     *
     * Add a note to a submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteToSubmissionRequest|null $add_note_to_submission_request add_note_to_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsSubmissionIdNotesPost($submission_id, $add_note_to_submission_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesPost'][0])
    {
        $this->v4SubmissionsSubmissionIdNotesPostWithHttpInfo($submission_id, $add_note_to_submission_request, $contentType);
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesPostWithHttpInfo
     *
     * Add a note to a submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteToSubmissionRequest|null $add_note_to_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdNotesPostWithHttpInfo($submission_id, $add_note_to_submission_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesPost'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdNotesPostRequest($submission_id, $add_note_to_submission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesPostAsync
     *
     * Add a note to a submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteToSubmissionRequest|null $add_note_to_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdNotesPostAsync($submission_id, $add_note_to_submission_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesPost'][0])
    {
        return $this->v4SubmissionsSubmissionIdNotesPostAsyncWithHttpInfo($submission_id, $add_note_to_submission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdNotesPostAsyncWithHttpInfo
     *
     * Add a note to a submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteToSubmissionRequest|null $add_note_to_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdNotesPostAsyncWithHttpInfo($submission_id, $add_note_to_submission_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesPost'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsSubmissionIdNotesPostRequest($submission_id, $add_note_to_submission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdNotesPost'
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\AddNoteToSubmissionRequest|null $add_note_to_submission_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdNotesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdNotesPostRequest($submission_id, $add_note_to_submission_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdNotesPost'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdNotesPost'
            );
        }



        $resourcePath = '/v4/submissions/{submissionId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_note_to_submission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_note_to_submission_request));
            } else {
                $httpBody = $add_note_to_submission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdStageStageIdPut
     *
     * Move submission between review stages
     *
     * @param  string $submission_id submission_id (required)
     * @param  string $stage_id stage_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse|\OpenAPI\Client\Model\BadRequestResponse
     */
    public function v4SubmissionsSubmissionIdStageStageIdPut($submission_id, $stage_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'][0])
    {
        list($response) = $this->v4SubmissionsSubmissionIdStageStageIdPutWithHttpInfo($submission_id, $stage_id, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsSubmissionIdStageStageIdPutWithHttpInfo
     *
     * Move submission between review stages
     *
     * @param  string $submission_id (required)
     * @param  string $stage_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse|\OpenAPI\Client\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdStageStageIdPutWithHttpInfo($submission_id, $stage_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdStageStageIdPutRequest($submission_id, $stage_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdStageStageIdPutAsync
     *
     * Move submission between review stages
     *
     * @param  string $submission_id (required)
     * @param  string $stage_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdStageStageIdPutAsync($submission_id, $stage_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'][0])
    {
        return $this->v4SubmissionsSubmissionIdStageStageIdPutAsyncWithHttpInfo($submission_id, $stage_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdStageStageIdPutAsyncWithHttpInfo
     *
     * Move submission between review stages
     *
     * @param  string $submission_id (required)
     * @param  string $stage_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdStageStageIdPutAsyncWithHttpInfo($submission_id, $stage_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UpdateSubmissionReviewStageResponse';
        $request = $this->v4SubmissionsSubmissionIdStageStageIdPutRequest($submission_id, $stage_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdStageStageIdPut'
     *
     * @param  string $submission_id (required)
     * @param  string $stage_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdStageStageIdPutRequest($submission_id, $stage_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStageStageIdPut'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdStageStageIdPut'
            );
        }

        // verify the required parameter 'stage_id' is set
        if ($stage_id === null || (is_array($stage_id) && count($stage_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stage_id when calling v4SubmissionsSubmissionIdStageStageIdPut'
            );
        }


        $resourcePath = '/v4/submissions/{submissionId}/stage/{stageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }
        // path params
        if ($stage_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stageId' . '}',
                ObjectSerializer::toPathValue($stage_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdStatusPut
     *
     * Update status of a submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  \OpenAPI\Client\Model\V4SubmissionsSubmissionIdStatusPutRequest|null $v4_submissions_submission_id_status_put_request v4_submissions_submission_id_status_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStatusPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsSubmissionIdStatusPut($submission_id, $v4_submissions_submission_id_status_put_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStatusPut'][0])
    {
        $this->v4SubmissionsSubmissionIdStatusPutWithHttpInfo($submission_id, $v4_submissions_submission_id_status_put_request, $contentType);
    }

    /**
     * Operation v4SubmissionsSubmissionIdStatusPutWithHttpInfo
     *
     * Update status of a submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\V4SubmissionsSubmissionIdStatusPutRequest|null $v4_submissions_submission_id_status_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStatusPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdStatusPutWithHttpInfo($submission_id, $v4_submissions_submission_id_status_put_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStatusPut'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdStatusPutRequest($submission_id, $v4_submissions_submission_id_status_put_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdStatusPutAsync
     *
     * Update status of a submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\V4SubmissionsSubmissionIdStatusPutRequest|null $v4_submissions_submission_id_status_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdStatusPutAsync($submission_id, $v4_submissions_submission_id_status_put_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStatusPut'][0])
    {
        return $this->v4SubmissionsSubmissionIdStatusPutAsyncWithHttpInfo($submission_id, $v4_submissions_submission_id_status_put_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdStatusPutAsyncWithHttpInfo
     *
     * Update status of a submission
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\V4SubmissionsSubmissionIdStatusPutRequest|null $v4_submissions_submission_id_status_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdStatusPutAsyncWithHttpInfo($submission_id, $v4_submissions_submission_id_status_put_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStatusPut'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsSubmissionIdStatusPutRequest($submission_id, $v4_submissions_submission_id_status_put_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdStatusPut'
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\V4SubmissionsSubmissionIdStatusPutRequest|null $v4_submissions_submission_id_status_put_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdStatusPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdStatusPutRequest($submission_id, $v4_submissions_submission_id_status_put_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdStatusPut'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdStatusPut'
            );
        }



        $resourcePath = '/v4/submissions/{submissionId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v4_submissions_submission_id_status_put_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v4_submissions_submission_id_status_put_request));
            } else {
                $httpBody = $v4_submissions_submission_id_status_put_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdTransferPost
     *
     * Create a submission transfer request
     *
     * @param  string $submission_id submission_id (required)
     * @param  \OpenAPI\Client\Model\CreateTransferRequest|null $create_transfer_request create_transfer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BackgroundTaskStatusResponse
     */
    public function v4SubmissionsSubmissionIdTransferPost($submission_id, $create_transfer_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdTransferPost'][0])
    {
        list($response) = $this->v4SubmissionsSubmissionIdTransferPostWithHttpInfo($submission_id, $create_transfer_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsSubmissionIdTransferPostWithHttpInfo
     *
     * Create a submission transfer request
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\CreateTransferRequest|null $create_transfer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdTransferPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BackgroundTaskStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdTransferPostWithHttpInfo($submission_id, $create_transfer_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdTransferPost'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdTransferPostRequest($submission_id, $create_transfer_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\BackgroundTaskStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BackgroundTaskStatusResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BackgroundTaskStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\BackgroundTaskStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BackgroundTaskStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdTransferPostAsync
     *
     * Create a submission transfer request
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\CreateTransferRequest|null $create_transfer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdTransferPostAsync($submission_id, $create_transfer_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdTransferPost'][0])
    {
        return $this->v4SubmissionsSubmissionIdTransferPostAsyncWithHttpInfo($submission_id, $create_transfer_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdTransferPostAsyncWithHttpInfo
     *
     * Create a submission transfer request
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\CreateTransferRequest|null $create_transfer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdTransferPostAsyncWithHttpInfo($submission_id, $create_transfer_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdTransferPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BackgroundTaskStatusResponse';
        $request = $this->v4SubmissionsSubmissionIdTransferPostRequest($submission_id, $create_transfer_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdTransferPost'
     *
     * @param  string $submission_id (required)
     * @param  \OpenAPI\Client\Model\CreateTransferRequest|null $create_transfer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdTransferPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdTransferPostRequest($submission_id, $create_transfer_request = null, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdTransferPost'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdTransferPost'
            );
        }



        $resourcePath = '/v4/submissions/{submissionId}/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_transfer_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_transfer_request));
            } else {
                $httpBody = $create_transfer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsSubmissionIdUnarchivePut
     *
     * Unarchive submission
     *
     * @param  string $submission_id submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsSubmissionIdUnarchivePut($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'][0])
    {
        $this->v4SubmissionsSubmissionIdUnarchivePutWithHttpInfo($submission_id, $contentType);
    }

    /**
     * Operation v4SubmissionsSubmissionIdUnarchivePutWithHttpInfo
     *
     * Unarchive submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsSubmissionIdUnarchivePutWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'][0])
    {
        $request = $this->v4SubmissionsSubmissionIdUnarchivePutRequest($submission_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsSubmissionIdUnarchivePutAsync
     *
     * Unarchive submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdUnarchivePutAsync($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'][0])
    {
        return $this->v4SubmissionsSubmissionIdUnarchivePutAsyncWithHttpInfo($submission_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsSubmissionIdUnarchivePutAsyncWithHttpInfo
     *
     * Unarchive submission
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsSubmissionIdUnarchivePutAsyncWithHttpInfo($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsSubmissionIdUnarchivePutRequest($submission_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsSubmissionIdUnarchivePut'
     *
     * @param  string $submission_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsSubmissionIdUnarchivePutRequest($submission_id, string $contentType = self::contentTypes['v4SubmissionsSubmissionIdUnarchivePut'][0])
    {

        // verify the required parameter 'submission_id' is set
        if ($submission_id === null || (is_array($submission_id) && count($submission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submission_id when calling v4SubmissionsSubmissionIdUnarchivePut'
            );
        }


        $resourcePath = '/v4/submissions/{submissionId}/unarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($submission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'submissionId' . '}',
                ObjectSerializer::toPathValue($submission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsTeamAssignmentsGet
     *
     * Get team member assignment counts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTeamAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetAssignmentCountsResponse|\OpenAPI\Client\Model\BadRequestResponse
     */
    public function v4SubmissionsTeamAssignmentsGet(string $contentType = self::contentTypes['v4SubmissionsTeamAssignmentsGet'][0])
    {
        list($response) = $this->v4SubmissionsTeamAssignmentsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsTeamAssignmentsGetWithHttpInfo
     *
     * Get team member assignment counts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTeamAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetAssignmentCountsResponse|\OpenAPI\Client\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsTeamAssignmentsGetWithHttpInfo(string $contentType = self::contentTypes['v4SubmissionsTeamAssignmentsGet'][0])
    {
        $request = $this->v4SubmissionsTeamAssignmentsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetAssignmentCountsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetAssignmentCountsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetAssignmentCountsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetAssignmentCountsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetAssignmentCountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsTeamAssignmentsGetAsync
     *
     * Get team member assignment counts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTeamAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsTeamAssignmentsGetAsync(string $contentType = self::contentTypes['v4SubmissionsTeamAssignmentsGet'][0])
    {
        return $this->v4SubmissionsTeamAssignmentsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsTeamAssignmentsGetAsyncWithHttpInfo
     *
     * Get team member assignment counts
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTeamAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsTeamAssignmentsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v4SubmissionsTeamAssignmentsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetAssignmentCountsResponse';
        $request = $this->v4SubmissionsTeamAssignmentsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsTeamAssignmentsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTeamAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsTeamAssignmentsGetRequest(string $contentType = self::contentTypes['v4SubmissionsTeamAssignmentsGet'][0])
    {


        $resourcePath = '/v4/submissions/team/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsTransfersPost
     *
     * Get pending submission transfer requests
     *
     * @param  \OpenAPI\Client\Model\GetPendingTransfersRequest|null $get_pending_transfers_request get_pending_transfers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[]
     */
    public function v4SubmissionsTransfersPost($get_pending_transfers_request = null, string $contentType = self::contentTypes['v4SubmissionsTransfersPost'][0])
    {
        list($response) = $this->v4SubmissionsTransfersPostWithHttpInfo($get_pending_transfers_request, $contentType);
        return $response;
    }

    /**
     * Operation v4SubmissionsTransfersPostWithHttpInfo
     *
     * Get pending submission transfer requests
     *
     * @param  \OpenAPI\Client\Model\GetPendingTransfersRequest|null $get_pending_transfers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BadRequestResponse|\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsTransfersPostWithHttpInfo($get_pending_transfers_request = null, string $contentType = self::contentTypes['v4SubmissionsTransfersPost'][0])
    {
        $request = $this->v4SubmissionsTransfersPostRequest($get_pending_transfers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsTransfersPostAsync
     *
     * Get pending submission transfer requests
     *
     * @param  \OpenAPI\Client\Model\GetPendingTransfersRequest|null $get_pending_transfers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsTransfersPostAsync($get_pending_transfers_request = null, string $contentType = self::contentTypes['v4SubmissionsTransfersPost'][0])
    {
        return $this->v4SubmissionsTransfersPostAsyncWithHttpInfo($get_pending_transfers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsTransfersPostAsyncWithHttpInfo
     *
     * Get pending submission transfer requests
     *
     * @param  \OpenAPI\Client\Model\GetPendingTransfersRequest|null $get_pending_transfers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsTransfersPostAsyncWithHttpInfo($get_pending_transfers_request = null, string $contentType = self::contentTypes['v4SubmissionsTransfersPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SubmissionPendingTransfersResponse[]';
        $request = $this->v4SubmissionsTransfersPostRequest($get_pending_transfers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsTransfersPost'
     *
     * @param  \OpenAPI\Client\Model\GetPendingTransfersRequest|null $get_pending_transfers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsTransfersPostRequest($get_pending_transfers_request = null, string $contentType = self::contentTypes['v4SubmissionsTransfersPost'][0])
    {



        $resourcePath = '/v4/submissions/transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_pending_transfers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_pending_transfers_request));
            } else {
                $httpBody = $get_pending_transfers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4SubmissionsTransfersTransferIdCancelPost
     *
     * Cancel a transfer request
     *
     * @param  string $transfer_id transfer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4SubmissionsTransfersTransferIdCancelPost($transfer_id, string $contentType = self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'][0])
    {
        $this->v4SubmissionsTransfersTransferIdCancelPostWithHttpInfo($transfer_id, $contentType);
    }

    /**
     * Operation v4SubmissionsTransfersTransferIdCancelPostWithHttpInfo
     *
     * Cancel a transfer request
     *
     * @param  string $transfer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4SubmissionsTransfersTransferIdCancelPostWithHttpInfo($transfer_id, string $contentType = self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'][0])
    {
        $request = $this->v4SubmissionsTransfersTransferIdCancelPostRequest($transfer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4SubmissionsTransfersTransferIdCancelPostAsync
     *
     * Cancel a transfer request
     *
     * @param  string $transfer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsTransfersTransferIdCancelPostAsync($transfer_id, string $contentType = self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'][0])
    {
        return $this->v4SubmissionsTransfersTransferIdCancelPostAsyncWithHttpInfo($transfer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4SubmissionsTransfersTransferIdCancelPostAsyncWithHttpInfo
     *
     * Cancel a transfer request
     *
     * @param  string $transfer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4SubmissionsTransfersTransferIdCancelPostAsyncWithHttpInfo($transfer_id, string $contentType = self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'][0])
    {
        $returnType = '';
        $request = $this->v4SubmissionsTransfersTransferIdCancelPostRequest($transfer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4SubmissionsTransfersTransferIdCancelPost'
     *
     * @param  string $transfer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4SubmissionsTransfersTransferIdCancelPostRequest($transfer_id, string $contentType = self::contentTypes['v4SubmissionsTransfersTransferIdCancelPost'][0])
    {

        // verify the required parameter 'transfer_id' is set
        if ($transfer_id === null || (is_array($transfer_id) && count($transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_id when calling v4SubmissionsTransfersTransferIdCancelPost'
            );
        }


        $resourcePath = '/v4/submissions/transfers/{transferId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transferId' . '}',
                ObjectSerializer::toPathValue($transfer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
