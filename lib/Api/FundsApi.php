<?php
/**
 * FundsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submissionâ€™s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Submittable\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Submittable\ApiException;
use Submittable\Configuration;
use Submittable\HeaderSelector;
use Submittable\ObjectSerializer;

/**
 * FundsApi Class Doc Comment
 *
 * @category Class
 * @package  Submittable
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FundsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v4FundsFundIdDelete' => [
            'application/json',
        ],
        'v4FundsFundIdGet' => [
            'application/json',
        ],
        'v4FundsFundIdPut' => [
            'application/json',
        ],
        'v4FundsGet' => [
            'application/json',
        ],
        'v4FundsPost' => [
            'application/json',
        ],
        'v4TransactionsGet' => [
            'application/json',
        ],
        'v4TransactionsPost' => [
            'application/json',
        ],
        'v4TransactionsTransactionIdDelete' => [
            'application/json',
        ],
        'v4TransactionsTransactionIdGet' => [
            'application/json',
        ],
        'v4TransactionsTransactionIdPut' => [
            'application/json',
        ],
        'v4TransactionsTransactionIdSendPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v4FundsFundIdDelete
     *
     * Delete a fund
     *
     * @param  string $fund_id fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4FundsFundIdDelete($fund_id, string $contentType = self::contentTypes['v4FundsFundIdDelete'][0])
    {
        $this->v4FundsFundIdDeleteWithHttpInfo($fund_id, $contentType);
    }

    /**
     * Operation v4FundsFundIdDeleteWithHttpInfo
     *
     * Delete a fund
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4FundsFundIdDeleteWithHttpInfo($fund_id, string $contentType = self::contentTypes['v4FundsFundIdDelete'][0])
    {
        $request = $this->v4FundsFundIdDeleteRequest($fund_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4FundsFundIdDeleteAsync
     *
     * Delete a fund
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsFundIdDeleteAsync($fund_id, string $contentType = self::contentTypes['v4FundsFundIdDelete'][0])
    {
        return $this->v4FundsFundIdDeleteAsyncWithHttpInfo($fund_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4FundsFundIdDeleteAsyncWithHttpInfo
     *
     * Delete a fund
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsFundIdDeleteAsyncWithHttpInfo($fund_id, string $contentType = self::contentTypes['v4FundsFundIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v4FundsFundIdDeleteRequest($fund_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4FundsFundIdDelete'
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4FundsFundIdDeleteRequest($fund_id, string $contentType = self::contentTypes['v4FundsFundIdDelete'][0])
    {

        // verify the required parameter 'fund_id' is set
        if ($fund_id === null || (is_array($fund_id) && count($fund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fund_id when calling v4FundsFundIdDelete'
            );
        }


        $resourcePath = '/v4/funds/{fundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fundId' . '}',
                ObjectSerializer::toPathValue($fund_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4FundsFundIdGet
     *
     * Get a fund
     *
     * @param  string $fund_id fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\FundResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4FundsFundIdGet($fund_id, string $contentType = self::contentTypes['v4FundsFundIdGet'][0])
    {
        list($response) = $this->v4FundsFundIdGetWithHttpInfo($fund_id, $contentType);
        return $response;
    }

    /**
     * Operation v4FundsFundIdGetWithHttpInfo
     *
     * Get a fund
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\FundResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4FundsFundIdGetWithHttpInfo($fund_id, string $contentType = self::contentTypes['v4FundsFundIdGet'][0])
    {
        $request = $this->v4FundsFundIdGetRequest($fund_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\FundResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\FundResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\FundResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\FundResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\FundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4FundsFundIdGetAsync
     *
     * Get a fund
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsFundIdGetAsync($fund_id, string $contentType = self::contentTypes['v4FundsFundIdGet'][0])
    {
        return $this->v4FundsFundIdGetAsyncWithHttpInfo($fund_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4FundsFundIdGetAsyncWithHttpInfo
     *
     * Get a fund
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsFundIdGetAsyncWithHttpInfo($fund_id, string $contentType = self::contentTypes['v4FundsFundIdGet'][0])
    {
        $returnType = '\Submittable\Model\FundResponse';
        $request = $this->v4FundsFundIdGetRequest($fund_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4FundsFundIdGet'
     *
     * @param  string $fund_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4FundsFundIdGetRequest($fund_id, string $contentType = self::contentTypes['v4FundsFundIdGet'][0])
    {

        // verify the required parameter 'fund_id' is set
        if ($fund_id === null || (is_array($fund_id) && count($fund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fund_id when calling v4FundsFundIdGet'
            );
        }


        $resourcePath = '/v4/funds/{fundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fundId' . '}',
                ObjectSerializer::toPathValue($fund_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4FundsFundIdPut
     *
     * Update a fund
     *
     * @param  string $fund_id fund_id (required)
     * @param  \Submittable\Model\UpdateFundRequest|null $update_fund_request update_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\FundResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4FundsFundIdPut($fund_id, $update_fund_request = null, string $contentType = self::contentTypes['v4FundsFundIdPut'][0])
    {
        list($response) = $this->v4FundsFundIdPutWithHttpInfo($fund_id, $update_fund_request, $contentType);
        return $response;
    }

    /**
     * Operation v4FundsFundIdPutWithHttpInfo
     *
     * Update a fund
     *
     * @param  string $fund_id (required)
     * @param  \Submittable\Model\UpdateFundRequest|null $update_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\FundResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4FundsFundIdPutWithHttpInfo($fund_id, $update_fund_request = null, string $contentType = self::contentTypes['v4FundsFundIdPut'][0])
    {
        $request = $this->v4FundsFundIdPutRequest($fund_id, $update_fund_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\FundResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\FundResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\FundResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\FundResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\FundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4FundsFundIdPutAsync
     *
     * Update a fund
     *
     * @param  string $fund_id (required)
     * @param  \Submittable\Model\UpdateFundRequest|null $update_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsFundIdPutAsync($fund_id, $update_fund_request = null, string $contentType = self::contentTypes['v4FundsFundIdPut'][0])
    {
        return $this->v4FundsFundIdPutAsyncWithHttpInfo($fund_id, $update_fund_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4FundsFundIdPutAsyncWithHttpInfo
     *
     * Update a fund
     *
     * @param  string $fund_id (required)
     * @param  \Submittable\Model\UpdateFundRequest|null $update_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsFundIdPutAsyncWithHttpInfo($fund_id, $update_fund_request = null, string $contentType = self::contentTypes['v4FundsFundIdPut'][0])
    {
        $returnType = '\Submittable\Model\FundResponse';
        $request = $this->v4FundsFundIdPutRequest($fund_id, $update_fund_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4FundsFundIdPut'
     *
     * @param  string $fund_id (required)
     * @param  \Submittable\Model\UpdateFundRequest|null $update_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsFundIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4FundsFundIdPutRequest($fund_id, $update_fund_request = null, string $contentType = self::contentTypes['v4FundsFundIdPut'][0])
    {

        // verify the required parameter 'fund_id' is set
        if ($fund_id === null || (is_array($fund_id) && count($fund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fund_id when calling v4FundsFundIdPut'
            );
        }



        $resourcePath = '/v4/funds/{fundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($fund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fundId' . '}',
                ObjectSerializer::toPathValue($fund_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_fund_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_fund_request));
            } else {
                $httpBody = $update_fund_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4FundsGet
     *
     * Get a page of funds
     *
     * @param  string|null $continuation_token continuation_token (optional)
     * @param  int|null $size size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\ContinuationTokenResponseFundResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4FundsGet($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4FundsGet'][0])
    {
        list($response) = $this->v4FundsGetWithHttpInfo($continuation_token, $size, $contentType);
        return $response;
    }

    /**
     * Operation v4FundsGetWithHttpInfo
     *
     * Get a page of funds
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\ContinuationTokenResponseFundResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4FundsGetWithHttpInfo($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4FundsGet'][0])
    {
        $request = $this->v4FundsGetRequest($continuation_token, $size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\ContinuationTokenResponseFundResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\ContinuationTokenResponseFundResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\ContinuationTokenResponseFundResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\ContinuationTokenResponseFundResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\ContinuationTokenResponseFundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4FundsGetAsync
     *
     * Get a page of funds
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsGetAsync($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4FundsGet'][0])
    {
        return $this->v4FundsGetAsyncWithHttpInfo($continuation_token, $size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4FundsGetAsyncWithHttpInfo
     *
     * Get a page of funds
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsGetAsyncWithHttpInfo($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4FundsGet'][0])
    {
        $returnType = '\Submittable\Model\ContinuationTokenResponseFundResponse';
        $request = $this->v4FundsGetRequest($continuation_token, $size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4FundsGet'
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4FundsGetRequest($continuation_token = null, $size = 20, string $contentType = self::contentTypes['v4FundsGet'][0])
    {


        if ($size !== null && $size > 500) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling FundsApi.v4FundsGet, must be smaller than or equal to 500.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling FundsApi.v4FundsGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v4/funds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4FundsPost
     *
     * Create a fund
     *
     * @param  \Submittable\Model\CreateFundRequest|null $create_fund_request create_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\FundResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4FundsPost($create_fund_request = null, string $contentType = self::contentTypes['v4FundsPost'][0])
    {
        list($response) = $this->v4FundsPostWithHttpInfo($create_fund_request, $contentType);
        return $response;
    }

    /**
     * Operation v4FundsPostWithHttpInfo
     *
     * Create a fund
     *
     * @param  \Submittable\Model\CreateFundRequest|null $create_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\FundResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4FundsPostWithHttpInfo($create_fund_request = null, string $contentType = self::contentTypes['v4FundsPost'][0])
    {
        $request = $this->v4FundsPostRequest($create_fund_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Submittable\Model\FundResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\FundResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\FundResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\FundResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\FundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4FundsPostAsync
     *
     * Create a fund
     *
     * @param  \Submittable\Model\CreateFundRequest|null $create_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsPostAsync($create_fund_request = null, string $contentType = self::contentTypes['v4FundsPost'][0])
    {
        return $this->v4FundsPostAsyncWithHttpInfo($create_fund_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4FundsPostAsyncWithHttpInfo
     *
     * Create a fund
     *
     * @param  \Submittable\Model\CreateFundRequest|null $create_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4FundsPostAsyncWithHttpInfo($create_fund_request = null, string $contentType = self::contentTypes['v4FundsPost'][0])
    {
        $returnType = '\Submittable\Model\FundResponse';
        $request = $this->v4FundsPostRequest($create_fund_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4FundsPost'
     *
     * @param  \Submittable\Model\CreateFundRequest|null $create_fund_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4FundsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4FundsPostRequest($create_fund_request = null, string $contentType = self::contentTypes['v4FundsPost'][0])
    {



        $resourcePath = '/v4/funds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_fund_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_fund_request));
            } else {
                $httpBody = $create_fund_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4TransactionsGet
     *
     * Get a page of transactions
     *
     * @param  string|null $continuation_token continuation_token (optional)
     * @param  int|null $size size (optional, default to 20)
     * @param  string|null $fund_id fund_id (optional)
     * @param  string|null $status status (optional)
     * @param  string|null $start_date start_date (optional)
     * @param  string|null $end_date end_date (optional)
     * @param  string|null $submitter_id submitter_id (optional)
     * @param  string|null $submission_id submission_id (optional)
     * @param  string|null $public_organization_id public_organization_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\ContinuationTokenResponseTransactionResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4TransactionsGet($continuation_token = null, $size = 20, $fund_id = null, $status = null, $start_date = null, $end_date = null, $submitter_id = null, $submission_id = null, $public_organization_id = null, string $contentType = self::contentTypes['v4TransactionsGet'][0])
    {
        list($response) = $this->v4TransactionsGetWithHttpInfo($continuation_token, $size, $fund_id, $status, $start_date, $end_date, $submitter_id, $submission_id, $public_organization_id, $contentType);
        return $response;
    }

    /**
     * Operation v4TransactionsGetWithHttpInfo
     *
     * Get a page of transactions
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $fund_id (optional)
     * @param  string|null $status (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $end_date (optional)
     * @param  string|null $submitter_id (optional)
     * @param  string|null $submission_id (optional)
     * @param  string|null $public_organization_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\ContinuationTokenResponseTransactionResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4TransactionsGetWithHttpInfo($continuation_token = null, $size = 20, $fund_id = null, $status = null, $start_date = null, $end_date = null, $submitter_id = null, $submission_id = null, $public_organization_id = null, string $contentType = self::contentTypes['v4TransactionsGet'][0])
    {
        $request = $this->v4TransactionsGetRequest($continuation_token, $size, $fund_id, $status, $start_date, $end_date, $submitter_id, $submission_id, $public_organization_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\ContinuationTokenResponseTransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\ContinuationTokenResponseTransactionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\ContinuationTokenResponseTransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\ContinuationTokenResponseTransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\ContinuationTokenResponseTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4TransactionsGetAsync
     *
     * Get a page of transactions
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $fund_id (optional)
     * @param  string|null $status (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $end_date (optional)
     * @param  string|null $submitter_id (optional)
     * @param  string|null $submission_id (optional)
     * @param  string|null $public_organization_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsGetAsync($continuation_token = null, $size = 20, $fund_id = null, $status = null, $start_date = null, $end_date = null, $submitter_id = null, $submission_id = null, $public_organization_id = null, string $contentType = self::contentTypes['v4TransactionsGet'][0])
    {
        return $this->v4TransactionsGetAsyncWithHttpInfo($continuation_token, $size, $fund_id, $status, $start_date, $end_date, $submitter_id, $submission_id, $public_organization_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4TransactionsGetAsyncWithHttpInfo
     *
     * Get a page of transactions
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $fund_id (optional)
     * @param  string|null $status (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $end_date (optional)
     * @param  string|null $submitter_id (optional)
     * @param  string|null $submission_id (optional)
     * @param  string|null $public_organization_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsGetAsyncWithHttpInfo($continuation_token = null, $size = 20, $fund_id = null, $status = null, $start_date = null, $end_date = null, $submitter_id = null, $submission_id = null, $public_organization_id = null, string $contentType = self::contentTypes['v4TransactionsGet'][0])
    {
        $returnType = '\Submittable\Model\ContinuationTokenResponseTransactionResponse';
        $request = $this->v4TransactionsGetRequest($continuation_token, $size, $fund_id, $status, $start_date, $end_date, $submitter_id, $submission_id, $public_organization_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4TransactionsGet'
     *
     * @param  string|null $continuation_token (optional)
     * @param  int|null $size (optional, default to 20)
     * @param  string|null $fund_id (optional)
     * @param  string|null $status (optional)
     * @param  string|null $start_date (optional)
     * @param  string|null $end_date (optional)
     * @param  string|null $submitter_id (optional)
     * @param  string|null $submission_id (optional)
     * @param  string|null $public_organization_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4TransactionsGetRequest($continuation_token = null, $size = 20, $fund_id = null, $status = null, $start_date = null, $end_date = null, $submitter_id = null, $submission_id = null, $public_organization_id = null, string $contentType = self::contentTypes['v4TransactionsGet'][0])
    {


        if ($size !== null && $size > 500) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling FundsApi.v4TransactionsGet, must be smaller than or equal to 500.');
        }
        if ($size !== null && $size < 1) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling FundsApi.v4TransactionsGet, must be bigger than or equal to 1.');
        }
        








        $resourcePath = '/v4/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $continuation_token,
            'continuationToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fund_id,
            'fundId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'startDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $submitter_id,
            'submitterId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $submission_id,
            'submissionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $public_organization_id,
            'publicOrganizationId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4TransactionsPost
     *
     * Create a transaction
     *
     * @param  \Submittable\Model\V4TransactionsPostRequest|null $v4_transactions_post_request v4_transactions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\TransactionResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4TransactionsPost($v4_transactions_post_request = null, string $contentType = self::contentTypes['v4TransactionsPost'][0])
    {
        list($response) = $this->v4TransactionsPostWithHttpInfo($v4_transactions_post_request, $contentType);
        return $response;
    }

    /**
     * Operation v4TransactionsPostWithHttpInfo
     *
     * Create a transaction
     *
     * @param  \Submittable\Model\V4TransactionsPostRequest|null $v4_transactions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\TransactionResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4TransactionsPostWithHttpInfo($v4_transactions_post_request = null, string $contentType = self::contentTypes['v4TransactionsPost'][0])
    {
        $request = $this->v4TransactionsPostRequest($v4_transactions_post_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Submittable\Model\TransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\TransactionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\TransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\TransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4TransactionsPostAsync
     *
     * Create a transaction
     *
     * @param  \Submittable\Model\V4TransactionsPostRequest|null $v4_transactions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsPostAsync($v4_transactions_post_request = null, string $contentType = self::contentTypes['v4TransactionsPost'][0])
    {
        return $this->v4TransactionsPostAsyncWithHttpInfo($v4_transactions_post_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4TransactionsPostAsyncWithHttpInfo
     *
     * Create a transaction
     *
     * @param  \Submittable\Model\V4TransactionsPostRequest|null $v4_transactions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsPostAsyncWithHttpInfo($v4_transactions_post_request = null, string $contentType = self::contentTypes['v4TransactionsPost'][0])
    {
        $returnType = '\Submittable\Model\TransactionResponse';
        $request = $this->v4TransactionsPostRequest($v4_transactions_post_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4TransactionsPost'
     *
     * @param  \Submittable\Model\V4TransactionsPostRequest|null $v4_transactions_post_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4TransactionsPostRequest($v4_transactions_post_request = null, string $contentType = self::contentTypes['v4TransactionsPost'][0])
    {



        $resourcePath = '/v4/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($v4_transactions_post_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($v4_transactions_post_request));
            } else {
                $httpBody = $v4_transactions_post_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4TransactionsTransactionIdDelete
     *
     * Delete a transaction by id
     *
     * @param  string $transaction_id transaction_id (required)
     * @param  \Submittable\Model\DeleteTransactionRequest|null $delete_transaction_request delete_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v4TransactionsTransactionIdDelete($transaction_id, $delete_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdDelete'][0])
    {
        $this->v4TransactionsTransactionIdDeleteWithHttpInfo($transaction_id, $delete_transaction_request, $contentType);
    }

    /**
     * Operation v4TransactionsTransactionIdDeleteWithHttpInfo
     *
     * Delete a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\DeleteTransactionRequest|null $delete_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdDelete'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4TransactionsTransactionIdDeleteWithHttpInfo($transaction_id, $delete_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdDelete'][0])
    {
        $request = $this->v4TransactionsTransactionIdDeleteRequest($transaction_id, $delete_transaction_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4TransactionsTransactionIdDeleteAsync
     *
     * Delete a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\DeleteTransactionRequest|null $delete_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdDeleteAsync($transaction_id, $delete_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdDelete'][0])
    {
        return $this->v4TransactionsTransactionIdDeleteAsyncWithHttpInfo($transaction_id, $delete_transaction_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4TransactionsTransactionIdDeleteAsyncWithHttpInfo
     *
     * Delete a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\DeleteTransactionRequest|null $delete_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdDeleteAsyncWithHttpInfo($transaction_id, $delete_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v4TransactionsTransactionIdDeleteRequest($transaction_id, $delete_transaction_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4TransactionsTransactionIdDelete'
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\DeleteTransactionRequest|null $delete_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4TransactionsTransactionIdDeleteRequest($transaction_id, $delete_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdDelete'][0])
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling v4TransactionsTransactionIdDelete'
            );
        }



        $resourcePath = '/v4/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_transaction_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_transaction_request));
            } else {
                $httpBody = $delete_transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4TransactionsTransactionIdGet
     *
     * Get a transaction by id
     *
     * @param  string $transaction_id transaction_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\BadRequestResponse|\Submittable\Model\TransactionResponse
     */
    public function v4TransactionsTransactionIdGet($transaction_id, string $contentType = self::contentTypes['v4TransactionsTransactionIdGet'][0])
    {
        list($response) = $this->v4TransactionsTransactionIdGetWithHttpInfo($transaction_id, $contentType);
        return $response;
    }

    /**
     * Operation v4TransactionsTransactionIdGetWithHttpInfo
     *
     * Get a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdGet'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\BadRequestResponse|\Submittable\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4TransactionsTransactionIdGetWithHttpInfo($transaction_id, string $contentType = self::contentTypes['v4TransactionsTransactionIdGet'][0])
    {
        $request = $this->v4TransactionsTransactionIdGetRequest($transaction_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Submittable\Model\TransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\TransactionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\TransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\TransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4TransactionsTransactionIdGetAsync
     *
     * Get a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdGetAsync($transaction_id, string $contentType = self::contentTypes['v4TransactionsTransactionIdGet'][0])
    {
        return $this->v4TransactionsTransactionIdGetAsyncWithHttpInfo($transaction_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4TransactionsTransactionIdGetAsyncWithHttpInfo
     *
     * Get a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdGetAsyncWithHttpInfo($transaction_id, string $contentType = self::contentTypes['v4TransactionsTransactionIdGet'][0])
    {
        $returnType = '\Submittable\Model\TransactionResponse';
        $request = $this->v4TransactionsTransactionIdGetRequest($transaction_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4TransactionsTransactionIdGet'
     *
     * @param  string $transaction_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4TransactionsTransactionIdGetRequest($transaction_id, string $contentType = self::contentTypes['v4TransactionsTransactionIdGet'][0])
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling v4TransactionsTransactionIdGet'
            );
        }


        $resourcePath = '/v4/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4TransactionsTransactionIdPut
     *
     * Update a transaction by id
     *
     * @param  string $transaction_id transaction_id (required)
     * @param  \Submittable\Model\UpdateTransactionRequest|null $update_transaction_request update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\BadRequestResponse|\Submittable\Model\TransactionResponse
     */
    public function v4TransactionsTransactionIdPut($transaction_id, $update_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdPut'][0])
    {
        list($response) = $this->v4TransactionsTransactionIdPutWithHttpInfo($transaction_id, $update_transaction_request, $contentType);
        return $response;
    }

    /**
     * Operation v4TransactionsTransactionIdPutWithHttpInfo
     *
     * Update a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\UpdateTransactionRequest|null $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdPut'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\BadRequestResponse|\Submittable\Model\TransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4TransactionsTransactionIdPutWithHttpInfo($transaction_id, $update_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdPut'][0])
    {
        $request = $this->v4TransactionsTransactionIdPutRequest($transaction_id, $update_transaction_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 200:
                    if ('\Submittable\Model\TransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\TransactionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\TransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\TransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4TransactionsTransactionIdPutAsync
     *
     * Update a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\UpdateTransactionRequest|null $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdPutAsync($transaction_id, $update_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdPut'][0])
    {
        return $this->v4TransactionsTransactionIdPutAsyncWithHttpInfo($transaction_id, $update_transaction_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4TransactionsTransactionIdPutAsyncWithHttpInfo
     *
     * Update a transaction by id
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\UpdateTransactionRequest|null $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdPutAsyncWithHttpInfo($transaction_id, $update_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdPut'][0])
    {
        $returnType = '\Submittable\Model\TransactionResponse';
        $request = $this->v4TransactionsTransactionIdPutRequest($transaction_id, $update_transaction_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4TransactionsTransactionIdPut'
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\UpdateTransactionRequest|null $update_transaction_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4TransactionsTransactionIdPutRequest($transaction_id, $update_transaction_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdPut'][0])
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling v4TransactionsTransactionIdPut'
            );
        }



        $resourcePath = '/v4/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_transaction_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_transaction_request));
            } else {
                $httpBody = $update_transaction_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v4TransactionsTransactionIdSendPost
     *
     * Send funds
     *
     * @param  string $transaction_id transaction_id (required)
     * @param  \Submittable\Model\SendFundsRequest|null $send_funds_request send_funds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdSendPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Submittable\Model\TransactionResponse|\Submittable\Model\BadRequestResponse
     */
    public function v4TransactionsTransactionIdSendPost($transaction_id, $send_funds_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdSendPost'][0])
    {
        list($response) = $this->v4TransactionsTransactionIdSendPostWithHttpInfo($transaction_id, $send_funds_request, $contentType);
        return $response;
    }

    /**
     * Operation v4TransactionsTransactionIdSendPostWithHttpInfo
     *
     * Send funds
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\SendFundsRequest|null $send_funds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdSendPost'] to see the possible values for this operation
     *
     * @throws \Submittable\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Submittable\Model\TransactionResponse|\Submittable\Model\BadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v4TransactionsTransactionIdSendPostWithHttpInfo($transaction_id, $send_funds_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdSendPost'][0])
    {
        $request = $this->v4TransactionsTransactionIdSendPostRequest($transaction_id, $send_funds_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Submittable\Model\TransactionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\TransactionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\TransactionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Submittable\Model\BadRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Submittable\Model\BadRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Submittable\Model\BadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Submittable\Model\TransactionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Submittable\Model\BadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v4TransactionsTransactionIdSendPostAsync
     *
     * Send funds
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\SendFundsRequest|null $send_funds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdSendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdSendPostAsync($transaction_id, $send_funds_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdSendPost'][0])
    {
        return $this->v4TransactionsTransactionIdSendPostAsyncWithHttpInfo($transaction_id, $send_funds_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v4TransactionsTransactionIdSendPostAsyncWithHttpInfo
     *
     * Send funds
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\SendFundsRequest|null $send_funds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdSendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v4TransactionsTransactionIdSendPostAsyncWithHttpInfo($transaction_id, $send_funds_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdSendPost'][0])
    {
        $returnType = '\Submittable\Model\TransactionResponse';
        $request = $this->v4TransactionsTransactionIdSendPostRequest($transaction_id, $send_funds_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v4TransactionsTransactionIdSendPost'
     *
     * @param  string $transaction_id (required)
     * @param  \Submittable\Model\SendFundsRequest|null $send_funds_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v4TransactionsTransactionIdSendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v4TransactionsTransactionIdSendPostRequest($transaction_id, $send_funds_request = null, string $contentType = self::contentTypes['v4TransactionsTransactionIdSendPost'][0])
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling v4TransactionsTransactionIdSendPost'
            );
        }



        $resourcePath = '/v4/transactions/{transactionId}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_funds_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_funds_request));
            } else {
                $httpBody = $send_funds_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
