<?php
/**
 * FormsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submission’s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * FormsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FormsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for v4EntriesAdditionalPost
     *
     * Create and send an additional form entry.
     *
     */
    public function testV4EntriesAdditionalPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesAdditionalRescindPost
     *
     * Rescind additional form requests.
     *
     */
    public function testV4EntriesAdditionalRescindPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEditingClosePost
     *
     * Close entries for editing.
     *
     */
    public function testV4EntriesEditingClosePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEditingOpenPost
     *
     * Open entries for editing.
     *
     */
    public function testV4EntriesEditingOpenPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdClosePost
     *
     * Close editing.
     *
     */
    public function testV4EntriesEntryIdClosePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdDelete
     *
     * Delete an entry.
     *
     */
    public function testV4EntriesEntryIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdFieldsFieldIdPost
     *
     * Get a file upload url.
     *
     */
    public function testV4EntriesEntryIdFieldsFieldIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdFilesFileIdGet
     *
     * Get a url to download the uploaded file.
     *
     */
    public function testV4EntriesEntryIdFilesFileIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdGet
     *
     * Get an entry.
     *
     */
    public function testV4EntriesEntryIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdOpenPost
     *
     * Open editing.
     *
     */
    public function testV4EntriesEntryIdOpenPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdPatch
     *
     * Update a form entry.
     *
     */
    public function testV4EntriesEntryIdPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdPut
     *
     * Update a form entry.
     *
     */
    public function testV4EntriesEntryIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesEntryIdTablesTableIdGet
     *
     * Get a url to download the table.
     *
     */
    public function testV4EntriesEntryIdTablesTableIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesFormsFormIdGet
     *
     * Get a page of completed form entries.
     *
     */
    public function testV4EntriesFormsFormIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesInternalPost
     *
     * Create an internal form entry.
     *
     */
    public function testV4EntriesInternalPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesMessagePost
     *
     * Send message to entries.
     *
     */
    public function testV4EntriesMessagePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesMetadataFormsFormIdGet
     *
     * Get a page of form entry metadata.
     *
     */
    public function testV4EntriesMetadataFormsFormIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesRequestFilterEditingClosePut
     *
     * Close request form entries for editing by filter.
     *
     */
    public function testV4EntriesRequestFilterEditingClosePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesRequestFilterEditingOpenPut
     *
     * Open request form entries for editing by filter.
     *
     */
    public function testV4EntriesRequestFilterEditingOpenPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesRequestStatusPut
     *
     * Update status on request form entries.
     *
     */
    public function testV4EntriesRequestStatusPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesReviewsEntryIdDelete
     *
     * Delete a review entry by id.
     *
     */
    public function testV4EntriesReviewsEntryIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesReviewsScorePut
     *
     * Update a review score.
     *
     */
    public function testV4EntriesReviewsScorePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesSubmissionsSubmissionIdGet
     *
     * Get a submission's entries.
     *
     */
    public function testV4EntriesSubmissionsSubmissionIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4EntriesSubmissionsSubmissionIdReviewsGet
     *
     * Get reviews for a Submission.
     *
     */
    public function testV4EntriesSubmissionsSubmissionIdReviewsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsFormIdDelete
     *
     * Delete a form.
     *
     */
    public function testV4FormsFormIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsFormIdGet
     *
     * Get a form.
     *
     */
    public function testV4FormsFormIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsFormIdPut
     *
     * Update a form.
     *
     */
    public function testV4FormsFormIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsGet
     *
     * Get a page of forms.
     *
     */
    public function testV4FormsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsMetadataGet
     *
     * Get a page of form metadata.
     *
     */
    public function testV4FormsMetadataGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsPost
     *
     * Create a form.
     *
     */
    public function testV4FormsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsScheduledScheduledAdditionalFormIdDelete
     *
     * Delete scheduled additional form by id.
     *
     */
    public function testV4FormsScheduledScheduledAdditionalFormIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsSubmissionIdScheduledGet
     *
     * Get scheduled additional forms by submission.
     *
     */
    public function testV4FormsSubmissionIdScheduledGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4FormsTemplatesPaymentGet
     *
     * Clone payment template.
     *
     */
    public function testV4FormsTemplatesPaymentGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4ReviewsReviewResponseIdDelete
     *
     * Delete a review by id.
     *
     */
    public function testV4ReviewsReviewResponseIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
