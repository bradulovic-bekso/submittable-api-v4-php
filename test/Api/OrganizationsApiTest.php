<?php
/**
 * OrganizationsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submission’s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrganizationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrganizationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getOrganizationFeatures
     *
     * Get organization's features.
     *
     */
    public function testGetOrganizationFeatures()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsBillingGet
     *
     * Get billing information for organization.
     *
     */
    public function testV4OrganizationsBillingGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsBillingPost
     *
     * Create billing information for organization.
     *
     */
    public function testV4OrganizationsBillingPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsBillingPut
     *
     * Update billing information for organization.
     *
     */
    public function testV4OrganizationsBillingPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsCustomdataCustomDataRecordIdPatch
     *
     * Update a Organization's Public Organization Custom Data Record.
     *
     */
    public function testV4OrganizationsCustomdataCustomDataRecordIdPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsCustomdataLabelsGet
     *
     * Get a list of Custom Data Labels.
     *
     */
    public function testV4OrganizationsCustomdataLabelsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsCustomdataPost
     *
     * Bulk Create an organization's Public Organizations custom data.
     *
     */
    public function testV4OrganizationsCustomdataPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsCustomdataPublicOrgIdGet
     *
     * Get a Public Organization's Custom Data Record.
     *
     */
    public function testV4OrganizationsCustomdataPublicOrgIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsGet
     *
     * Get organization info.
     *
     */
    public function testV4OrganizationsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsGuidGet
     *
     * Get the organization guid.
     *
     */
    public function testV4OrganizationsGuidGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsStaffGroupsListGet
     *
     * List staff groups.
     *
     */
    public function testV4OrganizationsStaffGroupsListGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsStaffGroupsPost
     *
     * Create staff group.
     *
     */
    public function testV4OrganizationsStaffGroupsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsStaffGroupsStaffGroupIdDelete
     *
     * Delete staff group.
     *
     */
    public function testV4OrganizationsStaffGroupsStaffGroupIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsStaffGroupsStaffGroupIdPut
     *
     * Update staff group.
     *
     */
    public function testV4OrganizationsStaffGroupsStaffGroupIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamDelete
     *
     * Remove Team Members from an Organization.
     *
     */
    public function testV4OrganizationsTeamDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamGet
     *
     * Get team members.
     *
     */
    public function testV4OrganizationsTeamGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamInvitesDeletePost
     *
     * Remove any unaccepted staff invites for the given emails.
     *
     */
    public function testV4OrganizationsTeamInvitesDeletePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamInvitesGet
     *
     * Get list of team invites.
     *
     */
    public function testV4OrganizationsTeamInvitesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamInvitesResendPost
     *
     * Resend any unaccepted staff invites for the ids.
     *
     */
    public function testV4OrganizationsTeamInvitesResendPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamListPost
     *
     * Get a list of team members.
     *
     */
    public function testV4OrganizationsTeamListPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamPatch
     *
     * Updates Team Members.
     *
     */
    public function testV4OrganizationsTeamPatch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4OrganizationsTeamPost
     *
     * Add Team Members to Organization.
     *
     */
    public function testV4OrganizationsTeamPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
