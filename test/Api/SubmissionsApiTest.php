<?php
/**
 * SubmissionsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Submittable API Documentation
 *
 * This page contains the documentation on how to use Submittable through API calls.  ### Breaking changes   * All v3/requests and v3/responses endpoints merged into v4/entries endpoints     * Entries are a combination of both the request and response from v3 * All endpoints returning a page now use a continuation token instead of page number and page size     * Endpoints no longer return a count of how many items there are     * Endpoints no longer return how many pages there are     * Filters and size are made on the first request only, subsequent requests can only use the continuation token returned on the response. * Get a submission now returns formEntries instead of formResponses     * formEntries does not contain the fieldData property         * To get a single entry use the \"Get an entry\" endpoint, /v4/entries/{entryId}         * To get all entries for a submission use the \"Get a submission’s entries\" endpoint, /v4/entries/submissions/{submissionId} * All submissionId properties are now guids instead of integers * All labelId properties are now guids instead of integers * LegacyProjects.Include and LegacyProjects.Exclude on /v3/submissions have been removed * Update project endpoint /v3/projects/{projectId} now updates everything for a project * v3/projects/stages endpoints are removed, now review stages are managed by the create and update project endpoints * Get a list of team members and their assignment counts /v3/organizations/team/assignments has been replaced by /v4/organizations/team to get team members and /v4/submissions/team/assignment to get their assignment counts   ### Authentication  To access the API, you must present an API Key provisioned for your organization.  The API Key is sent using a basic authentication header, with the API key as the username and a blank password. Please ensure that the value is formatted as `{apiKey}`.  ``` Authorization: Basic {apiKey} ```  ### Request Content Type  All endpoints, unless otherwise noted, accept and produce `application/json`. Please ensure the `Content-Type` header for POST and PUT requests are set correctly.
 *
 * The version of the OpenAPI document: v4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SubmissionsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubmissionsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getSubmission
     *
     * Get a submission.
     *
     */
    public function testGetSubmission()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSubmissions
     *
     * Get submissions.
     *
     */
    public function testGetSubmissions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4MySubmissionsExternalPost
     *
     * Create external submission.
     *
     */
    public function testV4MySubmissionsExternalPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsAssignmentsListPost
     *
     * Get submission assignments organized by userId.
     *
     */
    public function testV4SubmissionsAssignmentsListPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsAssignmentsPut
     *
     * Update assignments on submissions.
     *
     */
    public function testV4SubmissionsAssignmentsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsAssignmentsRandomPost
     *
     * Add random assignments to submissions.
     *
     */
    public function testV4SubmissionsAssignmentsRandomPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsBulkPost
     *
     * Bulk import submissions.
     *
     */
    public function testV4SubmissionsBulkPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsEditingClosePut
     *
     * Close submissions for editing.
     *
     */
    public function testV4SubmissionsEditingClosePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsEditingOpenPut
     *
     * Open submissions for editing.
     *
     */
    public function testV4SubmissionsEditingOpenPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsGet
     *
     * Get a page of submissions.
     *
     */
    public function testV4SubmissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsHistoryGet
     *
     * Get a page of submission history items.
     *
     */
    public function testV4SubmissionsHistoryGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsIdConvertIntsPost
     *
     * Convert list of int submission ids to guid submission ids.
     *
     */
    public function testV4SubmissionsIdConvertIntsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsIdConvertSubmissionIdGet
     *
     * Convert integer Submission Id to guid Submission Id.
     *
     */
    public function testV4SubmissionsIdConvertSubmissionIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsLabelsPut
     *
     * Add labels to submissions.
     *
     */
    public function testV4SubmissionsLabelsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsMessagePost
     *
     * Send submitter a message.
     *
     */
    public function testV4SubmissionsMessagePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsPost
     *
     * Import a submission.
     *
     */
    public function testV4SubmissionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsPublicOrganizationPost
     *
     * Update a public organization id associated with a submission.
     *
     */
    public function testV4SubmissionsPublicOrganizationPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsReviewStagePut
     *
     * Update review stage on submissions.
     *
     */
    public function testV4SubmissionsReviewStagePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsStatusPut
     *
     * Update status on submissions.
     *
     */
    public function testV4SubmissionsStatusPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdArchivePut
     *
     * Archive submission.
     *
     */
    public function testV4SubmissionsSubmissionIdArchivePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdAssignmentsPut
     *
     * Update assignments for submission.
     *
     */
    public function testV4SubmissionsSubmissionIdAssignmentsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdDelete
     *
     * Delete a submission.
     *
     */
    public function testV4SubmissionsSubmissionIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdLabelsLabelIdDelete
     *
     * Remove a label from a submission.
     *
     */
    public function testV4SubmissionsSubmissionIdLabelsLabelIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdLabelsLabelIdPut
     *
     * Apply a label to a submission.
     *
     */
    public function testV4SubmissionsSubmissionIdLabelsLabelIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdNotesAttachmentsPost
     *
     * Upload a note file attachment.
     *
     */
    public function testV4SubmissionsSubmissionIdNotesAttachmentsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdNotesPost
     *
     * Add a note to a submission.
     *
     */
    public function testV4SubmissionsSubmissionIdNotesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdStageStageIdPut
     *
     * Move submission between review stages.
     *
     */
    public function testV4SubmissionsSubmissionIdStageStageIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdStatusPut
     *
     * Update status of a submission.
     *
     */
    public function testV4SubmissionsSubmissionIdStatusPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdTransferPost
     *
     * Create a submission transfer request.
     *
     */
    public function testV4SubmissionsSubmissionIdTransferPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsSubmissionIdUnarchivePut
     *
     * Unarchive submission.
     *
     */
    public function testV4SubmissionsSubmissionIdUnarchivePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsTeamAssignmentsGet
     *
     * Get team member assignment counts.
     *
     */
    public function testV4SubmissionsTeamAssignmentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsTransfersPost
     *
     * Get pending submission transfer requests.
     *
     */
    public function testV4SubmissionsTransfersPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for v4SubmissionsTransfersTransferIdCancelPost
     *
     * Cancel a transfer request.
     *
     */
    public function testV4SubmissionsTransfersTransferIdCancelPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
